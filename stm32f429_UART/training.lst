
training.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001198  080001ac  080001ac  000081ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08001344  08001344  00009344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .data         00000024  20000000  08001398  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 ._user_heap_stack 00000400  20000024  20000024  00010024  2**0
                  ALLOC
  5 .ARM.attributes 0000002d  00000000  00000000  00010024  2**0
                  CONTENTS, READONLY
  6 .debug_info   00003ac0  00000000  00000000  00010051  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cfb  00000000  00000000  00013b11  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001c91  00000000  00000000  0001480c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000004d0  00000000  00000000  000164a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000478  00000000  00000000  00016970  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000016a2  00000000  00000000  00016de8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001673  00000000  00000000  0001848a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000070  00000000  00000000  00019afd  2**0
                  CONTENTS, READONLY
 14 .debug_frame  00000920  00000000  00000000  00019b70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .isr_vector:

08000000 <g_pfnVectors>:
 8000000:	20030000 	andcs	r0, r3, r0
 8000004:	08000521 	stmdaeq	r0, {r0, r5, r8, sl}
 8000008:	0800037d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r8, r9}
 800000c:	08000381 	stmdaeq	r0, {r0, r7, r8, r9}
 8000010:	08000385 	stmdaeq	r0, {r0, r2, r7, r8, r9}
 8000014:	08000389 	stmdaeq	r0, {r0, r3, r7, r8, r9}
 8000018:	0800038d 	stmdaeq	r0, {r0, r2, r3, r7, r8, r9}
	...
 800002c:	08000391 	stmdaeq	r0, {r0, r4, r7, r8, r9}
 8000030:	08000395 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9}
 8000034:	00000000 	andeq	r0, r0, r0
 8000038:	08000399 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9}
 800003c:	0800039d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r8, r9}
 8000040:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 8000044:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 8000048:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 800004c:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 8000050:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 8000054:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 8000058:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 800005c:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 8000060:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 8000064:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 8000068:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 800006c:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 8000070:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 8000074:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 8000078:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 800007c:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 8000080:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 8000084:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 8000088:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 800008c:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 8000090:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 8000094:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 8000098:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 800009c:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 80000a0:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 80000a4:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 80000a8:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 80000ac:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 80000b0:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 80000b4:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 80000b8:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 80000bc:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 80000c0:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 80000c4:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 80000c8:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 80000cc:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 80000d0:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 80000d4:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 80000d8:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 80000dc:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 80000e0:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 80000e4:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 80000e8:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 80000ec:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 80000f0:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 80000f4:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 80000f8:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 80000fc:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 8000100:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 8000104:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 8000108:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 800010c:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 8000110:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 8000114:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 8000118:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 800011c:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 8000120:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 8000124:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 8000128:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 800012c:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 8000130:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 8000134:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 8000138:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 800013c:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 8000140:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 8000144:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 8000148:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 800014c:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 8000150:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 8000154:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 8000158:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 800015c:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 8000160:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 8000164:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 8000168:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 800016c:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 8000170:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 8000174:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 8000178:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 800017c:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 8000180:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 8000184:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 8000188:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 800018c:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 8000190:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 8000194:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 8000198:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 800019c:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 80001a0:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 80001a4:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}
 80001a8:	0800056d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl}

Disassembly of section .text:

080001ac <RCC_Configuration-0x14>:
 80001ac:	08001398 	stmdaeq	r0, {r3, r4, r7, r8, r9, ip}
 80001b0:	20000000 	andcs	r0, r0, r0
 80001b4:	20000024 	andcs	r0, r0, r4, lsr #32
 80001b8:	20000024 	andcs	r0, r0, r4, lsr #32
 80001bc:	20000024 	andcs	r0, r0, r4, lsr #32

080001c0 <RCC_Configuration>:
/* Private define ------------------------------------------------------------*/
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/

void RCC_Configuration(void)
{
 80001c0:	b508      	push	{r3, lr}
      /* --------------------------- System Clocks Configuration -----------------*/
      /* USART1 clock enable */
      RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 80001c2:	2010      	movs	r0, #16
 80001c4:	2101      	movs	r1, #1
 80001c6:	f000 fd79 	bl	8000cbc <RCC_APB2PeriphClockCmd>
      /* GPIOA clock enable */
      RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80001ca:	2001      	movs	r0, #1
 80001cc:	4601      	mov	r1, r0
}
 80001ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
      /* --------------------------- System Clocks Configuration -----------------*/
      /* USART1 clock enable */
      RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
      /* GPIOA clock enable */
      RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80001d2:	f000 bd43 	b.w	8000c5c <RCC_AHB1PeriphClockCmd>
 80001d6:	bf00      	nop

080001d8 <GPIO_Configuration>:
}
 
/**************************************************************************************/
 
void GPIO_Configuration(void)
{
 80001d8:	b530      	push	{r4, r5, lr}
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_10;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 80001da:	4c0f      	ldr	r4, [pc, #60]	; (8000218 <GPIO_Configuration+0x40>)
}
 
/**************************************************************************************/
 
void GPIO_Configuration(void)
{
 80001dc:	b083      	sub	sp, #12
    GPIO_InitTypeDef GPIO_InitStructure;

    /*-------------------------- GPIO Configuration ----------------------------*/
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_10;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80001de:	2300      	movs	r3, #0
{
    GPIO_InitTypeDef GPIO_InitStructure;

    /*-------------------------- GPIO Configuration ----------------------------*/
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_10;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80001e0:	2202      	movs	r2, #2
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 80001e2:	4620      	mov	r0, r4
 80001e4:	4669      	mov	r1, sp
void GPIO_Configuration(void)
{
    GPIO_InitTypeDef GPIO_InitStructure;

    /*-------------------------- GPIO Configuration ----------------------------*/
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_10;
 80001e6:	f44f 65c0 	mov.w	r5, #1536	; 0x600
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80001ea:	f88d 3006 	strb.w	r3, [sp, #6]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80001ee:	f88d 3007 	strb.w	r3, [sp, #7]
{
    GPIO_InitTypeDef GPIO_InitStructure;

    /*-------------------------- GPIO Configuration ----------------------------*/
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_10;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80001f2:	f88d 2004 	strb.w	r2, [sp, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80001f6:	f88d 2005 	strb.w	r2, [sp, #5]
void GPIO_Configuration(void)
{
    GPIO_InitTypeDef GPIO_InitStructure;

    /*-------------------------- GPIO Configuration ----------------------------*/
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_10;
 80001fa:	9500      	str	r5, [sp, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 80001fc:	f000 face 	bl	800079c <GPIO_Init>

    /* Connect USART pins to AF */
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource9, GPIO_AF_USART1);   // USART1_TX
 8000200:	4620      	mov	r0, r4
 8000202:	2109      	movs	r1, #9
 8000204:	2207      	movs	r2, #7
 8000206:	f000 fb67 	bl	80008d8 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource10, GPIO_AF_USART1);  // USART1_RX
 800020a:	4620      	mov	r0, r4
 800020c:	210a      	movs	r1, #10
 800020e:	2207      	movs	r2, #7
 8000210:	f000 fb62 	bl	80008d8 <GPIO_PinAFConfig>
}
 8000214:	b003      	add	sp, #12
 8000216:	bd30      	pop	{r4, r5, pc}
 8000218:	40020000 	andmi	r0, r2, r0

0800021c <LED_Initialization>:
 
/**************************************************************************************/
 
void LED_Initialization(void){
 800021c:	b510      	push	{r4, lr}

  GPIO_InitTypeDef  GPIO_InitStructure;

  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG , ENABLE); //LED3/4 GPIO Port
 800021e:	2040      	movs	r0, #64	; 0x40
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource10, GPIO_AF_USART1);  // USART1_RX
}
 
/**************************************************************************************/
 
void LED_Initialization(void){
 8000220:	b082      	sub	sp, #8

  GPIO_InitTypeDef  GPIO_InitStructure;

  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG , ENABLE); //LED3/4 GPIO Port
 8000222:	2101      	movs	r1, #1
 8000224:	f000 fd1a 	bl	8000c5c <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14;  // LED is connected to PG13/PG14
 8000228:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800022c:	2301      	movs	r3, #1
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800022e:	2202      	movs	r2, #2
  GPIO_InitTypeDef  GPIO_InitStructure;

  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG , ENABLE); //LED3/4 GPIO Port

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14;  // LED is connected to PG13/PG14
 8000230:	9100      	str	r1, [sp, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000232:	2400      	movs	r4, #0
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000234:	4806      	ldr	r0, [pc, #24]	; (8000250 <LED_Initialization+0x34>)

  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG , ENABLE); //LED3/4 GPIO Port

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14;  // LED is connected to PG13/PG14
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000236:	f88d 3004 	strb.w	r3, [sp, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_Init(GPIOG, &GPIO_InitStructure);
 800023a:	4669      	mov	r1, sp

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14;  // LED is connected to PG13/PG14
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 800023c:	f88d 3007 	strb.w	r3, [sp, #7]
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG , ENABLE); //LED3/4 GPIO Port

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14;  // LED is connected to PG13/PG14
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000240:	f88d 4006 	strb.w	r4, [sp, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000244:	f88d 2005 	strb.w	r2, [sp, #5]
  GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000248:	f000 faa8 	bl	800079c <GPIO_Init>

}
 800024c:	b002      	add	sp, #8
 800024e:	bd10      	pop	{r4, pc}
 8000250:	40021800 	andmi	r1, r2, r0, lsl #16

08000254 <LED3_Toggle>:

void LED3_Toggle(void){


  GPIOG->ODR ^= GPIO_Pin_13;
 8000254:	4b02      	ldr	r3, [pc, #8]	; (8000260 <LED3_Toggle+0xc>)
 8000256:	695a      	ldr	r2, [r3, #20]
 8000258:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 800025c:	615a      	str	r2, [r3, #20]
 800025e:	4770      	bx	lr
 8000260:	40021800 	andmi	r1, r2, r0, lsl #16

08000264 <USART1_Configuration>:

}

void USART1_Configuration(void)
{
 8000264:	b530      	push	{r4, r5, lr}
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    USART_InitStructure.USART_Parity = USART_Parity_No;
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    USART_Init(USART1, &USART_InitStructure);
 8000266:	4c0d      	ldr	r4, [pc, #52]	; (800029c <USART1_Configuration+0x38>)
  GPIOG->ODR ^= GPIO_Pin_13;

}

void USART1_Configuration(void)
{
 8000268:	b085      	sub	sp, #20
     *  - No parity
     *  - Hardware flow control disabled (RTS and CTS signals)
     *  - Receive and transmit enabled
     */
    USART_InitStructure.USART_BaudRate = 115200;
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 800026a:	2300      	movs	r3, #0
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    USART_InitStructure.USART_Parity = USART_Parity_No;
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800026c:	220c      	movs	r2, #12
    USART_Init(USART1, &USART_InitStructure);
 800026e:	4620      	mov	r0, r4
 8000270:	4669      	mov	r1, sp
     *  - One Stop Bit
     *  - No parity
     *  - Hardware flow control disabled (RTS and CTS signals)
     *  - Receive and transmit enabled
     */
    USART_InitStructure.USART_BaudRate = 115200;
 8000272:	f44f 35e1 	mov.w	r5, #115200	; 0x1c200
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8000276:	f8ad 3004 	strh.w	r3, [sp, #4]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
 800027a:	f8ad 3006 	strh.w	r3, [sp, #6]
    USART_InitStructure.USART_Parity = USART_Parity_No;
 800027e:	f8ad 3008 	strh.w	r3, [sp, #8]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8000282:	f8ad 300c 	strh.w	r3, [sp, #12]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000286:	f8ad 200a 	strh.w	r2, [sp, #10]
     *  - One Stop Bit
     *  - No parity
     *  - Hardware flow control disabled (RTS and CTS signals)
     *  - Receive and transmit enabled
     */
    USART_InitStructure.USART_BaudRate = 115200;
 800028a:	9500      	str	r5, [sp, #0]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    USART_InitStructure.USART_Parity = USART_Parity_No;
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    USART_Init(USART1, &USART_InitStructure);
 800028c:	f000 fe5e 	bl	8000f4c <USART_Init>
    USART_Cmd(USART1, ENABLE);
 8000290:	4620      	mov	r0, r4
 8000292:	2101      	movs	r1, #1
 8000294:	f000 fee0 	bl	8001058 <USART_Cmd>
}
 8000298:	b005      	add	sp, #20
 800029a:	bd30      	pop	{r4, r5, pc}
 800029c:	40011000 	andmi	r1, r1, r0

080002a0 <USART1_puts>:

void USART1_puts(char* s)
{
 80002a0:	b510      	push	{r4, lr}
    while(*s) {
 80002a2:	7803      	ldrb	r3, [r0, #0]
 80002a4:	b173      	cbz	r3, 80002c4 <USART1_puts+0x24>
 80002a6:	1e44      	subs	r4, r0, #1
        while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);
 80002a8:	4807      	ldr	r0, [pc, #28]	; (80002c8 <USART1_puts+0x28>)
 80002aa:	2180      	movs	r1, #128	; 0x80
 80002ac:	f000 ffcc 	bl	8001248 <USART_GetFlagStatus>
 80002b0:	2800      	cmp	r0, #0
 80002b2:	d0f9      	beq.n	80002a8 <USART1_puts+0x8>
        USART_SendData(USART1, *s);
 80002b4:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80002b8:	4803      	ldr	r0, [pc, #12]	; (80002c8 <USART1_puts+0x28>)
 80002ba:	f000 ff01 	bl	80010c0 <USART_SendData>
    USART_Cmd(USART1, ENABLE);
}

void USART1_puts(char* s)
{
    while(*s) {
 80002be:	7863      	ldrb	r3, [r4, #1]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d1f1      	bne.n	80002a8 <USART1_puts+0x8>
 80002c4:	bd10      	pop	{r4, pc}
 80002c6:	bf00      	nop
 80002c8:	40011000 	andmi	r1, r1, r0

080002cc <main>:
    }
}

/**************************************************************************************/
int main(void)
{
 80002cc:	b508      	push	{r3, lr}
    RCC_Configuration();
 80002ce:	f7ff ff77 	bl	80001c0 <RCC_Configuration>
    GPIO_Configuration();
 80002d2:	f7ff ff81 	bl	80001d8 <GPIO_Configuration>
    USART1_Configuration();
 80002d6:	f7ff ffc5 	bl	8000264 <USART1_Configuration>
    LED_Initialization();
 80002da:	f7ff ff9f 	bl	800021c <LED_Initialization>
 80002de:	4d23      	ldr	r5, [pc, #140]	; (800036c <main+0xa0>)
    USART_Cmd(USART1, ENABLE);
}

void USART1_puts(char* s)
{
    while(*s) {
 80002e0:	2448      	movs	r4, #72	; 0x48
        while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);
 80002e2:	4823      	ldr	r0, [pc, #140]	; (8000370 <main+0xa4>)
 80002e4:	2180      	movs	r1, #128	; 0x80
 80002e6:	f000 ffaf 	bl	8001248 <USART_GetFlagStatus>
 80002ea:	2800      	cmp	r0, #0
 80002ec:	d0f9      	beq.n	80002e2 <main+0x16>
        USART_SendData(USART1, *s);
 80002ee:	4621      	mov	r1, r4
 80002f0:	481f      	ldr	r0, [pc, #124]	; (8000370 <main+0xa4>)
 80002f2:	f000 fee5 	bl	80010c0 <USART_SendData>
    USART_Cmd(USART1, ENABLE);
}

void USART1_puts(char* s)
{
    while(*s) {
 80002f6:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 80002fa:	2c00      	cmp	r4, #0
 80002fc:	d1f1      	bne.n	80002e2 <main+0x16>
 80002fe:	4d1d      	ldr	r5, [pc, #116]	; (8000374 <main+0xa8>)
 8000300:	244a      	movs	r4, #74	; 0x4a
        while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);
 8000302:	481b      	ldr	r0, [pc, #108]	; (8000370 <main+0xa4>)
 8000304:	2180      	movs	r1, #128	; 0x80
 8000306:	f000 ff9f 	bl	8001248 <USART_GetFlagStatus>
 800030a:	2800      	cmp	r0, #0
 800030c:	d0f9      	beq.n	8000302 <main+0x36>
        USART_SendData(USART1, *s);
 800030e:	4621      	mov	r1, r4
 8000310:	4817      	ldr	r0, [pc, #92]	; (8000370 <main+0xa4>)
 8000312:	f000 fed5 	bl	80010c0 <USART_SendData>
    USART_Cmd(USART1, ENABLE);
}

void USART1_puts(char* s)
{
    while(*s) {
 8000316:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 800031a:	2c00      	cmp	r4, #0
 800031c:	d1f1      	bne.n	8000302 <main+0x36>
}

void LED3_Toggle(void){


  GPIOG->ODR ^= GPIO_Pin_13;
 800031e:	4e16      	ldr	r6, [pc, #88]	; (8000378 <main+0xac>)
 8000320:	6973      	ldr	r3, [r6, #20]
 8000322:	4d12      	ldr	r5, [pc, #72]	; (800036c <main+0xa0>)
 8000324:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000328:	6173      	str	r3, [r6, #20]
    USART_Cmd(USART1, ENABLE);
}

void USART1_puts(char* s)
{
    while(*s) {
 800032a:	2448      	movs	r4, #72	; 0x48
        while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);
 800032c:	4810      	ldr	r0, [pc, #64]	; (8000370 <main+0xa4>)
 800032e:	2180      	movs	r1, #128	; 0x80
 8000330:	f000 ff8a 	bl	8001248 <USART_GetFlagStatus>
 8000334:	2800      	cmp	r0, #0
 8000336:	d0f9      	beq.n	800032c <main+0x60>
        USART_SendData(USART1, *s);
 8000338:	4621      	mov	r1, r4
 800033a:	480d      	ldr	r0, [pc, #52]	; (8000370 <main+0xa4>)
 800033c:	f000 fec0 	bl	80010c0 <USART_SendData>
    USART_Cmd(USART1, ENABLE);
}

void USART1_puts(char* s)
{
    while(*s) {
 8000340:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8000344:	2c00      	cmp	r4, #0
 8000346:	d1f1      	bne.n	800032c <main+0x60>
 8000348:	4d0a      	ldr	r5, [pc, #40]	; (8000374 <main+0xa8>)
 800034a:	244a      	movs	r4, #74	; 0x4a
        while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);
 800034c:	4808      	ldr	r0, [pc, #32]	; (8000370 <main+0xa4>)
 800034e:	2180      	movs	r1, #128	; 0x80
 8000350:	f000 ff7a 	bl	8001248 <USART_GetFlagStatus>
 8000354:	2800      	cmp	r0, #0
 8000356:	d0f9      	beq.n	800034c <main+0x80>
        USART_SendData(USART1, *s);
 8000358:	4621      	mov	r1, r4
 800035a:	4805      	ldr	r0, [pc, #20]	; (8000370 <main+0xa4>)
 800035c:	f000 feb0 	bl	80010c0 <USART_SendData>
    USART_Cmd(USART1, ENABLE);
}

void USART1_puts(char* s)
{
    while(*s) {
 8000360:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8000364:	2c00      	cmp	r4, #0
 8000366:	d1f1      	bne.n	800034c <main+0x80>
 8000368:	e7da      	b.n	8000320 <main+0x54>
 800036a:	bf00      	nop
 800036c:	08001344 	stmdaeq	r0, {r2, r6, r8, r9, ip}
 8000370:	40011000 	andmi	r1, r1, r0
 8000374:	08001354 	stmdaeq	r0, {r2, r4, r6, r8, r9, ip}
 8000378:	40021800 	andmi	r1, r2, r0, lsl #16

0800037c <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000380:	e7fe      	b.n	8000380 <HardFault_Handler>
 8000382:	bf00      	nop

08000384 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000384:	e7fe      	b.n	8000384 <MemManage_Handler>
 8000386:	bf00      	nop

08000388 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000388:	e7fe      	b.n	8000388 <BusFault_Handler>
 800038a:	bf00      	nop

0800038c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800038c:	e7fe      	b.n	800038c <UsageFault_Handler>
 800038e:	bf00      	nop

08000390 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop

08000394 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop

08000398 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop

0800039c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <SystemInit>:
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80003a0:	4b3d      	ldr	r3, [pc, #244]	; (8000498 <SystemInit+0xf8>)

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80003a2:	483e      	ldr	r0, [pc, #248]	; (800049c <SystemInit+0xfc>)
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80003a4:	6819      	ldr	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003a6:	2200      	movs	r2, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80003a8:	f041 0101 	orr.w	r1, r1, #1
 80003ac:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003ae:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80003b0:	6819      	ldr	r1, [r3, #0]
 80003b2:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 80003b6:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80003ba:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80003bc:	6058      	str	r0, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80003be:	6819      	ldr	r1, [r3, #0]
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003c0:	b082      	sub	sp, #8

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80003c2:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80003c6:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80003c8:	60da      	str	r2, [r3, #12]
static void SetSysClock(void)
{
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80003ca:	9200      	str	r2, [sp, #0]
 80003cc:	9201      	str	r2, [sp, #4]
                   (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

#else /* PLL_SOURCE_HSE_BYPASS or PLL_SOURCE_HSE */

  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80003ce:	681a      	ldr	r2, [r3, #0]
 80003d0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80003d4:	601a      	str	r2, [r3, #0]
  RCC->CR |= ((uint32_t)RCC_CR_HSEBYP);
#endif   /* PLL_SOURCE_HSE_BYPASS */
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80003d6:	461a      	mov	r2, r3
 80003d8:	e003      	b.n	80003e2 <SystemInit+0x42>
    StartUpCounter++;
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80003da:	9b00      	ldr	r3, [sp, #0]
 80003dc:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80003e0:	d009      	beq.n	80003f6 <SystemInit+0x56>
  RCC->CR |= ((uint32_t)RCC_CR_HSEBYP);
#endif   /* PLL_SOURCE_HSE_BYPASS */
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80003e2:	6813      	ldr	r3, [r2, #0]
 80003e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003e8:	9301      	str	r3, [sp, #4]
    StartUpCounter++;
 80003ea:	9b00      	ldr	r3, [sp, #0]
 80003ec:	3301      	adds	r3, #1
 80003ee:	9300      	str	r3, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80003f0:	9b01      	ldr	r3, [sp, #4]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d0f1      	beq.n	80003da <SystemInit+0x3a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80003f6:	4b28      	ldr	r3, [pc, #160]	; (8000498 <SystemInit+0xf8>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 80003fe:	bf18      	it	ne
 8000400:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000402:	9301      	str	r3, [sp, #4]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000404:	9b01      	ldr	r3, [sp, #4]
 8000406:	2b01      	cmp	r3, #1
 8000408:	d042      	beq.n	8000490 <SystemInit+0xf0>
         configuration. User can add here some code to deal with this error */
  }
#endif /*PLL_SOURCE_HSI*/
  
      /* Select regulator voltage output Scale 1 mode, System frequency up to 180 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800040a:	4a23      	ldr	r2, [pc, #140]	; (8000498 <SystemInit+0xf8>)
    PWR->CR |= PWR_CR_VOS;
 800040c:	4b24      	ldr	r3, [pc, #144]	; (80004a0 <SystemInit+0x100>)
         configuration. User can add here some code to deal with this error */
  }
#endif /*PLL_SOURCE_HSI*/
  
      /* Select regulator voltage output Scale 1 mode, System frequency up to 180 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800040e:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000410:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000414:	6411      	str	r1, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000416:	6819      	ldr	r1, [r3, #0]
 8000418:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 800041c:	6019      	str	r1, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800041e:	6893      	ldr	r3, [r2, #8]
 8000420:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000422:	6893      	ldr	r3, [r2, #8]
 8000424:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000428:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800042a:	6893      	ldr	r3, [r2, #8]
 800042c:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000430:	6093      	str	r3, [r2, #8]

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000432:	6813      	ldr	r3, [r2, #0]
 8000434:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000438:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800043a:	6813      	ldr	r3, [r2, #0]
 800043c:	019b      	lsls	r3, r3, #6
 800043e:	d5fc      	bpl.n	800043a <SystemInit+0x9a>
    {
    }

    /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
    PWR->CR |= PWR_CR_ODEN;
 8000440:	4917      	ldr	r1, [pc, #92]	; (80004a0 <SystemInit+0x100>)
 8000442:	680b      	ldr	r3, [r1, #0]
 8000444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000448:	600b      	str	r3, [r1, #0]
    while((PWR->CSR & PWR_CSR_ODRDY) == 0)
 800044a:	684b      	ldr	r3, [r1, #4]
 800044c:	4a14      	ldr	r2, [pc, #80]	; (80004a0 <SystemInit+0x100>)
 800044e:	03d8      	lsls	r0, r3, #15
 8000450:	d5fb      	bpl.n	800044a <SystemInit+0xaa>
    {
    }
    PWR->CR |= PWR_CR_ODSWEN;
 8000452:	6813      	ldr	r3, [r2, #0]
 8000454:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000458:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
 800045a:	6853      	ldr	r3, [r2, #4]
 800045c:	039b      	lsls	r3, r3, #14
 800045e:	d5fc      	bpl.n	800045a <SystemInit+0xba>
    {
    } 
     
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000460:	4b10      	ldr	r3, [pc, #64]	; (80004a4 <SystemInit+0x104>)

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000462:	4a0d      	ldr	r2, [pc, #52]	; (8000498 <SystemInit+0xf8>)
    while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
    {
    } 
     
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000464:	f240 7105 	movw	r1, #1797	; 0x705
 8000468:	6019      	str	r1, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800046a:	6893      	ldr	r3, [r2, #8]
 800046c:	f023 0303 	bic.w	r3, r3, #3
 8000470:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000472:	6893      	ldr	r3, [r2, #8]
 8000474:	f043 0302 	orr.w	r3, r3, #2
 8000478:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800047a:	6893      	ldr	r3, [r2, #8]
 800047c:	f003 030c 	and.w	r3, r3, #12
 8000480:	2b08      	cmp	r3, #8
 8000482:	d1fa      	bne.n	800047a <SystemInit+0xda>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000484:	4b08      	ldr	r3, [pc, #32]	; (80004a8 <SystemInit+0x108>)
 8000486:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800048a:	609a      	str	r2, [r3, #8]
#endif
}
 800048c:	b002      	add	sp, #8
 800048e:	4770      	bx	lr
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000490:	4b01      	ldr	r3, [pc, #4]	; (8000498 <SystemInit+0xf8>)
 8000492:	4a06      	ldr	r2, [pc, #24]	; (80004ac <SystemInit+0x10c>)
 8000494:	605a      	str	r2, [r3, #4]
 8000496:	e7b8      	b.n	800040a <SystemInit+0x6a>
 8000498:	40023800 	andmi	r3, r2, r0, lsl #16
 800049c:	24003010 	strcs	r3, [r0], #-16
 80004a0:	40007000 	andmi	r7, r0, r0
 80004a4:	40023c00 	andmi	r3, r2, r0, lsl #24
 80004a8:	e000ed00 	and	lr, r0, r0, lsl #26
 80004ac:	07405a08 	strbeq	r5, [r0, -r8, lsl #20]

080004b0 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80004b0:	4b16      	ldr	r3, [pc, #88]	; (800050c <SystemCoreClockUpdate+0x5c>)
 80004b2:	689a      	ldr	r2, [r3, #8]
 80004b4:	f002 020c 	and.w	r2, r2, #12

  switch (tmp)
 80004b8:	2a04      	cmp	r2, #4
 80004ba:	d024      	beq.n	8000506 <SystemCoreClockUpdate+0x56>
 80004bc:	2a08      	cmp	r2, #8
 80004be:	d00a      	beq.n	80004d6 <SystemCoreClockUpdate+0x26>
 80004c0:	4a13      	ldr	r2, [pc, #76]	; (8000510 <SystemCoreClockUpdate+0x60>)
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80004c2:	4b12      	ldr	r3, [pc, #72]	; (800050c <SystemCoreClockUpdate+0x5c>)
 80004c4:	4813      	ldr	r0, [pc, #76]	; (8000514 <SystemCoreClockUpdate+0x64>)
 80004c6:	6899      	ldr	r1, [r3, #8]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80004c8:	4b13      	ldr	r3, [pc, #76]	; (8000518 <SystemCoreClockUpdate+0x68>)
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80004ca:	f3c1 1103 	ubfx	r1, r1, #4, #4
 80004ce:	5c41      	ldrb	r1, [r0, r1]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80004d0:	40ca      	lsrs	r2, r1
 80004d2:	601a      	str	r2, [r3, #0]
 80004d4:	4770      	bx	lr
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80004d6:	6858      	ldr	r0, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80004d8:	6859      	ldr	r1, [r3, #4]
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80004da:	685b      	ldr	r3, [r3, #4]
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
 80004dc:	0242      	lsls	r2, r0, #9
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80004de:	bf4c      	ite	mi
 80004e0:	4a0e      	ldrmi	r2, [pc, #56]	; (800051c <SystemCoreClockUpdate+0x6c>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80004e2:	4a0b      	ldrpl	r2, [pc, #44]	; (8000510 <SystemCoreClockUpdate+0x60>)

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80004e4:	f001 013f 	and.w	r1, r1, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80004e8:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80004ec:	fbb2 f2f1 	udiv	r2, r2, r1
 80004f0:	fb02 f203 	mul.w	r2, r2, r3
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80004f4:	4b05      	ldr	r3, [pc, #20]	; (800050c <SystemCoreClockUpdate+0x5c>)
 80004f6:	685b      	ldr	r3, [r3, #4]
 80004f8:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80004fc:	3301      	adds	r3, #1
 80004fe:	005b      	lsls	r3, r3, #1
      SystemCoreClock = pllvco/pllp;
 8000500:	fbb2 f2f3 	udiv	r2, r2, r3
      break;
 8000504:	e7dd      	b.n	80004c2 <SystemCoreClockUpdate+0x12>
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
      break;
 8000506:	4a05      	ldr	r2, [pc, #20]	; (800051c <SystemCoreClockUpdate+0x6c>)
 8000508:	e7db      	b.n	80004c2 <SystemCoreClockUpdate+0x12>
 800050a:	bf00      	nop
 800050c:	40023800 	andmi	r3, r2, r0, lsl #16
 8000510:	00f42400 	rscseq	r2, r4, r0, lsl #8
 8000514:	20000000 	andcs	r0, r0, r0
 8000518:	20000010 	andcs	r0, r0, r0, lsl r0
 800051c:	007a1200 	rsbseq	r1, sl, r0, lsl #4

08000520 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000520:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000522:	f000 b804 	b.w	800052e <LoopCopyDataInit>

08000526 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000526:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <LoopFillZerobss+0x12>)
  ldr  r3, [r3, r1]
 8000528:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800052a:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800052c:	3104      	adds	r1, #4

0800052e <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800052e:	480b      	ldr	r0, [pc, #44]	; (800055c <LoopFillZerobss+0x16>)
  ldr  r3, =_edata
 8000530:	4b0b      	ldr	r3, [pc, #44]	; (8000560 <LoopFillZerobss+0x1a>)
  adds  r2, r0, r1
 8000532:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000534:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000536:	f4ff aff6 	bcc.w	8000526 <CopyDataInit>
  ldr  r2, =_sbss
 800053a:	4a0a      	ldr	r2, [pc, #40]	; (8000564 <LoopFillZerobss+0x1e>)
  b  LoopFillZerobss
 800053c:	f000 b803 	b.w	8000546 <LoopFillZerobss>

08000540 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000540:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000542:	f842 3b04 	str.w	r3, [r2], #4

08000546 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000546:	4b08      	ldr	r3, [pc, #32]	; (8000568 <LoopFillZerobss+0x22>)
  cmp  r2, r3
 8000548:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800054a:	f4ff aff9 	bcc.w	8000540 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800054e:	f7ff ff27 	bl	80003a0 <SystemInit>
/* Call the application's entry point.*/
  bl  main
 8000552:	f7ff febb 	bl	80002cc <main>
  bx  lr    
 8000556:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8000558:	08001398 	stmdaeq	r0, {r3, r4, r7, r8, r9, ip}
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800055c:	20000000 	andcs	r0, r0, r0
  ldr  r3, =_edata
 8000560:	20000024 	andcs	r0, r0, r4, lsr #32
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8000564:	20000024 	andcs	r0, r0, r4, lsr #32
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000568:	20000024 	andcs	r0, r0, r4, lsr #32

0800056c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800056c:	f7ff bffe 	b.w	800056c <ADC_IRQHandler>

08000570 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000570:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000574:	4b02      	ldr	r3, [pc, #8]	; (8000580 <NVIC_PriorityGroupConfig+0x10>)
 8000576:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 800057a:	60d8      	str	r0, [r3, #12]
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	e000ed00 	and	lr, r0, r0, lsl #26

08000584 <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000584:	78c3      	ldrb	r3, [r0, #3]
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000586:	b4f0      	push	{r4, r5, r6, r7}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000588:	b963      	cbnz	r3, 80005a4 <NVIC_Init+0x20>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800058a:	7803      	ldrb	r3, [r0, #0]
 800058c:	4a19      	ldr	r2, [pc, #100]	; (80005f4 <NVIC_Init+0x70>)
 800058e:	0959      	lsrs	r1, r3, #5
 8000590:	3120      	adds	r1, #32
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000592:	f003 031f 	and.w	r3, r3, #31
 8000596:	2001      	movs	r0, #1
 8000598:	fa00 f303 	lsl.w	r3, r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800059c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80005a0:	bcf0      	pop	{r4, r5, r6, r7}
 80005a2:	4770      	bx	lr
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80005a4:	4b14      	ldr	r3, [pc, #80]	; (80005f8 <NVIC_Init+0x74>)
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80005a6:	7847      	ldrb	r7, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80005a8:	68da      	ldr	r2, [r3, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80005aa:	7885      	ldrb	r5, [r0, #2]
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80005ac:	7803      	ldrb	r3, [r0, #0]
 80005ae:	4911      	ldr	r1, [pc, #68]	; (80005f4 <NVIC_Init+0x70>)
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80005b0:	43d2      	mvns	r2, r2
 80005b2:	f3c2 2202 	ubfx	r2, r2, #8, #3
    tmppre = (0x4 - tmppriority);
 80005b6:	f1c2 0404 	rsb	r4, r2, #4
    tmpsub = tmpsub >> tmppriority;
 80005ba:	260f      	movs	r6, #15

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80005bc:	b2e4      	uxtb	r4, r4
 80005be:	fa07 f404 	lsl.w	r4, r7, r4
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 80005c2:	fa46 f202 	asr.w	r2, r6, r2

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80005c6:	b2e4      	uxtb	r4, r4
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80005c8:	402a      	ands	r2, r5
 80005ca:	4322      	orrs	r2, r4
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80005cc:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80005d0:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
 80005d4:	0112      	lsls	r2, r2, #4
 80005d6:	b2d2      	uxtb	r2, r2
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80005d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80005dc:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80005de:	2001      	movs	r0, #1
 80005e0:	f003 021f 	and.w	r2, r3, #31
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80005e4:	095b      	lsrs	r3, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80005e6:	fa00 f202 	lsl.w	r2, r0, r2
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80005ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80005ee:	bcf0      	pop	{r4, r5, r6, r7}
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	e000e100 	and	lr, r0, r0, lsl #2
 80005f8:	e000ed00 	and	lr, r0, r0, lsl #26

080005fc <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 80005fc:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 8000600:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8000604:	4b01      	ldr	r3, [pc, #4]	; (800060c <NVIC_SetVectorTable+0x10>)
 8000606:	4308      	orrs	r0, r1
 8000608:	6098      	str	r0, [r3, #8]
 800060a:	4770      	bx	lr
 800060c:	e000ed00 	and	lr, r0, r0, lsl #26

08000610 <NVIC_SystemLPConfig>:
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 8000610:	4b04      	ldr	r3, [pc, #16]	; (8000624 <NVIC_SystemLPConfig+0x14>)
 8000612:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8000614:	b919      	cbnz	r1, 800061e <NVIC_SystemLPConfig+0xe>
  {
    SCB->SCR |= LowPowerMode;
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8000616:	ea22 0000 	bic.w	r0, r2, r0
 800061a:	6118      	str	r0, [r3, #16]
 800061c:	4770      	bx	lr
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 800061e:	4310      	orrs	r0, r2
 8000620:	6118      	str	r0, [r3, #16]
 8000622:	4770      	bx	lr
 8000624:	e000ed00 	and	lr, r0, r0, lsl #26

08000628 <SysTick_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8000628:	4b04      	ldr	r3, [pc, #16]	; (800063c <SysTick_CLKSourceConfig+0x14>)
 800062a:	681a      	ldr	r2, [r3, #0]
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 800062c:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 800062e:	bf0c      	ite	eq
 8000630:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8000634:	f022 0204 	bicne.w	r2, r2, #4
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	4770      	bx	lr
 800063c:	e000e010 	and	lr, r0, r0, lsl r0

08000640 <GPIO_DeInit>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices.  
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8000640:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 8000642:	4b4b      	ldr	r3, [pc, #300]	; (8000770 <GPIO_DeInit+0x130>)
 8000644:	4298      	cmp	r0, r3
 8000646:	d02a      	beq.n	800069e <GPIO_DeInit+0x5e>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
  }
  else if (GPIOx == GPIOB)
 8000648:	4b4a      	ldr	r3, [pc, #296]	; (8000774 <GPIO_DeInit+0x134>)
 800064a:	4298      	cmp	r0, r3
 800064c:	d031      	beq.n	80006b2 <GPIO_DeInit+0x72>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
  }
  else if (GPIOx == GPIOC)
 800064e:	4b4a      	ldr	r3, [pc, #296]	; (8000778 <GPIO_DeInit+0x138>)
 8000650:	4298      	cmp	r0, r3
 8000652:	d038      	beq.n	80006c6 <GPIO_DeInit+0x86>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
  }
  else if (GPIOx == GPIOD)
 8000654:	4b49      	ldr	r3, [pc, #292]	; (800077c <GPIO_DeInit+0x13c>)
 8000656:	4298      	cmp	r0, r3
 8000658:	d03f      	beq.n	80006da <GPIO_DeInit+0x9a>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
  }
  else if (GPIOx == GPIOE)
 800065a:	4b49      	ldr	r3, [pc, #292]	; (8000780 <GPIO_DeInit+0x140>)
 800065c:	4298      	cmp	r0, r3
 800065e:	d046      	beq.n	80006ee <GPIO_DeInit+0xae>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
  }
  else if (GPIOx == GPIOF)
 8000660:	4b48      	ldr	r3, [pc, #288]	; (8000784 <GPIO_DeInit+0x144>)
 8000662:	4298      	cmp	r0, r3
 8000664:	d04d      	beq.n	8000702 <GPIO_DeInit+0xc2>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
  }
  else if (GPIOx == GPIOG)
 8000666:	4b48      	ldr	r3, [pc, #288]	; (8000788 <GPIO_DeInit+0x148>)
 8000668:	4298      	cmp	r0, r3
 800066a:	d054      	beq.n	8000716 <GPIO_DeInit+0xd6>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
  }
  else if (GPIOx == GPIOH)
 800066c:	4b47      	ldr	r3, [pc, #284]	; (800078c <GPIO_DeInit+0x14c>)
 800066e:	4298      	cmp	r0, r3
 8000670:	d05b      	beq.n	800072a <GPIO_DeInit+0xea>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
  }

  else if (GPIOx == GPIOI)
 8000672:	4b47      	ldr	r3, [pc, #284]	; (8000790 <GPIO_DeInit+0x150>)
 8000674:	4298      	cmp	r0, r3
 8000676:	d062      	beq.n	800073e <GPIO_DeInit+0xfe>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
  }
  else if (GPIOx == GPIOJ)
 8000678:	4b46      	ldr	r3, [pc, #280]	; (8000794 <GPIO_DeInit+0x154>)
 800067a:	4298      	cmp	r0, r3
 800067c:	d06b      	beq.n	8000756 <GPIO_DeInit+0x116>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
  }
  else
  {
    if (GPIOx == GPIOK)
 800067e:	4b46      	ldr	r3, [pc, #280]	; (8000798 <GPIO_DeInit+0x158>)
 8000680:	4298      	cmp	r0, r3
 8000682:	d000      	beq.n	8000686 <GPIO_DeInit+0x46>
 8000684:	bd08      	pop	{r3, pc}
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
 8000686:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800068a:	2101      	movs	r1, #1
 800068c:	f000 fb22 	bl	8000cd4 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
 8000690:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000694:	2100      	movs	r1, #0
    }
  }
}
 8000696:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (GPIOx == GPIOK)
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
 800069a:	f000 bb1b 	b.w	8000cd4 <RCC_AHB1PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800069e:	2001      	movs	r0, #1
 80006a0:	4601      	mov	r1, r0
 80006a2:	f000 fb17 	bl	8000cd4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 80006a6:	2001      	movs	r0, #1
 80006a8:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 80006aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 80006ae:	f000 bb11 	b.w	8000cd4 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOB)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 80006b2:	2002      	movs	r0, #2
 80006b4:	2101      	movs	r1, #1
 80006b6:	f000 fb0d 	bl	8000cd4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 80006ba:	2002      	movs	r0, #2
 80006bc:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 80006be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
  }
  else if (GPIOx == GPIOB)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 80006c2:	f000 bb07 	b.w	8000cd4 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOC)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 80006c6:	2004      	movs	r0, #4
 80006c8:	2101      	movs	r1, #1
 80006ca:	f000 fb03 	bl	8000cd4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 80006ce:	2004      	movs	r0, #4
 80006d0:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 80006d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
  }
  else if (GPIOx == GPIOC)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 80006d6:	f000 bafd 	b.w	8000cd4 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOD)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 80006da:	2008      	movs	r0, #8
 80006dc:	2101      	movs	r1, #1
 80006de:	f000 faf9 	bl	8000cd4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 80006e2:	2008      	movs	r0, #8
 80006e4:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 80006e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
  }
  else if (GPIOx == GPIOD)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 80006ea:	f000 baf3 	b.w	8000cd4 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOE)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 80006ee:	2010      	movs	r0, #16
 80006f0:	2101      	movs	r1, #1
 80006f2:	f000 faef 	bl	8000cd4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 80006f6:	2010      	movs	r0, #16
 80006f8:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 80006fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
  }
  else if (GPIOx == GPIOE)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 80006fe:	f000 bae9 	b.w	8000cd4 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOF)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 8000702:	2020      	movs	r0, #32
 8000704:	2101      	movs	r1, #1
 8000706:	f000 fae5 	bl	8000cd4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 800070a:	2020      	movs	r0, #32
 800070c:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 800070e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
  }
  else if (GPIOx == GPIOF)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 8000712:	f000 badf 	b.w	8000cd4 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOG)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8000716:	2040      	movs	r0, #64	; 0x40
 8000718:	2101      	movs	r1, #1
 800071a:	f000 fadb 	bl	8000cd4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 800071e:	2040      	movs	r0, #64	; 0x40
 8000720:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 8000722:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
  }
  else if (GPIOx == GPIOG)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 8000726:	f000 bad5 	b.w	8000cd4 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOH)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 800072a:	2080      	movs	r0, #128	; 0x80
 800072c:	2101      	movs	r1, #1
 800072e:	f000 fad1 	bl	8000cd4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 8000732:	2080      	movs	r0, #128	; 0x80
 8000734:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 8000736:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
  }
  else if (GPIOx == GPIOH)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 800073a:	f000 bacb 	b.w	8000cd4 <RCC_AHB1PeriphResetCmd>
  }

  else if (GPIOx == GPIOI)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 800073e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000742:	2101      	movs	r1, #1
 8000744:	f000 fac6 	bl	8000cd4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 8000748:	f44f 7080 	mov.w	r0, #256	; 0x100
 800074c:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 800074e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  }

  else if (GPIOx == GPIOI)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 8000752:	f000 babf 	b.w	8000cd4 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOJ)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
 8000756:	f44f 7000 	mov.w	r0, #512	; 0x200
 800075a:	2101      	movs	r1, #1
 800075c:	f000 faba 	bl	8000cd4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
 8000760:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000764:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 8000766:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
  }
  else if (GPIOx == GPIOJ)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
 800076a:	f000 bab3 	b.w	8000cd4 <RCC_AHB1PeriphResetCmd>
 800076e:	bf00      	nop
 8000770:	40020000 	andmi	r0, r2, r0
 8000774:	40020400 	andmi	r0, r2, r0, lsl #8
 8000778:	40020800 	andmi	r0, r2, r0, lsl #16
 800077c:	40020c00 	andmi	r0, r2, r0, lsl #24
 8000780:	40021000 	andmi	r1, r2, r0
 8000784:	40021400 	andmi	r1, r2, r0, lsl #8
 8000788:	40021800 	andmi	r1, r2, r0, lsl #16
 800078c:	40021c00 	andmi	r1, r2, r0, lsl #24
 8000790:	40022000 	andmi	r2, r2, r0
 8000794:	40022400 	andmi	r2, r2, r0, lsl #8
 8000798:	40022800 	andmi	r2, r2, r0, lsl #16

0800079c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800079c:	2200      	movs	r2, #0
 800079e:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80007a2:	4613      	mov	r3, r2
 80007a4:	680e      	ldr	r6, [r1, #0]
  {
    pos = ((uint32_t)0x01) << pinpos;
 80007a6:	2701      	movs	r7, #1
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80007a8:	f04f 0803 	mov.w	r8, #3
 80007ac:	e004      	b.n	80007b8 <GPIO_Init+0x1c>
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80007ae:	3301      	adds	r3, #1
 80007b0:	2b10      	cmp	r3, #16
 80007b2:	f102 0202 	add.w	r2, r2, #2
 80007b6:	d02c      	beq.n	8000812 <GPIO_Init+0x76>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80007b8:	fa07 f403 	lsl.w	r4, r7, r3
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80007bc:	ea04 0506 	and.w	r5, r4, r6

    if (currentpin == pos)
 80007c0:	42a5      	cmp	r5, r4
 80007c2:	d1f4      	bne.n	80007ae <GPIO_Init+0x12>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80007c4:	f8d0 9000 	ldr.w	r9, [r0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80007c8:	f891 c004 	ldrb.w	ip, [r1, #4]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80007cc:	fa08 f402 	lsl.w	r4, r8, r2
 80007d0:	43e4      	mvns	r4, r4
 80007d2:	ea04 0909 	and.w	r9, r4, r9
 80007d6:	f8c0 9000 	str.w	r9, [r0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80007da:	f8d0 9000 	ldr.w	r9, [r0]
 80007de:	fa0c fa02 	lsl.w	sl, ip, r2

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80007e2:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80007e6:	ea4a 0909 	orr.w	r9, sl, r9

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80007ea:	f1bc 0f01 	cmp.w	ip, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80007ee:	f8c0 9000 	str.w	r9, [r0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80007f2:	d911      	bls.n	8000818 <GPIO_Init+0x7c>
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80007f4:	68c5      	ldr	r5, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80007f6:	f891 c007 	ldrb.w	ip, [r1, #7]
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80007fa:	402c      	ands	r4, r5
 80007fc:	60c4      	str	r4, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80007fe:	68c5      	ldr	r5, [r0, #12]
 8000800:	fa0c f402 	lsl.w	r4, ip, r2
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000804:	3301      	adds	r3, #1
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000806:	432c      	orrs	r4, r5
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000808:	2b10      	cmp	r3, #16
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800080a:	60c4      	str	r4, [r0, #12]
 800080c:	f102 0202 	add.w	r2, r2, #2
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000810:	d1d2      	bne.n	80007b8 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8000812:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8000816:	4770      	bx	lr
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000818:	f8d0 a008 	ldr.w	sl, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800081c:	f891 9005 	ldrb.w	r9, [r1, #5]
        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000820:	f891 c006 	ldrb.w	ip, [r1, #6]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000824:	ea04 0a0a 	and.w	sl, r4, sl
 8000828:	f8c0 a008 	str.w	sl, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800082c:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8000830:	fa09 f902 	lsl.w	r9, r9, r2
 8000834:	ea49 090a 	orr.w	r9, r9, sl
 8000838:	f8c0 9008 	str.w	r9, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800083c:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8000840:	ea29 0505 	bic.w	r5, r9, r5
 8000844:	6045      	str	r5, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000846:	6845      	ldr	r5, [r0, #4]
 8000848:	fa0c fc03 	lsl.w	ip, ip, r3
 800084c:	fa1f fc8c 	uxth.w	ip, ip
 8000850:	ea4c 0505 	orr.w	r5, ip, r5
 8000854:	6045      	str	r5, [r0, #4]
 8000856:	e7cd      	b.n	80007f4 <GPIO_Init+0x58>

08000858 <GPIO_StructInit>:
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8000858:	2300      	movs	r3, #0
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 800085a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800085e:	6002      	str	r2, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8000860:	7103      	strb	r3, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8000862:	7143      	strb	r3, [r0, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8000864:	7183      	strb	r3, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000866:	71c3      	strb	r3, [r0, #7]
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop

0800086c <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800086c:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0x00010000;
 800086e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000872:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 8000874:	9b01      	ldr	r3, [sp, #4]
 8000876:	430b      	orrs	r3, r1
 8000878:	9301      	str	r3, [sp, #4]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800087a:	9b01      	ldr	r3, [sp, #4]
 800087c:	61c3      	str	r3, [r0, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 800087e:	61c1      	str	r1, [r0, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8000880:	9b01      	ldr	r3, [sp, #4]
 8000882:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8000884:	69c3      	ldr	r3, [r0, #28]
 8000886:	9301      	str	r3, [sp, #4]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8000888:	69c3      	ldr	r3, [r0, #28]
 800088a:	9301      	str	r3, [sp, #4]
}
 800088c:	b002      	add	sp, #8
 800088e:	4770      	bx	lr

08000890 <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000890:	6903      	ldr	r3, [r0, #16]
 8000892:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 8000894:	bf0c      	ite	eq
 8000896:	2000      	moveq	r0, #0
 8000898:	2001      	movne	r0, #1
 800089a:	4770      	bx	lr

0800089c <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 800089c:	6900      	ldr	r0, [r0, #16]
}
 800089e:	b280      	uxth	r0, r0
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop

080008a4 <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
 80008a4:	6943      	ldr	r3, [r0, #20]
 80008a6:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 80008a8:	bf0c      	ite	eq
 80008aa:	2000      	moveq	r0, #0
 80008ac:	2001      	movne	r0, #1
 80008ae:	4770      	bx	lr

080008b0 <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 80008b0:	6940      	ldr	r0, [r0, #20]
}
 80008b2:	b280      	uxth	r0, r0
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop

080008b8 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 80008b8:	8301      	strh	r1, [r0, #24]
 80008ba:	4770      	bx	lr

080008bc <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 80008bc:	8341      	strh	r1, [r0, #26]
 80008be:	4770      	bx	lr

080008c0 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 80008c0:	b90a      	cbnz	r2, 80008c6 <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 80008c2:	8341      	strh	r1, [r0, #26]
 80008c4:	4770      	bx	lr
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
  {
    GPIOx->BSRRL = GPIO_Pin;
 80008c6:	8301      	strh	r1, [r0, #24]
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop

080008cc <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 80008cc:	6141      	str	r1, [r0, #20]
 80008ce:	4770      	bx	lr

080008d0 <GPIO_ToggleBits>:
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 80008d0:	6943      	ldr	r3, [r0, #20]
 80008d2:	4059      	eors	r1, r3
 80008d4:	6141      	str	r1, [r0, #20]
 80008d6:	4770      	bx	lr

080008d8 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80008d8:	08cb      	lsrs	r3, r1, #3
 80008da:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80008de:	f001 0107 	and.w	r1, r1, #7
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80008e2:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80008e4:	0089      	lsls	r1, r1, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80008e6:	6a04      	ldr	r4, [r0, #32]
 80008e8:	230f      	movs	r3, #15
 80008ea:	408b      	lsls	r3, r1
 80008ec:	ea24 0303 	bic.w	r3, r4, r3
 80008f0:	6203      	str	r3, [r0, #32]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80008f2:	6a03      	ldr	r3, [r0, #32]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
}
 80008f4:	f85d 4b04 	ldr.w	r4, [sp], #4
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80008f8:	408a      	lsls	r2, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80008fa:	4313      	orrs	r3, r2
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80008fc:	6203      	str	r3, [r0, #32]
}
 80008fe:	4770      	bx	lr

08000900 <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <RCC_DeInit+0x40>)

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;

  /* Reset PLLSAICFGR register, only available for STM32F42/43xxx devices */
  RCC->PLLSAICFGR = 0x24003000;
 8000902:	4810      	ldr	r0, [pc, #64]	; (8000944 <RCC_DeInit+0x44>)
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000904:	6819      	ldr	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000906:	2200      	movs	r2, #0
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000908:	f041 0101 	orr.w	r1, r1, #1
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 800090c:	b430      	push	{r4, r5}
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800090e:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000910:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42/43xxx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8000912:	6819      	ldr	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000914:	4d0c      	ldr	r5, [pc, #48]	; (8000948 <RCC_DeInit+0x48>)

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 8000916:	4c0d      	ldr	r4, [pc, #52]	; (800094c <RCC_DeInit+0x4c>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42/43xxx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8000918:	f021 51a8 	bic.w	r1, r1, #352321536	; 0x15000000
 800091c:	f421 2110 	bic.w	r1, r1, #589824	; 0x90000
 8000920:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000922:	605d      	str	r5, [r3, #4]

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 8000924:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84

  /* Reset PLLSAICFGR register, only available for STM32F42/43xxx devices */
  RCC->PLLSAICFGR = 0x24003000;
 8000928:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
 
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800092c:	6819      	ldr	r1, [r3, #0]
 800092e:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8000932:	6019      	str	r1, [r3, #0]
  RCC->CIR = 0x00000000;

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx devices */
  RCC->DCKCFGR = 0x00000000; 

}
 8000934:	bc30      	pop	{r4, r5}
 
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000936:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx devices */
  RCC->DCKCFGR = 0x00000000; 
 8000938:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

}
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	40023800 	andmi	r3, r2, r0, lsl #16
 8000944:	24003000 	strcs	r3, [r0], #-0
 8000948:	24003010 	strcs	r3, [r0], #-16
 800094c:	20003000 	andcs	r3, r0, r0

08000950 <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 8000950:	4b02      	ldr	r3, [pc, #8]	; (800095c <RCC_HSEConfig+0xc>)
 8000952:	2200      	movs	r2, #0
 8000954:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 8000956:	7018      	strb	r0, [r3, #0]
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	40023802 	andmi	r3, r2, r2, lsl #16

08000960 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8000960:	b082      	sub	sp, #8
  __IO uint32_t startupcounter = 0;
 8000962:	2300      	movs	r3, #0

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8000964:	4a0b      	ldr	r2, [pc, #44]	; (8000994 <RCC_WaitForHSEStartUp+0x34>)
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
  __IO uint32_t startupcounter = 0;
 8000966:	9301      	str	r3, [sp, #4]

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8000968:	6813      	ldr	r3, [r2, #0]
    statusreg = RCC->CSR;
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 800096a:	039b      	lsls	r3, r3, #14
 800096c:	d40c      	bmi.n	8000988 <RCC_WaitForHSEStartUp+0x28>
  FlagStatus hsestatus = RESET;
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    startupcounter++;
 800096e:	9b01      	ldr	r3, [sp, #4]
 8000970:	3301      	adds	r3, #1
 8000972:	9301      	str	r3, [sp, #4]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 8000974:	9b01      	ldr	r3, [sp, #4]
 8000976:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800097a:	d1f5      	bne.n	8000968 <RCC_WaitForHSEStartUp+0x8>

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 800097c:	4b05      	ldr	r3, [pc, #20]	; (8000994 <RCC_WaitForHSEStartUp+0x34>)
 800097e:	6818      	ldr	r0, [r3, #0]
  }
  else
  {
    status = ERROR;
  }
  return (status);
 8000980:	f3c0 4040 	ubfx	r0, r0, #17, #1
}
 8000984:	b002      	add	sp, #8
 8000986:	4770      	bx	lr
  FlagStatus hsestatus = RESET;
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    startupcounter++;
 8000988:	9b01      	ldr	r3, [sp, #4]
 800098a:	3301      	adds	r3, #1
 800098c:	9301      	str	r3, [sp, #4]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 800098e:	9b01      	ldr	r3, [sp, #4]
 8000990:	e7f4      	b.n	800097c <RCC_WaitForHSEStartUp+0x1c>
 8000992:	bf00      	nop
 8000994:	40023800 	andmi	r3, r2, r0, lsl #16

08000998 <RCC_AdjustHSICalibrationValue>:
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 8000998:	4b03      	ldr	r3, [pc, #12]	; (80009a8 <RCC_AdjustHSICalibrationValue+0x10>)
 800099a:	681a      	ldr	r2, [r3, #0]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 800099c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 80009a0:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3

  /* Store the new value */
  RCC->CR = tmpreg;
 80009a4:	6018      	str	r0, [r3, #0]
 80009a6:	4770      	bx	lr
 80009a8:	40023800 	andmi	r3, r2, r0, lsl #16

080009ac <RCC_HSICmd>:
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 80009ac:	4b01      	ldr	r3, [pc, #4]	; (80009b4 <RCC_HSICmd+0x8>)
 80009ae:	6018      	str	r0, [r3, #0]
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	42470000 	submi	r0, r7, #0

080009b8 <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <RCC_LSEConfig+0x1c>)
 80009ba:	2200      	movs	r2, #0

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 80009bc:	2801      	cmp	r0, #1
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80009be:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80009c0:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 80009c2:	d005      	beq.n	80009d0 <RCC_LSEConfig+0x18>
 80009c4:	2804      	cmp	r0, #4
 80009c6:	d102      	bne.n	80009ce <RCC_LSEConfig+0x16>
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
      break;
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 80009c8:	2205      	movs	r2, #5
 80009ca:	701a      	strb	r2, [r3, #0]
 80009cc:	4770      	bx	lr
 80009ce:	4770      	bx	lr
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 80009d0:	7018      	strb	r0, [r3, #0]
      break;
 80009d2:	4770      	bx	lr
 80009d4:	40023870 	andmi	r3, r2, r0, ror r8

080009d8 <RCC_LSICmd>:
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 80009d8:	4b01      	ldr	r3, [pc, #4]	; (80009e0 <RCC_LSICmd+0x8>)
 80009da:	6018      	str	r0, [r3, #0]
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	42470e80 	submi	r0, r7, #128, 28	; 0x800

080009e4 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 80009e4:	b430      	push	{r4, r5}
 80009e6:	9c02      	ldr	r4, [sp, #8]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 80009e8:	4d06      	ldr	r5, [pc, #24]	; (8000a04 <RCC_PLLConfig+0x20>)
 80009ea:	ea40 6004 	orr.w	r0, r0, r4, lsl #24
 80009ee:	085b      	lsrs	r3, r3, #1
 80009f0:	4301      	orrs	r1, r0
 80009f2:	3b01      	subs	r3, #1
 80009f4:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
 80009f8:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80009fc:	606b      	str	r3, [r5, #4]
                 (PLLQ << 24);
}
 80009fe:	bc30      	pop	{r4, r5}
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	40023800 	andmi	r3, r2, r0, lsl #16

08000a08 <RCC_PLLCmd>:
  */
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8000a08:	4b01      	ldr	r3, [pc, #4]	; (8000a10 <RCC_PLLCmd+0x8>)
 8000a0a:	6018      	str	r0, [r3, #0]
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	42470060 	submi	r0, r7, #96	; 0x60

08000a14 <RCC_PLLI2SConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SQ_VALUE(PLLI2SQ));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SQ << 24) | (PLLI2SR << 28);
 8000a14:	0712      	lsls	r2, r2, #28
 8000a16:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8000a1a:	4b03      	ldr	r3, [pc, #12]	; (8000a28 <RCC_PLLI2SConfig+0x14>)
 8000a1c:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
 8000a20:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	40023800 	andmi	r3, r2, r0, lsl #16

08000a2c <RCC_PLLI2SCmd>:
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 8000a2c:	4b01      	ldr	r3, [pc, #4]	; (8000a34 <RCC_PLLI2SCmd+0x8>)
 8000a2e:	6018      	str	r0, [r3, #0]
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	42470068 	submi	r0, r7, #104	; 0x68

08000a38 <RCC_PLLSAIConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));

  RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
 8000a38:	0712      	lsls	r2, r2, #28
 8000a3a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8000a3e:	4b03      	ldr	r3, [pc, #12]	; (8000a4c <RCC_PLLSAIConfig+0x14>)
 8000a40:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
 8000a44:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	40023800 	andmi	r3, r2, r0, lsl #16

08000a50 <RCC_PLLSAICmd>:
  */
void RCC_PLLSAICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
 8000a50:	4b01      	ldr	r3, [pc, #4]	; (8000a58 <RCC_PLLSAICmd+0x8>)
 8000a52:	6018      	str	r0, [r3, #0]
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	42470070 	submi	r0, r7, #112	; 0x70

08000a5c <RCC_ClockSecuritySystemCmd>:
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8000a5c:	4b01      	ldr	r3, [pc, #4]	; (8000a64 <RCC_ClockSecuritySystemCmd+0x8>)
 8000a5e:	6018      	str	r0, [r3, #0]
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	4247004c 	submi	r0, r7, #76	; 0x4c

08000a68 <RCC_MCO1Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 8000a68:	4b03      	ldr	r3, [pc, #12]	; (8000a78 <RCC_MCO1Config+0x10>)
 8000a6a:	689a      	ldr	r2, [r3, #8]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 8000a6c:	f022 62ec 	bic.w	r2, r2, #123731968	; 0x7600000

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 8000a70:	4311      	orrs	r1, r2
 8000a72:	4308      	orrs	r0, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8000a74:	6098      	str	r0, [r3, #8]
 8000a76:	4770      	bx	lr
 8000a78:	40023800 	andmi	r3, r2, r0, lsl #16

08000a7c <RCC_MCO2Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 8000a7c:	4b03      	ldr	r3, [pc, #12]	; (8000a8c <RCC_MCO2Config+0x10>)
 8000a7e:	689a      	ldr	r2, [r3, #8]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 8000a80:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 8000a84:	4311      	orrs	r1, r2
 8000a86:	4308      	orrs	r0, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8000a88:	6098      	str	r0, [r3, #8]
 8000a8a:	4770      	bx	lr
 8000a8c:	40023800 	andmi	r3, r2, r0, lsl #16

08000a90 <RCC_SYSCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8000a90:	4b03      	ldr	r3, [pc, #12]	; (8000aa0 <RCC_SYSCLKConfig+0x10>)
 8000a92:	689a      	ldr	r2, [r3, #8]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8000a94:	f022 0203 	bic.w	r2, r2, #3

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8000a98:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000a9a:	6098      	str	r0, [r3, #8]
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	40023800 	andmi	r3, r2, r0, lsl #16

08000aa4 <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8000aa4:	4b02      	ldr	r3, [pc, #8]	; (8000ab0 <RCC_GetSYSCLKSource+0xc>)
 8000aa6:	6898      	ldr	r0, [r3, #8]
}
 8000aa8:	f000 000c 	and.w	r0, r0, #12
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	40023800 	andmi	r3, r2, r0, lsl #16

08000ab4 <RCC_HCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 8000ab4:	4b03      	ldr	r3, [pc, #12]	; (8000ac4 <RCC_HCLKConfig+0x10>)
 8000ab6:	689a      	ldr	r2, [r3, #8]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8000ab8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8000abc:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000abe:	6098      	str	r0, [r3, #8]
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	40023800 	andmi	r3, r2, r0, lsl #16

08000ac8 <RCC_PCLK1Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8000ac8:	4b03      	ldr	r3, [pc, #12]	; (8000ad8 <RCC_PCLK1Config+0x10>)
 8000aca:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 8000acc:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8000ad0:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000ad2:	6098      	str	r0, [r3, #8]
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	40023800 	andmi	r3, r2, r0, lsl #16

08000adc <RCC_PCLK2Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8000adc:	4b03      	ldr	r3, [pc, #12]	; (8000aec <RCC_PCLK2Config+0x10>)
 8000ade:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 8000ae0:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8000ae4:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000ae8:	6098      	str	r0, [r3, #8]
 8000aea:	4770      	bx	lr
 8000aec:	40023800 	andmi	r3, r2, r0, lsl #16

08000af0 <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000af0:	4a1f      	ldr	r2, [pc, #124]	; (8000b70 <RCC_GetClocksFreq+0x80>)
 8000af2:	6893      	ldr	r3, [r2, #8]
 8000af4:	f003 030c 	and.w	r3, r3, #12

  switch (tmp)
 8000af8:	2b04      	cmp	r3, #4
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000afa:	b410      	push	{r4}
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;

  switch (tmp)
 8000afc:	d01b      	beq.n	8000b36 <RCC_GetClocksFreq+0x46>
 8000afe:	2b08      	cmp	r3, #8
 8000b00:	d01c      	beq.n	8000b3c <RCC_GetClocksFreq+0x4c>

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
      break;
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000b02:	4b1c      	ldr	r3, [pc, #112]	; (8000b74 <RCC_GetClocksFreq+0x84>)
 8000b04:	6003      	str	r3, [r0, #0]
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000b06:	491a      	ldr	r1, [pc, #104]	; (8000b70 <RCC_GetClocksFreq+0x80>)
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 8000b08:	4a1b      	ldr	r2, [pc, #108]	; (8000b78 <RCC_GetClocksFreq+0x88>)
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000b0a:	688c      	ldr	r4, [r1, #8]
  tmp = tmp >> 4;
 8000b0c:	f3c4 1403 	ubfx	r4, r4, #4, #4
  presc = APBAHBPrescTable[tmp];
 8000b10:	5d14      	ldrb	r4, [r2, r4]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000b12:	40e3      	lsrs	r3, r4
 8000b14:	6043      	str	r3, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000b16:	688c      	ldr	r4, [r1, #8]
  tmp = tmp >> 10;
 8000b18:	f3c4 2482 	ubfx	r4, r4, #10, #3
  presc = APBAHBPrescTable[tmp];
 8000b1c:	5d14      	ldrb	r4, [r2, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000b1e:	fa23 f404 	lsr.w	r4, r3, r4
 8000b22:	6084      	str	r4, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000b24:	6889      	ldr	r1, [r1, #8]
  tmp = tmp >> 13;
  presc = APBAHBPrescTable[tmp];
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
}
 8000b26:	f85d 4b04 	ldr.w	r4, [sp], #4
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
  tmp = tmp >> 13;
 8000b2a:	f3c1 3142 	ubfx	r1, r1, #13, #3
  presc = APBAHBPrescTable[tmp];
 8000b2e:	5c52      	ldrb	r2, [r2, r1]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000b30:	40d3      	lsrs	r3, r2
 8000b32:	60c3      	str	r3, [r0, #12]
}
 8000b34:	4770      	bx	lr
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000b36:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <RCC_GetClocksFreq+0x8c>)
 8000b38:	6003      	str	r3, [r0, #0]
      break;
 8000b3a:	e7e4      	b.n	8000b06 <RCC_GetClocksFreq+0x16>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000b3c:	6854      	ldr	r4, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b3e:	6851      	ldr	r1, [r2, #4]
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000b40:	6852      	ldr	r2, [r2, #4]
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
 8000b42:	0263      	lsls	r3, r4, #9
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000b44:	bf4c      	ite	mi
 8000b46:	4b0d      	ldrmi	r3, [pc, #52]	; (8000b7c <RCC_GetClocksFreq+0x8c>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000b48:	4b0a      	ldrpl	r3, [pc, #40]	; (8000b74 <RCC_GetClocksFreq+0x84>)

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b4a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000b4e:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8000b52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b56:	fb03 f302 	mul.w	r3, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000b5a:	4a05      	ldr	r2, [pc, #20]	; (8000b70 <RCC_GetClocksFreq+0x80>)
 8000b5c:	6852      	ldr	r2, [r2, #4]
 8000b5e:	f3c2 4201 	ubfx	r2, r2, #16, #2
 8000b62:	3201      	adds	r2, #1
 8000b64:	0052      	lsls	r2, r2, #1
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000b66:	fbb3 f3f2 	udiv	r3, r3, r2
 8000b6a:	6003      	str	r3, [r0, #0]
      break;
 8000b6c:	e7cb      	b.n	8000b06 <RCC_GetClocksFreq+0x16>
 8000b6e:	bf00      	nop
 8000b70:	40023800 	andmi	r3, r2, r0, lsl #16
 8000b74:	00f42400 	rscseq	r2, r4, r0, lsl #8
 8000b78:	20000014 	andcs	r0, r0, r4, lsl r0
 8000b7c:	007a1200 	rsbseq	r1, sl, r0, lsl #4

08000b80 <RCC_RTCCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 8000b80:	f400 7340 	and.w	r3, r0, #768	; 0x300
 8000b84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000b88:	d109      	bne.n	8000b9e <RCC_RTCCLKConfig+0x1e>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8000b8a:	4a08      	ldr	r2, [pc, #32]	; (8000bac <RCC_RTCCLKConfig+0x2c>)
 8000b8c:	6891      	ldr	r1, [r2, #8]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8000b8e:	f020 4370 	bic.w	r3, r0, #4026531840	; 0xf0000000
  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 8000b92:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8000b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000b9a:	430b      	orrs	r3, r1

    /* Store the new value */
    RCC->CFGR = tmpreg;
 8000b9c:	6093      	str	r3, [r2, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 8000b9e:	4b03      	ldr	r3, [pc, #12]	; (8000bac <RCC_RTCCLKConfig+0x2c>)
 8000ba0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000ba2:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8000ba6:	4310      	orrs	r0, r2
 8000ba8:	6718      	str	r0, [r3, #112]	; 0x70
 8000baa:	4770      	bx	lr
 8000bac:	40023800 	andmi	r3, r2, r0, lsl #16

08000bb0 <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8000bb0:	4b01      	ldr	r3, [pc, #4]	; (8000bb8 <RCC_RTCCLKCmd+0x8>)
 8000bb2:	6018      	str	r0, [r3, #0]
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	42470e3c 	submi	r0, r7, #60, 28	; 0x3c0

08000bbc <RCC_BackupResetCmd>:
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8000bbc:	4b01      	ldr	r3, [pc, #4]	; (8000bc4 <RCC_BackupResetCmd+0x8>)
 8000bbe:	6018      	str	r0, [r3, #0]
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	42470e40 	submi	r0, r7, #64, 28	; 0x400

08000bc8 <RCC_I2SCLKConfig>:
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 8000bc8:	4b01      	ldr	r3, [pc, #4]	; (8000bd0 <RCC_I2SCLKConfig+0x8>)
 8000bca:	6018      	str	r0, [r3, #0]
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	4247015c 	submi	r0, r7, #92, 2

08000bd4 <RCC_SAIPLLI2SClkDivConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
  
  tmpreg = RCC->DCKCFGR;
 8000bd4:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <RCC_SAIPLLI2SClkDivConfig+0x14>)
 8000bd6:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
 8000bda:	3801      	subs	r0, #1
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
  
  tmpreg = RCC->DCKCFGR;

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
 8000bdc:	f022 021f 	bic.w	r2, r2, #31

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
 8000be0:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8000be2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8000be6:	4770      	bx	lr
 8000be8:	40023800 	andmi	r3, r2, r0, lsl #16

08000bec <RCC_SAIPLLSAIClkDivConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
  
  tmpreg = RCC->DCKCFGR;
 8000bec:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <RCC_SAIPLLSAIClkDivConfig+0x18>)
 8000bee:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
 8000bf2:	3801      	subs	r0, #1
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
  
  tmpreg = RCC->DCKCFGR;

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
 8000bf4:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
 8000bf8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8000bfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	40023800 	andmi	r3, r2, r0, lsl #16

08000c08 <RCC_SAIBlockACLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
  
  tmpreg = RCC->DCKCFGR;
 8000c08:	4b04      	ldr	r3, [pc, #16]	; (8000c1c <RCC_SAIBlockACLKConfig+0x14>)
 8000c0a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c

  /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
 8000c0e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000

  /* Set SAI Block A source selection value */
  tmpreg |= RCC_SAIBlockACLKSource;
 8000c12:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8000c14:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	40023800 	andmi	r3, r2, r0, lsl #16

08000c20 <RCC_SAIBlockBCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
  
  tmpreg = RCC->DCKCFGR;
 8000c20:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <RCC_SAIBlockBCLKConfig+0x14>)
 8000c22:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c

  /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
 8000c26:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000

  /* Set SAI Block B source selection value */
  tmpreg |= RCC_SAIBlockBCLKSource;
 8000c2a:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8000c2c:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	40023800 	andmi	r3, r2, r0, lsl #16

08000c38 <RCC_LTDCCLKDivConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
  
  tmpreg = RCC->DCKCFGR;
 8000c38:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <RCC_LTDCCLKDivConfig+0x14>)
 8000c3a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c

  /* Clear PLLSAIDIVR[2:0] bits */
  tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
 8000c3e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000

  /* Set PLLSAIDIVR values */
  tmpreg |= RCC_PLLSAIDivR;
 8000c42:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8000c44:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	40023800 	andmi	r3, r2, r0, lsl #16

08000c50 <RCC_TIMCLKPresConfig>:
void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
{
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));

  *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
 8000c50:	4b01      	ldr	r3, [pc, #4]	; (8000c58 <RCC_TIMCLKPresConfig+0x8>)
 8000c52:	6018      	str	r0, [r3, #0]
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	424711e0 	submi	r1, r7, #224, 2	; 0x38

08000c5c <RCC_AHB1PeriphClockCmd>:
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000c5c:	4b04      	ldr	r3, [pc, #16]	; (8000c70 <RCC_AHB1PeriphClockCmd+0x14>)
 8000c5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000c60:	b919      	cbnz	r1, 8000c6a <RCC_AHB1PeriphClockCmd+0xe>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000c62:	ea22 0000 	bic.w	r0, r2, r0
 8000c66:	6318      	str	r0, [r3, #48]	; 0x30
 8000c68:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000c6a:	4310      	orrs	r0, r2
 8000c6c:	6318      	str	r0, [r3, #48]	; 0x30
 8000c6e:	4770      	bx	lr
 8000c70:	40023800 	andmi	r3, r2, r0, lsl #16

08000c74 <RCC_AHB2PeriphClockCmd>:
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8000c74:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <RCC_AHB2PeriphClockCmd+0x14>)
 8000c76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000c78:	b919      	cbnz	r1, 8000c82 <RCC_AHB2PeriphClockCmd+0xe>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 8000c7a:	ea22 0000 	bic.w	r0, r2, r0
 8000c7e:	6358      	str	r0, [r3, #52]	; 0x34
 8000c80:	4770      	bx	lr
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8000c82:	4310      	orrs	r0, r2
 8000c84:	6358      	str	r0, [r3, #52]	; 0x34
 8000c86:	4770      	bx	lr
 8000c88:	40023800 	andmi	r3, r2, r0, lsl #16

08000c8c <RCC_AHB3PeriphClockCmd>:
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8000c8c:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <RCC_AHB3PeriphClockCmd+0x14>)
 8000c8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000c90:	b919      	cbnz	r1, 8000c9a <RCC_AHB3PeriphClockCmd+0xe>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 8000c92:	ea22 0000 	bic.w	r0, r2, r0
 8000c96:	6398      	str	r0, [r3, #56]	; 0x38
 8000c98:	4770      	bx	lr
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8000c9a:	4310      	orrs	r0, r2
 8000c9c:	6398      	str	r0, [r3, #56]	; 0x38
 8000c9e:	4770      	bx	lr
 8000ca0:	40023800 	andmi	r3, r2, r0, lsl #16

08000ca4 <RCC_APB1PeriphClockCmd>:
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000ca4:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <RCC_APB1PeriphClockCmd+0x14>)
 8000ca6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000ca8:	b919      	cbnz	r1, 8000cb2 <RCC_APB1PeriphClockCmd+0xe>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000caa:	ea22 0000 	bic.w	r0, r2, r0
 8000cae:	6418      	str	r0, [r3, #64]	; 0x40
 8000cb0:	4770      	bx	lr
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000cb2:	4310      	orrs	r0, r2
 8000cb4:	6418      	str	r0, [r3, #64]	; 0x40
 8000cb6:	4770      	bx	lr
 8000cb8:	40023800 	andmi	r3, r2, r0, lsl #16

08000cbc <RCC_APB2PeriphClockCmd>:
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000cbc:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <RCC_APB2PeriphClockCmd+0x14>)
 8000cbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000cc0:	b919      	cbnz	r1, 8000cca <RCC_APB2PeriphClockCmd+0xe>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000cc2:	ea22 0000 	bic.w	r0, r2, r0
 8000cc6:	6458      	str	r0, [r3, #68]	; 0x44
 8000cc8:	4770      	bx	lr
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000cca:	4310      	orrs	r0, r2
 8000ccc:	6458      	str	r0, [r3, #68]	; 0x44
 8000cce:	4770      	bx	lr
 8000cd0:	40023800 	andmi	r3, r2, r0, lsl #16

08000cd4 <RCC_AHB1PeriphResetCmd>:
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8000cd4:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <RCC_AHB1PeriphResetCmd+0x14>)
 8000cd6:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000cd8:	b919      	cbnz	r1, 8000ce2 <RCC_AHB1PeriphResetCmd+0xe>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 8000cda:	ea22 0000 	bic.w	r0, r2, r0
 8000cde:	6118      	str	r0, [r3, #16]
 8000ce0:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8000ce2:	4310      	orrs	r0, r2
 8000ce4:	6118      	str	r0, [r3, #16]
 8000ce6:	4770      	bx	lr
 8000ce8:	40023800 	andmi	r3, r2, r0, lsl #16

08000cec <RCC_AHB2PeriphResetCmd>:
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8000cec:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <RCC_AHB2PeriphResetCmd+0x14>)
 8000cee:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000cf0:	b919      	cbnz	r1, 8000cfa <RCC_AHB2PeriphResetCmd+0xe>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 8000cf2:	ea22 0000 	bic.w	r0, r2, r0
 8000cf6:	6158      	str	r0, [r3, #20]
 8000cf8:	4770      	bx	lr
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8000cfa:	4310      	orrs	r0, r2
 8000cfc:	6158      	str	r0, [r3, #20]
 8000cfe:	4770      	bx	lr
 8000d00:	40023800 	andmi	r3, r2, r0, lsl #16

08000d04 <RCC_AHB3PeriphResetCmd>:
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8000d04:	4b04      	ldr	r3, [pc, #16]	; (8000d18 <RCC_AHB3PeriphResetCmd+0x14>)
 8000d06:	699a      	ldr	r2, [r3, #24]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000d08:	b919      	cbnz	r1, 8000d12 <RCC_AHB3PeriphResetCmd+0xe>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 8000d0a:	ea22 0000 	bic.w	r0, r2, r0
 8000d0e:	6198      	str	r0, [r3, #24]
 8000d10:	4770      	bx	lr
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8000d12:	4310      	orrs	r0, r2
 8000d14:	6198      	str	r0, [r3, #24]
 8000d16:	4770      	bx	lr
 8000d18:	40023800 	andmi	r3, r2, r0, lsl #16

08000d1c <RCC_APB1PeriphResetCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000d1c:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <RCC_APB1PeriphResetCmd+0x14>)
 8000d1e:	6a1a      	ldr	r2, [r3, #32]
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000d20:	b919      	cbnz	r1, 8000d2a <RCC_APB1PeriphResetCmd+0xe>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8000d22:	ea22 0000 	bic.w	r0, r2, r0
 8000d26:	6218      	str	r0, [r3, #32]
 8000d28:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000d2a:	4310      	orrs	r0, r2
 8000d2c:	6218      	str	r0, [r3, #32]
 8000d2e:	4770      	bx	lr
 8000d30:	40023800 	andmi	r3, r2, r0, lsl #16

08000d34 <RCC_APB2PeriphResetCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000d34:	4b04      	ldr	r3, [pc, #16]	; (8000d48 <RCC_APB2PeriphResetCmd+0x14>)
 8000d36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000d38:	b919      	cbnz	r1, 8000d42 <RCC_APB2PeriphResetCmd+0xe>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8000d3a:	ea22 0000 	bic.w	r0, r2, r0
 8000d3e:	6258      	str	r0, [r3, #36]	; 0x24
 8000d40:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000d42:	4310      	orrs	r0, r2
 8000d44:	6258      	str	r0, [r3, #36]	; 0x24
 8000d46:	4770      	bx	lr
 8000d48:	40023800 	andmi	r3, r2, r0, lsl #16

08000d4c <RCC_AHB1PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8000d4c:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <RCC_AHB1PeriphClockLPModeCmd+0x14>)
 8000d4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000d50:	b919      	cbnz	r1, 8000d5a <RCC_AHB1PeriphClockLPModeCmd+0xe>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 8000d52:	ea22 0000 	bic.w	r0, r2, r0
 8000d56:	6518      	str	r0, [r3, #80]	; 0x50
 8000d58:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8000d5a:	4310      	orrs	r0, r2
 8000d5c:	6518      	str	r0, [r3, #80]	; 0x50
 8000d5e:	4770      	bx	lr
 8000d60:	40023800 	andmi	r3, r2, r0, lsl #16

08000d64 <RCC_AHB2PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8000d64:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <RCC_AHB2PeriphClockLPModeCmd+0x14>)
 8000d66:	6d5a      	ldr	r2, [r3, #84]	; 0x54
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000d68:	b919      	cbnz	r1, 8000d72 <RCC_AHB2PeriphClockLPModeCmd+0xe>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 8000d6a:	ea22 0000 	bic.w	r0, r2, r0
 8000d6e:	6558      	str	r0, [r3, #84]	; 0x54
 8000d70:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8000d72:	4310      	orrs	r0, r2
 8000d74:	6558      	str	r0, [r3, #84]	; 0x54
 8000d76:	4770      	bx	lr
 8000d78:	40023800 	andmi	r3, r2, r0, lsl #16

08000d7c <RCC_AHB3PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8000d7c:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <RCC_AHB3PeriphClockLPModeCmd+0x14>)
 8000d7e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000d80:	b919      	cbnz	r1, 8000d8a <RCC_AHB3PeriphClockLPModeCmd+0xe>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 8000d82:	ea22 0000 	bic.w	r0, r2, r0
 8000d86:	6598      	str	r0, [r3, #88]	; 0x58
 8000d88:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8000d8a:	4310      	orrs	r0, r2
 8000d8c:	6598      	str	r0, [r3, #88]	; 0x58
 8000d8e:	4770      	bx	lr
 8000d90:	40023800 	andmi	r3, r2, r0, lsl #16

08000d94 <RCC_APB1PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8000d94:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <RCC_APB1PeriphClockLPModeCmd+0x14>)
 8000d96:	6e1a      	ldr	r2, [r3, #96]	; 0x60
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000d98:	b919      	cbnz	r1, 8000da2 <RCC_APB1PeriphClockLPModeCmd+0xe>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 8000d9a:	ea22 0000 	bic.w	r0, r2, r0
 8000d9e:	6618      	str	r0, [r3, #96]	; 0x60
 8000da0:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8000da2:	4310      	orrs	r0, r2
 8000da4:	6618      	str	r0, [r3, #96]	; 0x60
 8000da6:	4770      	bx	lr
 8000da8:	40023800 	andmi	r3, r2, r0, lsl #16

08000dac <RCC_APB2PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8000dac:	4b04      	ldr	r3, [pc, #16]	; (8000dc0 <RCC_APB2PeriphClockLPModeCmd+0x14>)
 8000dae:	6e5a      	ldr	r2, [r3, #100]	; 0x64
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000db0:	b919      	cbnz	r1, 8000dba <RCC_APB2PeriphClockLPModeCmd+0xe>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 8000db2:	ea22 0000 	bic.w	r0, r2, r0
 8000db6:	6658      	str	r0, [r3, #100]	; 0x64
 8000db8:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8000dba:	4310      	orrs	r0, r2
 8000dbc:	6658      	str	r0, [r3, #100]	; 0x64
 8000dbe:	4770      	bx	lr
 8000dc0:	40023800 	andmi	r3, r2, r0, lsl #16

08000dc4 <RCC_ITConfig>:
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8000dc4:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <RCC_ITConfig+0x14>)
 8000dc6:	781a      	ldrb	r2, [r3, #0]
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000dc8:	b919      	cbnz	r1, 8000dd2 <RCC_ITConfig+0xe>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8000dca:	ea22 0000 	bic.w	r0, r2, r0
 8000dce:	7018      	strb	r0, [r3, #0]
 8000dd0:	4770      	bx	lr
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8000dd2:	4310      	orrs	r0, r2
 8000dd4:	7018      	strb	r0, [r3, #0]
 8000dd6:	4770      	bx	lr
 8000dd8:	4002380d 	andmi	r3, r2, sp, lsl #16

08000ddc <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8000ddc:	0943      	lsrs	r3, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d00b      	beq.n	8000dfa <RCC_GetFlagStatus+0x1e>
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8000de2:	2b02      	cmp	r3, #2
  {
    statusreg = RCC->BDCR;
 8000de4:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <RCC_GetFlagStatus+0x30>)
 8000de6:	bf0c      	ite	eq
 8000de8:	6f1b      	ldreq	r3, [r3, #112]	; 0x70
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8000dea:	6f5b      	ldrne	r3, [r3, #116]	; 0x74
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000dec:	f000 001f 	and.w	r0, r0, #31
 8000df0:	fa23 f000 	lsr.w	r0, r3, r0
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 8000df4:	f000 0001 	and.w	r0, r0, #1
 8000df8:	4770      	bx	lr

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8000dfa:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <RCC_GetFlagStatus+0x30>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
    statusreg = RCC->CSR;
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000dfe:	f000 001f 	and.w	r0, r0, #31
 8000e02:	fa23 f000 	lsr.w	r0, r3, r0
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 8000e06:	f000 0001 	and.w	r0, r0, #1
 8000e0a:	4770      	bx	lr
 8000e0c:	40023800 	andmi	r3, r2, r0, lsl #16

08000e10 <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8000e10:	4b02      	ldr	r3, [pc, #8]	; (8000e1c <RCC_ClearFlag+0xc>)
 8000e12:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000e14:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000e18:	675a      	str	r2, [r3, #116]	; 0x74
 8000e1a:	4770      	bx	lr
 8000e1c:	40023800 	andmi	r3, r2, r0, lsl #16

08000e20 <RCC_GetITStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8000e20:	4b03      	ldr	r3, [pc, #12]	; (8000e30 <RCC_GetITStatus+0x10>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  /* Return the RCC_IT status */
  return  bitstatus;
}
 8000e26:	bf0c      	ite	eq
 8000e28:	2000      	moveq	r0, #0
 8000e2a:	2001      	movne	r0, #1
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	40023800 	andmi	r3, r2, r0, lsl #16

08000e34 <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8000e34:	4b01      	ldr	r3, [pc, #4]	; (8000e3c <RCC_ClearITPendingBit+0x8>)
 8000e36:	7018      	strb	r0, [r3, #0]
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	4002380e 	andmi	r3, r2, lr, lsl #16

08000e40 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8000e40:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8000e42:	4b3a      	ldr	r3, [pc, #232]	; (8000f2c <USART_DeInit+0xec>)
 8000e44:	4298      	cmp	r0, r3
 8000e46:	d021      	beq.n	8000e8c <USART_DeInit+0x4c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  }
  else if (USARTx == USART2)
 8000e48:	4b39      	ldr	r3, [pc, #228]	; (8000f30 <USART_DeInit+0xf0>)
 8000e4a:	4298      	cmp	r0, r3
 8000e4c:	d028      	beq.n	8000ea0 <USART_DeInit+0x60>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
 8000e4e:	4b39      	ldr	r3, [pc, #228]	; (8000f34 <USART_DeInit+0xf4>)
 8000e50:	4298      	cmp	r0, r3
 8000e52:	d031      	beq.n	8000eb8 <USART_DeInit+0x78>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  }    
  else if (USARTx == UART4)
 8000e54:	4b38      	ldr	r3, [pc, #224]	; (8000f38 <USART_DeInit+0xf8>)
 8000e56:	4298      	cmp	r0, r3
 8000e58:	d03a      	beq.n	8000ed0 <USART_DeInit+0x90>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
  }
  else if (USARTx == UART5)
 8000e5a:	4b38      	ldr	r3, [pc, #224]	; (8000f3c <USART_DeInit+0xfc>)
 8000e5c:	4298      	cmp	r0, r3
 8000e5e:	d043      	beq.n	8000ee8 <USART_DeInit+0xa8>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
  }  
  else if (USARTx == USART6)
 8000e60:	4b37      	ldr	r3, [pc, #220]	; (8000f40 <USART_DeInit+0x100>)
 8000e62:	4298      	cmp	r0, r3
 8000e64:	d04c      	beq.n	8000f00 <USART_DeInit+0xc0>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
  }
  else if (USARTx == UART7)
 8000e66:	4b37      	ldr	r3, [pc, #220]	; (8000f44 <USART_DeInit+0x104>)
 8000e68:	4298      	cmp	r0, r3
 8000e6a:	d053      	beq.n	8000f14 <USART_DeInit+0xd4>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
  }     
  else
  {
    if (USARTx == UART8)
 8000e6c:	4b36      	ldr	r3, [pc, #216]	; (8000f48 <USART_DeInit+0x108>)
 8000e6e:	4298      	cmp	r0, r3
 8000e70:	d000      	beq.n	8000e74 <USART_DeInit+0x34>
 8000e72:	bd08      	pop	{r3, pc}
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
 8000e74:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8000e78:	2101      	movs	r1, #1
 8000e7a:	f7ff ff4f 	bl	8000d1c <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
 8000e7e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8000e82:	2100      	movs	r1, #0
    }
  }
}
 8000e84:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (USARTx == UART8)
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
 8000e88:	f7ff bf48 	b.w	8000d1c <RCC_APB1PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8000e8c:	2010      	movs	r0, #16
 8000e8e:	2101      	movs	r1, #1
 8000e90:	f7ff ff50 	bl	8000d34 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8000e94:	2010      	movs	r0, #16
 8000e96:	2100      	movs	r1, #0
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 8000e98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8000e9c:	f7ff bf4a 	b.w	8000d34 <RCC_APB2PeriphResetCmd>
  }
  else if (USARTx == USART2)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8000ea0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	f7ff ff39 	bl	8000d1c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8000eaa:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000eae:	2100      	movs	r1, #0
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 8000eb0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  }
  else if (USARTx == USART2)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8000eb4:	f7ff bf32 	b.w	8000d1c <RCC_APB1PeriphResetCmd>
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8000eb8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	f7ff ff2d 	bl	8000d1c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8000ec2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000ec6:	2100      	movs	r1, #0
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 8000ec8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8000ecc:	f7ff bf26 	b.w	8000d1c <RCC_APB1PeriphResetCmd>
  }    
  else if (USARTx == UART4)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 8000ed0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	f7ff ff21 	bl	8000d1c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8000eda:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000ede:	2100      	movs	r1, #0
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 8000ee0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  }    
  else if (USARTx == UART4)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8000ee4:	f7ff bf1a 	b.w	8000d1c <RCC_APB1PeriphResetCmd>
  }
  else if (USARTx == UART5)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 8000ee8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000eec:	2101      	movs	r1, #1
 8000eee:	f7ff ff15 	bl	8000d1c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8000ef2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000ef6:	2100      	movs	r1, #0
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 8000ef8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
  }
  else if (USARTx == UART5)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8000efc:	f7ff bf0e 	b.w	8000d1c <RCC_APB1PeriphResetCmd>
  }  
  else if (USARTx == USART6)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 8000f00:	2020      	movs	r0, #32
 8000f02:	2101      	movs	r1, #1
 8000f04:	f7ff ff16 	bl	8000d34 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8000f08:	2020      	movs	r0, #32
 8000f0a:	2100      	movs	r1, #0
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 8000f0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
  }  
  else if (USARTx == USART6)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8000f10:	f7ff bf10 	b.w	8000d34 <RCC_APB2PeriphResetCmd>
  }
  else if (USARTx == UART7)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
 8000f14:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f18:	2101      	movs	r1, #1
 8000f1a:	f7ff feff 	bl	8000d1c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
 8000f1e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f22:	2100      	movs	r1, #0
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 8000f24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
  }
  else if (USARTx == UART7)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
 8000f28:	f7ff bef8 	b.w	8000d1c <RCC_APB1PeriphResetCmd>
 8000f2c:	40011000 	andmi	r1, r1, r0
 8000f30:	40004400 	andmi	r4, r0, r0, lsl #8
 8000f34:	40004800 	andmi	r4, r0, r0, lsl #16
 8000f38:	40004c00 	andmi	r4, r0, r0, lsl #24
 8000f3c:	40005000 	andmi	r5, r0, r0
 8000f40:	40011400 	andmi	r1, r1, r0, lsl #8
 8000f44:	40007800 	andmi	r7, r0, r0, lsl #16
 8000f48:	40007c00 	andmi	r7, r0, r0, lsl #24

08000f4c <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f4e:	460d      	mov	r5, r1
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000f50:	8a01      	ldrh	r1, [r0, #16]
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000f52:	88ef      	ldrh	r7, [r5, #6]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000f54:	892e      	ldrh	r6, [r5, #8]
 8000f56:	88ab      	ldrh	r3, [r5, #4]
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000f58:	89aa      	ldrh	r2, [r5, #12]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000f5a:	b289      	uxth	r1, r1
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000f5c:	4604      	mov	r4, r0

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000f5e:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000f62:	4339      	orrs	r1, r7

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000f64:	8968      	ldrh	r0, [r5, #10]
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000f66:	8221      	strh	r1, [r4, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000f68:	89a1      	ldrh	r1, [r4, #12]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000f6a:	4333      	orrs	r3, r6
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000f6c:	b289      	uxth	r1, r1

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000f6e:	4303      	orrs	r3, r0

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000f70:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8000f74:	f021 010c 	bic.w	r1, r1, #12

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000f78:	b29b      	uxth	r3, r3
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000f7a:	430b      	orrs	r3, r1
 8000f7c:	81a3      	strh	r3, [r4, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000f7e:	8aa3      	ldrh	r3, [r4, #20]
 8000f80:	b29b      	uxth	r3, r3

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000f82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000f86:	4313      	orrs	r3, r2
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000f88:	b085      	sub	sp, #20
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000f8a:	82a3      	strh	r3, [r4, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000f8c:	4668      	mov	r0, sp
 8000f8e:	f7ff fdaf 	bl	8000af0 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8000f92:	4b1d      	ldr	r3, [pc, #116]	; (8001008 <USART_Init+0xbc>)
 8000f94:	429c      	cmp	r4, r3
 8000f96:	d029      	beq.n	8000fec <USART_Init+0xa0>
 8000f98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f9c:	429c      	cmp	r4, r3
 8000f9e:	d025      	beq.n	8000fec <USART_Init+0xa0>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000fa0:	9b02      	ldr	r3, [sp, #8]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000fa2:	89a2      	ldrh	r2, [r4, #12]
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000fa4:	6829      	ldr	r1, [r5, #0]

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000fa6:	89a0      	ldrh	r0, [r4, #12]
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000fa8:	b212      	sxth	r2, r2
 8000faa:	2a00      	cmp	r2, #0
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000fac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000fb0:	bfb4      	ite	lt
 8000fb2:	0049      	lsllt	r1, r1, #1
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000fb4:	0089      	lslge	r1, r1, #2
 8000fb6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000fba:	fbb3 f2f1 	udiv	r2, r3, r1
  }
  tmpreg = (integerdivider / 100) << 4;
 8000fbe:	4913      	ldr	r1, [pc, #76]	; (800100c <USART_Init+0xc0>)

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000fc0:	b200      	sxth	r0, r0
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;
 8000fc2:	fba1 5302 	umull	r5, r3, r1, r2
 8000fc6:	095b      	lsrs	r3, r3, #5

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000fc8:	2564      	movs	r5, #100	; 0x64

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000fca:	2800      	cmp	r0, #0
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000fcc:	fb03 2215 	mls	r2, r3, r5, r2
 8000fd0:	ea4f 1303 	mov.w	r3, r3, lsl #4

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000fd4:	db0c      	blt.n	8000ff0 <USART_Init+0xa4>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000fd6:	0112      	lsls	r2, r2, #4
 8000fd8:	3232      	adds	r2, #50	; 0x32
 8000fda:	fba1 5102 	umull	r5, r1, r1, r2
 8000fde:	f3c1 1143 	ubfx	r1, r1, #5, #4
 8000fe2:	430b      	orrs	r3, r1
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	8123      	strh	r3, [r4, #8]
}
 8000fe8:	b005      	add	sp, #20
 8000fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);

  if ((USARTx == USART1) || (USARTx == USART6))
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000fec:	9b03      	ldr	r3, [sp, #12]
 8000fee:	e7d8      	b.n	8000fa2 <USART_Init+0x56>
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000ff0:	00d2      	lsls	r2, r2, #3
 8000ff2:	3232      	adds	r2, #50	; 0x32
 8000ff4:	fba1 0102 	umull	r0, r1, r1, r2
 8000ff8:	f3c1 1142 	ubfx	r1, r1, #5, #3
 8000ffc:	430b      	orrs	r3, r1
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	8123      	strh	r3, [r4, #8]
}
 8001002:	b005      	add	sp, #20
 8001004:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001006:	bf00      	nop
 8001008:	40011000 	andmi	r1, r1, r0
 800100c:	51eb851f 	mvnpl	r8, pc, lsl r5

08001010 <USART_StructInit>:
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8001010:	2300      	movs	r3, #0
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8001012:	f44f 5116 	mov.w	r1, #9600	; 0x2580
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8001016:	220c      	movs	r2, #12
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8001018:	6001      	str	r1, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800101a:	8142      	strh	r2, [r0, #10]
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 800101c:	8083      	strh	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 800101e:	80c3      	strh	r3, [r0, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8001020:	8103      	strh	r3, [r0, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8001022:	8183      	strh	r3, [r0, #12]
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <USART_ClockInit>:
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8001028:	b430      	push	{r4, r5}
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 800102a:	880a      	ldrh	r2, [r1, #0]
 800102c:	884d      	ldrh	r5, [r1, #2]
 800102e:	888c      	ldrh	r4, [r1, #4]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001030:	8a03      	ldrh	r3, [r0, #16]
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8001032:	88c9      	ldrh	r1, [r1, #6]
 8001034:	432a      	orrs	r2, r5
 8001036:	4322      	orrs	r2, r4
 8001038:	430a      	orrs	r2, r1
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800103a:	b29b      	uxth	r3, r3
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 800103c:	b292      	uxth	r2, r2
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 800103e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8001042:	4313      	orrs	r3, r2
 8001044:	8203      	strh	r3, [r0, #16]
}
 8001046:	bc30      	pop	{r4, r5}
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop

0800104c <USART_ClockStructInit>:
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 800104c:	2300      	movs	r3, #0
 800104e:	8003      	strh	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8001050:	8043      	strh	r3, [r0, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8001052:	8083      	strh	r3, [r0, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8001054:	80c3      	strh	r3, [r0, #6]
 8001056:	4770      	bx	lr

08001058 <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8001058:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800105a:	b929      	cbnz	r1, 8001068 <USART_Cmd+0x10>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 800105c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001060:	041b      	lsls	r3, r3, #16
 8001062:	0c1b      	lsrs	r3, r3, #16
 8001064:	8183      	strh	r3, [r0, #12]
 8001066:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8001068:	b29b      	uxth	r3, r3
 800106a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800106e:	8183      	strh	r3, [r0, #12]
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop

08001074 <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 8001074:	8b03      	ldrh	r3, [r0, #24]
 8001076:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800107a:	8303      	strh	r3, [r0, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 800107c:	8b03      	ldrh	r3, [r0, #24]
 800107e:	b29b      	uxth	r3, r3
 8001080:	4319      	orrs	r1, r3
 8001082:	8301      	strh	r1, [r0, #24]
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop

08001088 <USART_OverSampling8Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8001088:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800108a:	b919      	cbnz	r1, 8001094 <USART_OverSampling8Cmd+0xc>
    USARTx->CR1 |= USART_CR1_OVER8;
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 800108c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001090:	8183      	strh	r3, [r0, #12]
 8001092:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8001094:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001098:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800109c:	b29b      	uxth	r3, r3
 800109e:	8183      	strh	r3, [r0, #12]
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop

080010a4 <USART_OneBitMethodCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 80010a4:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80010a6:	b929      	cbnz	r1, 80010b4 <USART_OneBitMethodCmd+0x10>
    USARTx->CR3 |= USART_CR3_ONEBIT;
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 80010a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80010ac:	041b      	lsls	r3, r3, #16
 80010ae:	0c1b      	lsrs	r3, r3, #16
 80010b0:	8283      	strh	r3, [r0, #20]
 80010b2:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010ba:	8283      	strh	r3, [r0, #20]
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop

080010c0 <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 80010c0:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80010c4:	8081      	strh	r1, [r0, #4]
 80010c6:	4770      	bx	lr

080010c8 <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 80010c8:	8880      	ldrh	r0, [r0, #4]
}
 80010ca:	f3c0 0008 	ubfx	r0, r0, #0, #9
 80010ce:	4770      	bx	lr

080010d0 <USART_SetAddress>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 80010d0:	8a03      	ldrh	r3, [r0, #16]
 80010d2:	f023 030f 	bic.w	r3, r3, #15
 80010d6:	041b      	lsls	r3, r3, #16
 80010d8:	0c1b      	lsrs	r3, r3, #16
 80010da:	8203      	strh	r3, [r0, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 80010dc:	8a03      	ldrh	r3, [r0, #16]
 80010de:	b29b      	uxth	r3, r3
 80010e0:	4319      	orrs	r1, r3
 80010e2:	8201      	strh	r1, [r0, #16]
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop

080010e8 <USART_ReceiverWakeUpCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 80010e8:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 80010ea:	b929      	cbnz	r1, 80010f8 <USART_ReceiverWakeUpCmd+0x10>
    USARTx->CR1 |= USART_CR1_RWU;
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 80010ec:	f023 0302 	bic.w	r3, r3, #2
 80010f0:	041b      	lsls	r3, r3, #16
 80010f2:	0c1b      	lsrs	r3, r3, #16
 80010f4:	8183      	strh	r3, [r0, #12]
 80010f6:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	f043 0302 	orr.w	r3, r3, #2
 80010fe:	8183      	strh	r3, [r0, #12]
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop

08001104 <USART_WakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 8001104:	8983      	ldrh	r3, [r0, #12]
 8001106:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800110a:	041b      	lsls	r3, r3, #16
 800110c:	0c1b      	lsrs	r3, r3, #16
 800110e:	8183      	strh	r3, [r0, #12]
  USARTx->CR1 |= USART_WakeUp;
 8001110:	8983      	ldrh	r3, [r0, #12]
 8001112:	b29b      	uxth	r3, r3
 8001114:	4319      	orrs	r1, r3
 8001116:	8181      	strh	r1, [r0, #12]
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop

0800111c <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 800111c:	8a03      	ldrh	r3, [r0, #16]
 800111e:	f023 0320 	bic.w	r3, r3, #32
 8001122:	041b      	lsls	r3, r3, #16
 8001124:	0c1b      	lsrs	r3, r3, #16
 8001126:	8203      	strh	r3, [r0, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8001128:	8a03      	ldrh	r3, [r0, #16]
 800112a:	b29b      	uxth	r3, r3
 800112c:	4319      	orrs	r1, r3
 800112e:	8201      	strh	r1, [r0, #16]
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop

08001134 <USART_LINCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8001134:	8a03      	ldrh	r3, [r0, #16]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001136:	b929      	cbnz	r1, 8001144 <USART_LINCmd+0x10>
    USARTx->CR2 |= USART_CR2_LINEN;
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 8001138:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800113c:	041b      	lsls	r3, r3, #16
 800113e:	0c1b      	lsrs	r3, r3, #16
 8001140:	8203      	strh	r3, [r0, #16]
 8001142:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8001144:	b29b      	uxth	r3, r3
 8001146:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800114a:	8203      	strh	r3, [r0, #16]
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop

08001150 <USART_SendBreak>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 8001150:	8983      	ldrh	r3, [r0, #12]
 8001152:	b29b      	uxth	r3, r3
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	8183      	strh	r3, [r0, #12]
 800115a:	4770      	bx	lr

0800115c <USART_HalfDuplexCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 800115c:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800115e:	b929      	cbnz	r1, 800116c <USART_HalfDuplexCmd+0x10>
    USARTx->CR3 |= USART_CR3_HDSEL;
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 8001160:	f023 0308 	bic.w	r3, r3, #8
 8001164:	041b      	lsls	r3, r3, #16
 8001166:	0c1b      	lsrs	r3, r3, #16
 8001168:	8283      	strh	r3, [r0, #20]
 800116a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 800116c:	b29b      	uxth	r3, r3
 800116e:	f043 0308 	orr.w	r3, r3, #8
 8001172:	8283      	strh	r3, [r0, #20]
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop

08001178 <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 8001178:	8b03      	ldrh	r3, [r0, #24]
 800117a:	b2db      	uxtb	r3, r3
 800117c:	8303      	strh	r3, [r0, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 800117e:	8b03      	ldrh	r3, [r0, #24]
 8001180:	b29b      	uxth	r3, r3
 8001182:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8001186:	8301      	strh	r1, [r0, #24]
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop

0800118c <USART_SmartCardCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 800118c:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800118e:	b929      	cbnz	r1, 800119c <USART_SmartCardCmd+0x10>
    USARTx->CR3 |= USART_CR3_SCEN;
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 8001190:	f023 0320 	bic.w	r3, r3, #32
 8001194:	041b      	lsls	r3, r3, #16
 8001196:	0c1b      	lsrs	r3, r3, #16
 8001198:	8283      	strh	r3, [r0, #20]
 800119a:	4770      	bx	lr
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 800119c:	b29b      	uxth	r3, r3
 800119e:	f043 0320 	orr.w	r3, r3, #32
 80011a2:	8283      	strh	r3, [r0, #20]
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop

080011a8 <USART_SmartCardNACKCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 80011a8:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80011aa:	b929      	cbnz	r1, 80011b8 <USART_SmartCardNACKCmd+0x10>
    USARTx->CR3 |= USART_CR3_NACK;
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 80011ac:	f023 0310 	bic.w	r3, r3, #16
 80011b0:	041b      	lsls	r3, r3, #16
 80011b2:	0c1b      	lsrs	r3, r3, #16
 80011b4:	8283      	strh	r3, [r0, #20]
 80011b6:	4770      	bx	lr
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	f043 0310 	orr.w	r3, r3, #16
 80011be:	8283      	strh	r3, [r0, #20]
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop

080011c4 <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 80011c4:	8a83      	ldrh	r3, [r0, #20]
 80011c6:	f023 0304 	bic.w	r3, r3, #4
 80011ca:	041b      	lsls	r3, r3, #16
 80011cc:	0c1b      	lsrs	r3, r3, #16
 80011ce:	8283      	strh	r3, [r0, #20]
  USARTx->CR3 |= USART_IrDAMode;
 80011d0:	8a83      	ldrh	r3, [r0, #20]
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	4319      	orrs	r1, r3
 80011d6:	8281      	strh	r1, [r0, #20]
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop

080011dc <USART_IrDACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 80011dc:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 80011de:	b929      	cbnz	r1, 80011ec <USART_IrDACmd+0x10>
    USARTx->CR3 |= USART_CR3_IREN;
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 80011e0:	f023 0302 	bic.w	r3, r3, #2
 80011e4:	041b      	lsls	r3, r3, #16
 80011e6:	0c1b      	lsrs	r3, r3, #16
 80011e8:	8283      	strh	r3, [r0, #20]
 80011ea:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	f043 0302 	orr.w	r3, r3, #2
 80011f2:	8283      	strh	r3, [r0, #20]
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop

080011f8 <USART_DMACmd>:

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 80011f8:	8a83      	ldrh	r3, [r0, #20]
 80011fa:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 80011fc:	b91a      	cbnz	r2, 8001206 <USART_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 80011fe:	ea23 0101 	bic.w	r1, r3, r1
 8001202:	8281      	strh	r1, [r0, #20]
 8001204:	4770      	bx	lr

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8001206:	4319      	orrs	r1, r3
 8001208:	8281      	strh	r1, [r0, #20]
 800120a:	4770      	bx	lr

0800120c <USART_ITConfig>:
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 800120c:	f001 031f 	and.w	r3, r1, #31
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8001210:	b410      	push	{r4}
  } 
    
  usartxbase = (uint32_t)USARTx;

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001212:	f3c1 1142 	ubfx	r1, r1, #5, #3

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 8001216:	2401      	movs	r4, #1
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8001218:	42a1      	cmp	r1, r4
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 800121a:	fa04 f303 	lsl.w	r3, r4, r3
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 800121e:	d010      	beq.n	8001242 <USART_ITConfig+0x36>
  {
    usartxbase += 0x0C;
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8001220:	2902      	cmp	r1, #2
  {
    usartxbase += 0x10;
 8001222:	bf0c      	ite	eq
 8001224:	3010      	addeq	r0, #16
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8001226:	3014      	addne	r0, #20
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001228:	6804      	ldr	r4, [r0, #0]
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
 800122a:	b92a      	cbnz	r2, 8001238 <USART_ITConfig+0x2c>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800122c:	ea24 0303 	bic.w	r3, r4, r3
 8001230:	6003      	str	r3, [r0, #0]
  }
}
 8001232:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001236:	4770      	bx	lr
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001238:	4323      	orrs	r3, r4
 800123a:	6003      	str	r3, [r0, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 800123c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001240:	4770      	bx	lr
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
  {
    usartxbase += 0x0C;
 8001242:	300c      	adds	r0, #12
 8001244:	e7f0      	b.n	8001228 <USART_ITConfig+0x1c>
 8001246:	bf00      	nop

08001248 <USART_GetFlagStatus>:
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8001248:	8803      	ldrh	r3, [r0, #0]
 800124a:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 800124c:	bf0c      	ite	eq
 800124e:	2000      	moveq	r0, #0
 8001250:	2001      	movne	r0, #1
 8001252:	4770      	bx	lr

08001254 <USART_ClearFlag>:
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 8001254:	43c9      	mvns	r1, r1
 8001256:	b289      	uxth	r1, r1
 8001258:	8001      	strh	r1, [r0, #0]
 800125a:	4770      	bx	lr

0800125c <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 800125c:	b410      	push	{r4}
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 800125e:	f3c1 1342 	ubfx	r3, r1, #5, #3
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 8001262:	2401      	movs	r4, #1
 8001264:	f001 021f 	and.w	r2, r1, #31
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001268:	42a3      	cmp	r3, r4
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 800126a:	fa04 f202 	lsl.w	r2, r4, r2
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 800126e:	d017      	beq.n	80012a0 <USART_GetITStatus+0x44>
  {
    itmask &= USARTx->CR1;
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8001270:	2b02      	cmp	r3, #2
  {
    itmask &= USARTx->CR2;
 8001272:	bf0c      	ite	eq
 8001274:	8a03      	ldrheq	r3, [r0, #16]
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8001276:	8a83      	ldrhne	r3, [r0, #20]
 8001278:	b29b      	uxth	r3, r3
 800127a:	4013      	ands	r3, r2
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
 800127c:	8802      	ldrh	r2, [r0, #0]
 800127e:	b292      	uxth	r2, r2
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8001280:	b153      	cbz	r3, 8001298 <USART_GetITStatus+0x3c>
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
 8001282:	0a09      	lsrs	r1, r1, #8
 8001284:	2301      	movs	r3, #1
 8001286:	fa03 f101 	lsl.w	r1, r3, r1
  bitpos &= USARTx->SR;
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800128a:	4211      	tst	r1, r2
  {
    bitstatus = SET;
 800128c:	bf0c      	ite	eq
 800128e:	2000      	moveq	r0, #0
 8001290:	2001      	movne	r0, #1
  {
    bitstatus = RESET;
  }
  
  return bitstatus;  
}
 8001292:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001296:	4770      	bx	lr
  {
    bitstatus = SET;
  }
  else
  {
    bitstatus = RESET;
 8001298:	4618      	mov	r0, r3
  }
  
  return bitstatus;  
}
 800129a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800129e:	4770      	bx	lr
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
  {
    itmask &= USARTx->CR1;
 80012a0:	8983      	ldrh	r3, [r0, #12]
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	4013      	ands	r3, r2
 80012a6:	e7e9      	b.n	800127c <USART_GetITStatus+0x20>

080012a8 <USART_ClearITPendingBit>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 80012a8:	0a09      	lsrs	r1, r1, #8
 80012aa:	2301      	movs	r3, #1
 80012ac:	fa03 f101 	lsl.w	r1, r3, r1
  USARTx->SR = (uint16_t)~itmask;
 80012b0:	43c9      	mvns	r1, r1
 80012b2:	b289      	uxth	r1, r1
 80012b4:	8001      	strh	r1, [r0, #0]
 80012b6:	4770      	bx	lr

080012b8 <SYSCFG_DeInit>:
  *   registers to their default reset values.
  * @param  None
  * @retval None
  */
void SYSCFG_DeInit(void)
{
 80012b8:	b508      	push	{r3, lr}
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80012ba:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80012be:	2101      	movs	r1, #1
 80012c0:	f7ff fd38 	bl	8000d34 <RCC_APB2PeriphResetCmd>
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 80012c4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80012c8:	2100      	movs	r1, #0
}
 80012ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void SYSCFG_DeInit(void)
{
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 80012ce:	f7ff bd31 	b.w	8000d34 <RCC_APB2PeriphResetCmd>
 80012d2:	bf00      	nop

080012d4 <SYSCFG_MemoryRemapConfig>:
void SYSCFG_MemoryRemapConfig(uint8_t SYSCFG_MemoryRemap)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap));

  SYSCFG->MEMRMP = SYSCFG_MemoryRemap;
 80012d4:	4b01      	ldr	r3, [pc, #4]	; (80012dc <SYSCFG_MemoryRemapConfig+0x8>)
 80012d6:	6018      	str	r0, [r3, #0]
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	40013800 	andmi	r3, r1, r0, lsl #16

080012e0 <SYSCFG_MemorySwappingBank>:
void SYSCFG_MemorySwappingBank(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) UFB_MODE_BB = (uint32_t)NewState;
 80012e0:	4b01      	ldr	r3, [pc, #4]	; (80012e8 <SYSCFG_MemorySwappingBank+0x8>)
 80012e2:	6018      	str	r0, [r3, #0]
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	42270020 	eormi	r0, r7, #32

080012ec <SYSCFG_EXTILineConfig>:
  *           be (0..7) for STM32F42xxx/43xxx devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 80012ec:	f001 03fc 	and.w	r3, r1, #252	; 0xfc
 80012f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80012f4:	f503 339c 	add.w	r3, r3, #79872	; 0x13800

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 80012f8:	f001 0103 	and.w	r1, r1, #3
  *           be (0..7) for STM32F42xxx/43xxx devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 80012fc:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 80012fe:	0089      	lsls	r1, r1, #2
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8001300:	689c      	ldr	r4, [r3, #8]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8001302:	220f      	movs	r2, #15
 8001304:	408a      	lsls	r2, r1
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8001306:	ea24 0202 	bic.w	r2, r4, r2
 800130a:	609a      	str	r2, [r3, #8]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 800130c:	689a      	ldr	r2, [r3, #8]
}
 800130e:	f85d 4b04 	ldr.w	r4, [sp], #4
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8001312:	4088      	lsls	r0, r1
 8001314:	4302      	orrs	r2, r0
 8001316:	609a      	str	r2, [r3, #8]
}
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop

0800131c <SYSCFG_ETH_MediaInterfaceConfig>:
  */
void SYSCFG_ETH_MediaInterfaceConfig(uint32_t SYSCFG_ETH_MediaInterface) 
{ 
  assert_param(IS_SYSCFG_ETH_MEDIA_INTERFACE(SYSCFG_ETH_MediaInterface)); 
  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) PMC_MII_RMII_SEL_BB = SYSCFG_ETH_MediaInterface; 
 800131c:	4b01      	ldr	r3, [pc, #4]	; (8001324 <SYSCFG_ETH_MediaInterfaceConfig+0x8>)
 800131e:	6018      	str	r0, [r3, #0]
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	422700dc 	eormi	r0, r7, #220	; 0xdc

08001328 <SYSCFG_CompensationCellCmd>:
void SYSCFG_CompensationCellCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CMPCR_CMP_PD_BB = (uint32_t)NewState;
 8001328:	4b01      	ldr	r3, [pc, #4]	; (8001330 <SYSCFG_CompensationCellCmd+0x8>)
 800132a:	6018      	str	r0, [r3, #0]
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	42270400 	eormi	r0, r7, #0, 8

08001334 <SYSCFG_GetCompensationCellStatus>:
  */
FlagStatus SYSCFG_GetCompensationCellStatus(void)
{
  FlagStatus bitstatus = RESET;
    
  if ((SYSCFG->CMPCR & SYSCFG_CMPCR_READY ) != (uint32_t)RESET)
 8001334:	4b02      	ldr	r3, [pc, #8]	; (8001340 <SYSCFG_GetCompensationCellStatus+0xc>)
 8001336:	6a18      	ldr	r0, [r3, #32]
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8001338:	f3c0 2000 	ubfx	r0, r0, #8, #1
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	40013800 	andmi	r3, r1, r0, lsl #16

Disassembly of section .rodata:

08001344 <.rodata>:
 8001344:	6c6c6548 	cfstr64vs	mvdx6, [ip], #-288	; 0xfffffee0
 8001348:	6f57206f 	svcvs	0x0057206f
 800134c:	21646c72 	smccs	18114	; 0x46c2
 8001350:	00000a0d 	andeq	r0, r0, sp, lsl #20
 8001354:	7473754a 	ldrbtvc	r7, [r3], #-1354	; 0x54a
 8001358:	726f6620 	rsbvc	r6, pc, #32, 12	; 0x2000000
 800135c:	4d545320 	ldclmi	3, cr5, [r4, #-128]	; 0xffffff80
 8001360:	34463233 	strbcc	r3, [r6], #-563	; 0x233
 8001364:	20493932 	subcs	r3, r9, r2, lsr r9
 8001368:	63736944 	cmnvs	r3, #68, 18	; 0x110000
 800136c:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
 8001370:	65762079 	ldrbvs	r2, [r6, #-121]!	; 0x79
 8001374:	79666972 	stmdbvc	r6!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 8001378:	41535520 	cmpmi	r3, r0, lsr #10
 800137c:	20315452 	eorscs	r5, r1, r2, asr r4
 8001380:	68746977 	ldmdavs	r4!, {r0, r1, r2, r4, r5, r6, r8, fp, sp, lr}^
 8001384:	42535520 	subsmi	r5, r3, #32, 10	; 0x8000000
 8001388:	4c545420 	cfldrdmi	mvd5, [r4], {32}
 800138c:	62614320 	rsbvs	r4, r1, #32, 6	; 0x80000000
 8001390:	0a0d656c 	beq	835a948 <_siccmram+0x35958c>
 8001394:	00000000 	andeq	r0, r0, r0

Disassembly of section .data:

20000000 <AHBPrescTable>:
	...
20000008:	04030201 	streq	r0, [r3], #-513	; 0x201
2000000c:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}

20000010 <SystemCoreClock>:
20000010:	0aba9500 	beq	1eea5418 <_eccmram+0xeea5418>

20000014 <APBAHBPrescTable>:
20000014:	00000000 	andeq	r0, r0, r0
20000018:	04030201 	streq	r0, [r3], #-513	; 0x201
2000001c:	04030201 	streq	r0, [r3], #-513	; 0x201
20000020:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}

Disassembly of section ._user_heap_stack:

20000024 <._user_heap_stack>:
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002c41 	andeq	r2, r0, r1, asr #24
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000022 	andeq	r0, r0, r2, lsr #32
  10:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
  14:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
  18:	0600344d 	streq	r3, [r0], -sp, asr #8
  1c:	094d070d 	stmdbeq	sp, {r0, r2, r3, r8, r9, sl}^
  20:	17041202 	strne	r1, [r4, -r2, lsl #4]
  24:	1a011801 	bne	46030 <_Min_Stack_Size+0x45c30>
  28:	22021e01 	andcs	r1, r2, #1, 28
  2c:	Address 0x000000000000002c is out of bounds.


Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	0000083d 	andeq	r0, r0, sp, lsr r8
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	000000f8 	strdeq	r0, [r0], -r8
      10:	0004f901 	andeq	pc, r4, r1, lsl #18
      14:	00051b00 	andeq	r1, r5, r0, lsl #22
	...
      24:	06010200 	streq	r0, [r1], -r0, lsl #4
      28:	000002d3 	ldrdeq	r0, [r0], -r3
      2c:	00029703 	andeq	r9, r2, r3, lsl #14
      30:	371c0200 	ldrcc	r0, [ip, -r0, lsl #4]
      34:	02000000 	andeq	r0, r0, #0
      38:	02d10801 	sbcseq	r0, r1, #65536	; 0x10000
      3c:	02020000 	andeq	r0, r2, #0
      40:	00009505 	andeq	r9, r0, r5, lsl #10
      44:	006d0300 	rsbeq	r0, sp, r0, lsl #6
      48:	26020000 	strcs	r0, [r2], -r0
      4c:	00000050 	andeq	r0, r0, r0, asr r0
      50:	53070202 	movwpl	r0, #29186	; 0x7202
      54:	03000003 	movweq	r0, #3
      58:	000004ad 	andeq	r0, r0, sp, lsr #9
      5c:	00623702 	rsbeq	r3, r2, r2, lsl #14
      60:	04020000 	streq	r0, [r2], #-0
      64:	00023c05 	andeq	r3, r2, r5, lsl #24
      68:	00620300 	rsbeq	r0, r2, r0, lsl #6
      6c:	38020000 	stmdacc	r2, {}	; <UNPREDICTABLE>
      70:	00000074 	andeq	r0, r0, r4, ror r0
      74:	00070402 	andeq	r0, r7, r2, lsl #8
      78:	02000003 	andeq	r0, r0, #3
      7c:	02370508 	eorseq	r0, r7, #8, 10	; 0x2000000
      80:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      84:	0002fb07 	andeq	pc, r2, r7, lsl #22
      88:	05040400 	streq	r0, [r4, #-1024]	; 0x400
      8c:	00746e69 	rsbseq	r6, r4, r9, ror #28
      90:	05070402 	streq	r0, [r7, #-1026]	; 0x402
      94:	03000003 	movweq	r0, #3
      98:	00000299 	muleq	r0, r9, r2
      9c:	002c2a03 	eoreq	r2, ip, r3, lsl #20
      a0:	6f030000 	svcvs	0x00030000
      a4:	03000000 	movweq	r0, #0
      a8:	00004536 	andeq	r4, r0, r6, lsr r5
      ac:	04af0300 	strteq	r0, [pc], #768	; b4 <_Min_Heap_Size+0xb4>
      b0:	41030000 	mrsmi	r0, (UNDEF: 3)
      b4:	00000057 	andeq	r0, r0, r7, asr r0
      b8:	00006403 	andeq	r6, r0, r3, lsl #8
      bc:	69420300 	stmdbvs	r2, {r8, r9}^
      c0:	02000000 	andeq	r0, r0, #0
      c4:	00460704 	subeq	r0, r6, r4, lsl #14
      c8:	b8050000 	stmdalt	r5, {}	; <UNPREDICTABLE>
      cc:	06000000 	streq	r0, [r0], -r0
      d0:	000000b8 	strheq	r0, [r0], -r8
      d4:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
      d8:	0000c307 	andeq	ip, r0, r7, lsl #6
      dc:	05000100 	streq	r0, [r0, #-256]	; 0x100
      e0:	000000a2 	andeq	r0, r0, r2, lsr #1
      e4:	0000ad05 	andeq	sl, r0, r5, lsl #26
      e8:	04010800 	streq	r0, [r1], #-2048	; 0x800
      ec:	00ff01f7 	ldrshteq	r0, [pc], #23
      f0:	f0090000 			; <UNDEFINED> instruction: 0xf0090000
      f4:	00000009 	andeq	r0, r0, r9
      f8:	5445530a 	strbpl	r5, [r5], #-778	; 0x30a
      fc:	0b000100 	bleq	504 <_Min_Stack_Size+0x104>
     100:	00000f13 	andeq	r0, r0, r3, lsl pc
     104:	e901f704 	stmdb	r1, {r2, r8, r9, sl, ip, sp, lr, pc}
     108:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     10c:	01f90401 	mvnseq	r0, r1, lsl #8
     110:	00000121 	andeq	r0, r0, r1, lsr #2
     114:	0003c709 	andeq	ip, r3, r9, lsl #14
     118:	45090000 	strmi	r0, [r9, #-0]
     11c:	01000002 	tsteq	r0, r2
     120:	05000b00 	streq	r0, [r0, #-2816]	; 0xb00
     124:	f9040000 			; <UNDEFINED> instruction: 0xf9040000
     128:	00010b01 	andeq	r0, r1, r1, lsl #22
     12c:	04280c00 	strteq	r0, [r8], #-3072	; 0xc00
     130:	01b903d4 			; <UNDEFINED> instruction: 0x01b903d4
     134:	910d0000 	mrsls	r0, (UNDEF: 13)
     138:	04000002 	streq	r0, [r0], #-2
     13c:	00ca03d6 	ldrdeq	r0, [sl], #54	; 0x36
     140:	0d000000 	stceq	0, cr0, [r0, #-0]
     144:	00000219 	andeq	r0, r0, r9, lsl r2
     148:	ca03d704 	bgt	f5d60 <_Min_Stack_Size+0xf5960>
     14c:	04000000 	streq	r0, [r0], #-0
     150:	00022f0d 	andeq	r2, r2, sp, lsl #30
     154:	03d80400 	bicseq	r0, r8, #0, 8
     158:	000000ca 	andeq	r0, r0, sl, asr #1
     15c:	025a0d08 	subseq	r0, sl, #8, 26	; 0x200
     160:	d9040000 	stmdble	r4, {}	; <UNPREDICTABLE>
     164:	0000ca03 	andeq	ip, r0, r3, lsl #20
     168:	490e0c00 	stmdbmi	lr, {sl, fp}
     16c:	04005244 	streq	r5, [r0], #-580	; 0x244
     170:	00ca03da 	ldrdeq	r0, [sl], #58	; 0x3a
     174:	0e100000 	cdpeq	0, 1, cr0, cr0, cr0, {0}
     178:	0052444f 	subseq	r4, r2, pc, asr #8
     17c:	ca03db04 	bgt	f6d94 <_Min_Stack_Size+0xf6994>
     180:	14000000 	strne	r0, [r0], #-0
     184:	0005100d 	andeq	r1, r5, sp
     188:	03dc0400 	bicseq	r0, ip, #0, 8
     18c:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     190:	02790d18 	rsbseq	r0, r9, #24, 26	; 0x600
     194:	dd040000 	stcle	0, cr0, [r4, #-0]
     198:	0000df03 	andeq	sp, r0, r3, lsl #30
     19c:	160d1a00 	strne	r1, [sp], -r0, lsl #20
     1a0:	04000005 	streq	r0, [r0], #-5
     1a4:	00ca03de 	ldrdeq	r0, [sl], #62	; 0x3e
     1a8:	0e1c0000 	cdpeq	0, 1, cr0, cr12, cr0, {0}
     1ac:	00524641 	subseq	r4, r2, r1, asr #12
     1b0:	b903df04 	stmdblt	r3, {r2, r8, r9, sl, fp, ip, lr, pc}
     1b4:	20000001 	andcs	r0, r0, r1
     1b8:	00cf0500 	sbceq	r0, pc, r0, lsl #10
     1bc:	000b0000 	andeq	r0, fp, r0
     1c0:	04000000 	streq	r0, [r0], #-0
     1c4:	012d03e0 	smulwteq	sp, r0, r3
     1c8:	1c0c0000 	stcne	0, cr0, [ip], {-0}
     1cc:	88052604 	stmdahi	r5, {r2, r9, sl, sp}
     1d0:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
     1d4:	04005253 	streq	r5, [r0], #-595	; 0x253
     1d8:	00df0528 	sbcseq	r0, pc, r8, lsr #10
     1dc:	0d000000 	stceq	0, cr0, [r0, #-0]
     1e0:	000003f5 	strdeq	r0, [r0], -r5
     1e4:	a2052904 	andge	r2, r5, #4, 18	; 0x10000
     1e8:	02000000 	andeq	r0, r0, #0
     1ec:	0052440e 	subseq	r4, r2, lr, lsl #8
     1f0:	df052a04 	svcle	0x00052a04
     1f4:	04000000 	streq	r0, [r0], #-0
     1f8:	0003ff0d 	andeq	pc, r3, sp, lsl #30
     1fc:	052b0400 	streq	r0, [fp, #-1024]!	; 0x400
     200:	000000a2 	andeq	r0, r0, r2, lsr #1
     204:	52420e06 	subpl	r0, r2, #6, 28	; 0x60
     208:	2c040052 	stccs	0, cr0, [r4], {82}	; 0x52
     20c:	0000df05 	andeq	sp, r0, r5, lsl #30
     210:	090d0800 	stmdbeq	sp, {fp}
     214:	04000004 	streq	r0, [r0], #-4
     218:	00a2052d 	adceq	r0, r2, sp, lsr #10
     21c:	0e0a0000 	cdpeq	0, 0, cr0, cr10, cr0, {0}
     220:	00315243 	eorseq	r5, r1, r3, asr #4
     224:	df052e04 	svcle	0x00052e04
     228:	0c000000 	stceq	0, cr0, [r0], {-0}
     22c:	0004130d 	andeq	r1, r4, sp, lsl #6
     230:	052f0400 	streq	r0, [pc, #-1024]!	; fffffe38 <_estack+0xdffcfe38>
     234:	000000a2 	andeq	r0, r0, r2, lsr #1
     238:	52430e0e 	subpl	r0, r3, #14, 28	; 0xe0
     23c:	30040032 	andcc	r0, r4, r2, lsr r0
     240:	0000df05 	andeq	sp, r0, r5, lsl #30
     244:	1d0d1000 	stcne	0, cr1, [sp, #-0]
     248:	04000004 	streq	r0, [r0], #-4
     24c:	00a20531 	adceq	r0, r2, r1, lsr r5
     250:	0e120000 	cdpeq	0, 1, cr0, cr2, cr0, {0}
     254:	00335243 	eorseq	r5, r3, r3, asr #4
     258:	df053204 	svcle	0x00053204
     25c:	14000000 	strne	r0, [r0], #-0
     260:	0004270d 	andeq	r2, r4, sp, lsl #14
     264:	05330400 	ldreq	r0, [r3, #-1024]!	; 0x400
     268:	000000a2 	andeq	r0, r0, r2, lsr #1
     26c:	02cc0d16 	sbceq	r0, ip, #1408	; 0x580
     270:	34040000 	strcc	r0, [r4], #-0
     274:	0000df05 	andeq	sp, r0, r5, lsl #30
     278:	310d1800 	tstcc	sp, r0, lsl #16
     27c:	04000004 	streq	r0, [r0], #-4
     280:	00a20535 	adceq	r0, r2, r5, lsr r5
     284:	001a0000 	andseq	r0, sl, r0
     288:	0000780b 	andeq	r7, r0, fp, lsl #16
     28c:	05360400 	ldreq	r0, [r6, #-1024]!	; 0x400
     290:	000001ca 	andeq	r0, r0, sl, asr #3
     294:	4205010f 	andmi	r0, r5, #-1073741821	; 0xc0000003
     298:	000002b5 			; <UNDEFINED> instruction: 0x000002b5
     29c:	00026009 	andeq	r6, r2, r9
     2a0:	4c090000 	stcmi	0, cr0, [r9], {-0}
     2a4:	01000002 	tsteq	r0, r2
     2a8:	0000aa09 	andeq	sl, r0, r9, lsl #20
     2ac:	da090200 	ble	240ab4 <_Min_Stack_Size+0x2406b4>
     2b0:	03000000 	movweq	r0, #0
     2b4:	002a0300 	eoreq	r0, sl, r0, lsl #6
     2b8:	47050000 	strmi	r0, [r5, -r0]
     2bc:	00000294 	muleq	r0, r4, r2
     2c0:	4f05010f 	svcmi	0x0005010f
     2c4:	000002d5 	ldrdeq	r0, [r0], -r5
     2c8:	0002b109 	andeq	fp, r2, r9, lsl #2
     2cc:	4f090000 	svcmi	0x00090000
     2d0:	01000000 	mrseq	r0, (UNDEF: 0)
     2d4:	02070300 	andeq	r0, r7, #0, 6
     2d8:	52050000 	andpl	r0, r5, #0
     2dc:	000002c0 	andeq	r0, r0, r0, asr #5
     2e0:	5a05010f 	bpl	140724 <_Min_Stack_Size+0x140324>
     2e4:	00000301 	andeq	r0, r0, r1, lsl #6
     2e8:	0003cf09 	andeq	ip, r3, r9, lsl #30
     2ec:	e9090000 	stmdb	r9, {}	; <UNPREDICTABLE>
     2f0:	01000002 	tsteq	r0, r2
     2f4:	0003a209 	andeq	sl, r3, r9, lsl #4
     2f8:	a1090200 	mrsge	r0, R9_fiq
     2fc:	03000002 	movweq	r0, #2
     300:	04470300 	strbeq	r0, [r7], #-768	; 0x300
     304:	5f050000 	svcpl	0x00050000
     308:	000002e0 	andeq	r0, r0, r0, ror #5
     30c:	6e05010f 	adfvss	f0, f5, #10.0
     310:	00000327 	andeq	r0, r0, r7, lsr #6
     314:	00047509 	andeq	r7, r4, r9, lsl #10
     318:	db090000 	blle	240320 <_Min_Stack_Size+0x23ff20>
     31c:	01000004 	tsteq	r0, r4
     320:	00045909 	andeq	r5, r4, r9, lsl #18
     324:	03000200 	movweq	r0, #512	; 0x200
     328:	000004ca 	andeq	r0, r0, sl, asr #9
     32c:	030c7205 	movweq	r7, #49669	; 0xc205
     330:	08100000 	ldmdaeq	r0, {}	; <UNPREDICTABLE>
     334:	03778405 	cmneq	r7, #83886080	; 0x5000000
     338:	0d110000 	ldceq	0, cr0, [r1, #-0]
     33c:	05000000 	streq	r0, [r0, #-0]
     340:	0000b886 	andeq	fp, r0, r6, lsl #17
     344:	62110000 	andsvs	r0, r1, #0
     348:	05000005 	streq	r0, [r0, #-5]
     34c:	0002b589 	andeq	fp, r2, r9, lsl #11
     350:	48110400 	ldmdami	r1, {sl}
     354:	05000003 	streq	r0, [r0, #-3]
     358:	0003018c 	andeq	r0, r3, ip, lsl #3
     35c:	9f110500 	svcls	0x00110500
     360:	05000000 	streq	r0, [r0, #-0]
     364:	0002d58f 	andeq	sp, r2, pc, lsl #11
     368:	df110600 	svcle	0x00110600
     36c:	05000002 	streq	r0, [r0, #-2]
     370:	00032792 	muleq	r3, r2, r7
     374:	03000700 	movweq	r0, #1792	; 0x700
     378:	00000325 	andeq	r0, r0, r5, lsr #6
     37c:	03329405 	teqeq	r2, #83886080	; 0x5000000
     380:	10100000 	andsne	r0, r0, r0
     384:	03d33606 	bicseq	r3, r3, #6291456	; 0x600000
     388:	20110000 	andscs	r0, r1, r0
     38c:	06000002 	streq	r0, [r0], -r2
     390:	0000b838 	andeq	fp, r0, r8, lsr r8
     394:	e7110000 	ldr	r0, [r1, -r0]
     398:	06000000 	streq	r0, [r0], -r0
     39c:	0000a23e 	andeq	sl, r0, lr, lsr r2
     3a0:	86110400 	ldrhi	r0, [r1], -r0, lsl #8
     3a4:	06000000 	streq	r0, [r0], -r0
     3a8:	0000a241 	andeq	sl, r0, r1, asr #4
     3ac:	bf110600 	svclt	0x00110600
     3b0:	06000002 	streq	r0, [r0], -r2
     3b4:	0000a244 	andeq	sl, r0, r4, asr #4
     3b8:	97110800 	ldrls	r0, [r1, -r0, lsl #16]
     3bc:	06000003 	streq	r0, [r0], -r3
     3c0:	0000a24b 	andeq	sl, r0, fp, asr #4
     3c4:	66110a00 	ldrvs	r0, [r1], -r0, lsl #20
     3c8:	06000003 	streq	r0, [r0], -r3
     3cc:	0000a24e 	andeq	sl, r0, lr, asr #4
     3d0:	03000c00 	movweq	r0, #3072	; 0xc00
     3d4:	00000336 	andeq	r0, r0, r6, lsr r3
     3d8:	03825106 	orreq	r5, r2, #-2147483647	; 0x80000001
     3dc:	6d120000 	ldcvs	0, cr0, [r2, #-0]
     3e0:	01000002 	tsteq	r0, r2
     3e4:	3b130156 	blcc	4c0944 <_Min_Stack_Size+0x4c0544>
     3e8:	01000004 	tsteq	r0, r4
     3ec:	03fc0174 	mvnseq	r0, #116, 2
     3f0:	73140000 	tstvc	r4, #0
     3f4:	fc740100 	ldc2l	1, cr0, [r4], #-0
     3f8:	00000003 	andeq	r0, r0, r3
     3fc:	04020415 	streq	r0, [r2], #-1045	; 0x415
     400:	01020000 	mrseq	r0, (UNDEF: 2)
     404:	0002da08 	andeq	sp, r2, r8, lsl #20
     408:	027f1600 	rsbseq	r1, pc, #0, 12
     40c:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
     410:	080001c0 	stmdaeq	r0, {r6, r7, r8}
     414:	00000016 	andeq	r0, r0, r6, lsl r0
     418:	044b9c01 	strbeq	r9, [fp], #-3073	; 0xc01
     41c:	ca170000 	bgt	5c0424 <_Min_Stack_Size+0x5c0024>
     420:	6b080001 	blvs	20042c <_Min_Stack_Size+0x20002c>
     424:	36000007 	strcc	r0, [r0], -r7
     428:	18000004 	stmdane	r0, {r2}
     42c:	31015101 	tstcc	r1, r1, lsl #2
     430:	01500118 	cmpeq	r0, r8, lsl r1
     434:	d6190040 	ldrle	r0, [r9], -r0, asr #32
     438:	82080001 	andhi	r0, r8, #1
     43c:	18000007 	stmdane	r0, {r0, r1, r2}
     440:	31015101 	tstcc	r1, r1, lsl #2
     444:	01500118 	cmpeq	r0, r8, lsl r1
     448:	16000031 			; <UNDEFINED> instruction: 0x16000031
     44c:	00000312 	andeq	r0, r0, r2, lsl r3
     450:	01d83301 	bicseq	r3, r8, r1, lsl #6
     454:	00440800 	subeq	r0, r4, r0, lsl #16
     458:	9c010000 	stcls	0, cr0, [r1], {-0}
     45c:	000004c1 	andeq	r0, r0, r1, asr #9
     460:	00049a1a 	andeq	r9, r4, sl, lsl sl
     464:	77350100 	ldrvc	r0, [r5, -r0, lsl #2]!
     468:	02000003 	andeq	r0, r0, #3
     46c:	00176891 	mulseq	r7, r1, r8
     470:	99080002 	stmdbls	r8, {r1}
     474:	88000007 	stmdahi	r0, {r0, r1, r2}
     478:	18000004 	stmdane	r0, {r2}
     47c:	7d025101 	stfvcs	f5, [r2, #-4]
     480:	50011800 	andpl	r1, r1, r0, lsl #16
     484:	00007402 	andeq	r7, r0, r2, lsl #8
     488:	00020a17 	andeq	r0, r2, r7, lsl sl
     48c:	0007bc08 	andeq	fp, r7, r8, lsl #24
     490:	0004a600 	andeq	sl, r4, r0, lsl #12
     494:	52011800 	andpl	r1, r1, #0, 16
     498:	01183701 	tsteq	r8, r1, lsl #14
     49c:	18390151 	ldmdane	r9!, {r0, r4, r6, r8}
     4a0:	74025001 	strvc	r5, [r2], #-1
     4a4:	141b0000 	ldrne	r0, [fp], #-0
     4a8:	bc080002 	stclt	0, cr0, [r8], {2}
     4ac:	18000007 	stmdane	r0, {r0, r1, r2}
     4b0:	37015201 	strcc	r5, [r1, -r1, lsl #4]
     4b4:	01510118 	cmpeq	r1, r8, lsl r1
     4b8:	5001183a 	andpl	r1, r1, sl, lsr r8
     4bc:	00007402 	andeq	r7, r0, r2, lsl #8
     4c0:	04b71600 	ldrteq	r1, [r7], #1536	; 0x600
     4c4:	46010000 	strmi	r0, [r1], -r0
     4c8:	0800021c 	stmdaeq	r0, {r2, r3, r4, r9}
     4cc:	00000038 	andeq	r0, r0, r8, lsr r0
     4d0:	05179c01 	ldreq	r9, [r7, #-3073]	; 0xc01
     4d4:	9a1a0000 	bls	6804dc <_Min_Stack_Size+0x6800dc>
     4d8:	01000004 	tsteq	r0, r4
     4dc:	00037748 	andeq	r7, r3, r8, asr #14
     4e0:	70910200 	addsvc	r0, r1, r0, lsl #4
     4e4:	00022817 	andeq	r2, r2, r7, lsl r8
     4e8:	00078208 	andeq	r8, r7, r8, lsl #4
     4ec:	0004fd00 	andeq	pc, r4, r0, lsl #26
     4f0:	51011800 	tstpl	r1, r0, lsl #16
     4f4:	01183101 	tsteq	r8, r1, lsl #2
     4f8:	40080250 	andmi	r0, r8, r0, asr r2
     4fc:	024c1b00 	subeq	r1, ip, #0, 22
     500:	07990800 	ldreq	r0, [r9, r0, lsl #16]
     504:	01180000 	tsteq	r8, r0
     508:	007d0251 	rsbseq	r0, sp, r1, asr r2
     50c:	05500118 	ldrbeq	r0, [r0, #-280]	; 0x118
     510:	0218000c 	andseq	r0, r8, #12
     514:	1c000040 	stcne	0, cr0, [r0], {64}	; 0x40
     518:	000003de 	ldrdeq	r0, [r0], -lr
     51c:	08000254 	stmdaeq	r0, {r2, r4, r6, r9}
     520:	00000010 	andeq	r0, r0, r0, lsl r0
     524:	b2169c01 	andslt	r9, r6, #256	; 0x100
     528:	01000003 	tsteq	r0, r3
     52c:	0002645d 	andeq	r6, r2, sp, asr r4
     530:	00003c08 	andeq	r3, r0, r8, lsl #24
     534:	799c0100 	ldmibvc	ip, {r8}
     538:	1a000005 	bne	554 <_Min_Stack_Size+0x154>
     53c:	00000016 	andeq	r0, r0, r6, lsl r0
     540:	03d35f01 	bicseq	r5, r3, #1, 30
     544:	91020000 	mrsls	r0, (UNDEF: 2)
     548:	02901760 	addseq	r1, r0, #96, 14	; 0x1800000
     54c:	07d80800 	ldrbeq	r0, [r8, r0, lsl #16]
     550:	05630000 	strbeq	r0, [r3, #-0]!
     554:	01180000 	tsteq	r8, r0
     558:	007d0251 	rsbseq	r0, sp, r1, asr r2
     55c:	02500118 	subseq	r0, r0, #24, 2
     560:	1b000074 	blne	738 <_Min_Stack_Size+0x338>
     564:	08000298 	stmdaeq	r0, {r3, r4, r7, r9}
     568:	000007fb 	strdeq	r0, [r0], -fp
     56c:	01510118 	cmpeq	r1, r8, lsl r1
     570:	50011831 	andpl	r1, r1, r1, lsr r8
     574:	00007402 	andeq	r7, r0, r2, lsl #8
     578:	03e61d00 	mvneq	r1, #0, 26
     57c:	02a00000 	adceq	r0, r0, #0
     580:	002c0800 	eoreq	r0, ip, r0, lsl #16
     584:	9c010000 	stcls	0, cr0, [r1], {-0}
     588:	000005c6 	andeq	r0, r0, r6, asr #11
     58c:	0003f21e 	andeq	pc, r3, lr, lsl r2	; <UNPREDICTABLE>
     590:	00000000 	andeq	r0, r0, r0
     594:	02b01700 	adcseq	r1, r0, #0, 14
     598:	08120800 	ldmdaeq	r2, {fp}
     59c:	05b20000 	ldreq	r0, [r2, #0]!
     5a0:	01180000 	tsteq	r8, r0
     5a4:	80080251 	andhi	r0, r8, r1, asr r2
     5a8:	05500118 	ldrbeq	r0, [r0, #-280]	; 0x118
     5ac:	0110000c 	tsteq	r0, ip
     5b0:	be1b0040 	cdplt	0, 1, cr0, cr11, cr0, {2}
     5b4:	2d080002 	stccs	0, cr0, [r8, #-8]
     5b8:	18000008 	stmdane	r0, {r3}
     5bc:	0c055001 	stceq	0, cr5, [r5], {1}
     5c0:	40011000 	andmi	r1, r1, r0
     5c4:	5d1f0000 	ldcpl	0, cr0, [pc, #-0]	; 5cc <_Min_Stack_Size+0x1cc>
     5c8:	01000000 	mrseq	r0, (UNDEF: 0)
     5cc:	0000897e 	andeq	r8, r0, lr, ror r9
     5d0:	0002cc00 	andeq	ip, r2, r0, lsl #24
     5d4:	0000b008 	andeq	fp, r0, r8
     5d8:	5f9c0100 	svcpl	0x009c0100
     5dc:	20000007 	andcs	r0, r0, r7
     5e0:	000003e6 	andeq	r0, r0, r6, ror #7
     5e4:	080002e0 	stmdaeq	r0, {r5, r6, r7, r9}
     5e8:	00000020 	andeq	r0, r0, r0, lsr #32
     5ec:	06328401 	ldrteq	r8, [r2], -r1, lsl #8
     5f0:	f21e0000 	vhadd.s16	d0, d14, d0
     5f4:	20000003 	andcs	r0, r0, r3
     5f8:	17000000 	strne	r0, [r0, -r0]
     5fc:	080002ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r9}
     600:	00000812 	andeq	r0, r0, r2, lsl r8
     604:	00000618 	andeq	r0, r0, r8, lsl r6
     608:	02510118 	subseq	r0, r1, #24, 2
     60c:	01188008 	tsteq	r8, r8
     610:	000c0550 	andeq	r0, ip, r0, asr r5
     614:	00400110 	subeq	r0, r0, r0, lsl r1
     618:	0002f61b 	andeq	pc, r2, fp, lsl r6	; <UNPREDICTABLE>
     61c:	00082d08 	andeq	r2, r8, r8, lsl #26
     620:	51011800 	tstpl	r1, r0, lsl #16
     624:	18007402 	stmdane	r0, {r1, sl, ip, sp, lr}
     628:	0c055001 	stceq	0, cr5, [r5], {1}
     62c:	40011000 	andmi	r1, r1, r0
     630:	e6200000 	strt	r0, [r0], -r0
     634:	00000003 	andeq	r0, r0, r3
     638:	1e080003 	cdpne	0, 0, cr0, cr8, cr3, {0}
     63c:	01000000 	mrseq	r0, (UNDEF: 0)
     640:	00068585 	andeq	r8, r6, r5, lsl #11
     644:	03f21e00 	mvnseq	r1, #0, 28
     648:	00500000 	subseq	r0, r0, r0
     64c:	0a170000 	beq	5c0654 <_Min_Stack_Size+0x5c0254>
     650:	12080003 	andne	r0, r8, #3
     654:	6b000008 	blvs	67c <_Min_Stack_Size+0x27c>
     658:	18000006 	stmdane	r0, {r1, r2}
     65c:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
     660:	50011880 	andpl	r1, r1, r0, lsl #17
     664:	10000c05 	andne	r0, r0, r5, lsl #24
     668:	1b004001 	blne	10674 <_Min_Stack_Size+0x10274>
     66c:	08000316 	stmdaeq	r0, {r1, r2, r4, r8, r9}
     670:	0000082d 	andeq	r0, r0, sp, lsr #16
     674:	02510118 	subseq	r0, r1, #24, 2
     678:	01180074 	tsteq	r8, r4, ror r0
     67c:	000c0550 	andeq	r0, ip, r0, asr r5
     680:	00400110 	subeq	r0, r0, r0, lsl r1
     684:	03de2100 	bicseq	r2, lr, #0, 2
     688:	031e0000 	tsteq	lr, #0
     68c:	000c0800 	andeq	r0, ip, r0, lsl #16
     690:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
     694:	0003e620 	andeq	lr, r3, r0, lsr #12
     698:	00032a00 	andeq	r2, r3, r0, lsl #20
     69c:	00002008 	andeq	r2, r0, r8
     6a0:	e7960100 	ldr	r0, [r6, r0, lsl #2]
     6a4:	1e000006 	cdpne	0, 0, cr0, cr0, cr6, {0}
     6a8:	000003f2 	strdeq	r0, [r0], -r2
     6ac:	00000070 	andeq	r0, r0, r0, ror r0
     6b0:	00033417 	andeq	r3, r3, r7, lsl r4
     6b4:	00081208 	andeq	r1, r8, r8, lsl #4
     6b8:	0006cd00 	andeq	ip, r6, r0, lsl #26
     6bc:	51011800 	tstpl	r1, r0, lsl #16
     6c0:	18800802 	stmne	r0, {r1, fp}
     6c4:	0c055001 	stceq	0, cr5, [r5], {1}
     6c8:	40011000 	andmi	r1, r1, r0
     6cc:	03401b00 	movteq	r1, #2816	; 0xb00
     6d0:	082d0800 	stmdaeq	sp!, {fp}
     6d4:	01180000 	tsteq	r8, r0
     6d8:	00740251 	rsbseq	r0, r4, r1, asr r2
     6dc:	05500118 	ldrbeq	r0, [r0, #-280]	; 0x118
     6e0:	0110000c 	tsteq	r0, ip
     6e4:	20000040 	andcs	r0, r0, r0, asr #32
     6e8:	000003e6 	andeq	r0, r0, r6, ror #7
     6ec:	0800034a 	stmdaeq	r0, {r1, r3, r6, r8, r9}
     6f0:	00000032 	andeq	r0, r0, r2, lsr r0
     6f4:	073a9701 	ldreq	r9, [sl, -r1, lsl #14]!
     6f8:	f21e0000 	vhadd.s16	d0, d14, d0
     6fc:	a0000003 	andge	r0, r0, r3
     700:	17000000 	strne	r0, [r0, -r0]
     704:	08000354 	stmdaeq	r0, {r2, r4, r6, r8, r9}
     708:	00000812 	andeq	r0, r0, r2, lsl r8
     70c:	00000720 	andeq	r0, r0, r0, lsr #14
     710:	02510118 	subseq	r0, r1, #24, 2
     714:	01188008 	tsteq	r8, r8
     718:	000c0550 	andeq	r0, ip, r0, asr r5
     71c:	00400110 	subeq	r0, r0, r0, lsl r1
     720:	0003601b 	andeq	r6, r3, fp, lsl r0
     724:	00082d08 	andeq	r2, r8, r8, lsl #26
     728:	51011800 	tstpl	r1, r0, lsl #16
     72c:	18007402 	stmdane	r0, {r1, sl, ip, sp, lr}
     730:	0c055001 	stceq	0, cr5, [r5], {1}
     734:	40011000 	andmi	r1, r1, r0
     738:	d2220000 	eorle	r0, r2, #0
     73c:	09080002 	stmdbeq	r8, {r1}
     740:	22000004 	andcs	r0, r0, #4
     744:	080002d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r9}
     748:	0000044b 	andeq	r0, r0, fp, asr #8
     74c:	0002da22 	andeq	sp, r2, r2, lsr #20
     750:	00052608 	andeq	r2, r5, r8, lsl #12
     754:	02de2200 	sbcseq	r2, lr, #0, 4
     758:	04c10800 	strbeq	r0, [r1], #2048	; 0x800
     75c:	23000000 	movwcs	r0, #0
     760:	00000468 	andeq	r0, r0, r8, ror #8
     764:	e406a708 	str	sl, [r6], #-1800	; 0x708
     768:	24000000 	strcs	r0, [r0], #-0
     76c:	000003de 	ldrdeq	r0, [r0], -lr
     770:	82024407 	andhi	r4, r2, #117440512	; 0x7000000
     774:	25000007 	strcs	r0, [r0, #-7]
     778:	000000b8 	strheq	r0, [r0], -r8
     77c:	00012125 	andeq	r2, r1, r5, lsr #2
     780:	80240000 	eorhi	r0, r4, r0
     784:	07000003 	streq	r0, [r0, -r3]
     788:	07990240 	ldreq	r0, [r9, r0, asr #4]
     78c:	b8250000 	stmdalt	r5!, {}	; <UNPREDICTABLE>
     790:	25000000 	strcs	r0, [r0, #-0]
     794:	00000121 	andeq	r0, r0, r1, lsr #2
     798:	00d02400 	sbcseq	r2, r0, r0, lsl #8
     79c:	c9050000 	stmdbgt	r5, {}	; <UNPREDICTABLE>
     7a0:	0007b001 	andeq	fp, r7, r1
     7a4:	07b02500 	ldreq	r2, [r0, r0, lsl #10]!
     7a8:	b6250000 	strtlt	r0, [r5], -r0
     7ac:	00000007 	andeq	r0, r0, r7
     7b0:	01be0415 			; <UNDEFINED> instruction: 0x01be0415
     7b4:	04150000 	ldreq	r0, [r5], #-0
     7b8:	00000377 	andeq	r0, r0, r7, ror r3
     7bc:	0004e824 	andeq	lr, r4, r4, lsr #16
     7c0:	01d90500 	bicseq	r0, r9, r0, lsl #10
     7c4:	000007d8 	ldrdeq	r0, [r0], -r8
     7c8:	0007b025 	andeq	fp, r7, r5, lsr #32
     7cc:	00a22500 	adceq	r2, r2, r0, lsl #10
     7d0:	97250000 	strls	r0, [r5, -r0]!
     7d4:	00000000 	andeq	r0, r0, r0
     7d8:	00003b24 	andeq	r3, r0, r4, lsr #22
     7dc:	01740600 	cmneq	r4, r0, lsl #12
     7e0:	000007ef 	andeq	r0, r0, pc, ror #15
     7e4:	0007ef25 	andeq	lr, r7, r5, lsr #30
     7e8:	07f52500 	ldrbeq	r2, [r5, r0, lsl #10]!
     7ec:	15000000 	strne	r0, [r0, #-0]
     7f0:	00028804 	andeq	r8, r2, r4, lsl #16
     7f4:	d3041500 	movwle	r1, #17664	; 0x4500
     7f8:	24000003 	strcs	r0, [r0], #-3
     7fc:	000000b7 	strheq	r0, [r0], -r7
     800:	12017806 	andne	r7, r1, #393216	; 0x60000
     804:	25000008 	strcs	r0, [r0, #-8]
     808:	000007ef 	andeq	r0, r0, pc, ror #15
     80c:	00012125 	andeq	r2, r1, r5, lsr #2
     810:	86260000 	strthi	r0, [r6], -r0
     814:	06000004 	streq	r0, [r0], -r4
     818:	00ff019c 	smlalseq	r0, pc, ip, r1	; <UNPREDICTABLE>
     81c:	082d0000 	stmdaeq	sp!, {}	; <UNPREDICTABLE>
     820:	ef250000 	svc	0x00250000
     824:	25000007 	strcs	r0, [r0, #-7]
     828:	000000a2 	andeq	r0, r0, r2, lsr #1
     82c:	00c12700 	sbceq	r2, r1, r0, lsl #14
     830:	7e060000 	cdpvc	0, 0, cr0, cr6, cr0, {0}
     834:	07ef2501 	strbeq	r2, [pc, r1, lsl #10]!
     838:	a2250000 	eorge	r0, r5, #0
     83c:	00000000 	andeq	r0, r0, r0
     840:	00012f00 	andeq	r2, r1, r0, lsl #30
     844:	28000400 	stmdacs	r0, {sl}
     848:	04000002 	streq	r0, [r0], #-2
     84c:	0000f801 	andeq	pc, r0, r1, lsl #16
     850:	05b10100 	ldreq	r0, [r1, #256]!	; 0x100
     854:	051b0000 	ldreq	r0, [fp, #-0]
     858:	00400000 	subeq	r0, r0, r0
     85c:	00000000 	andeq	r0, r0, r0
     860:	02300000 	eorseq	r0, r0, #0
     864:	01020000 	mrseq	r0, (UNDEF: 2)
     868:	0002d306 	andeq	sp, r2, r6, lsl #6
     86c:	08010200 	stmdaeq	r1, {r9}
     870:	000002d1 	ldrdeq	r0, [r0], -r1
     874:	95050202 	strls	r0, [r5, #-514]	; 0x202
     878:	02000000 	andeq	r0, r0, #0
     87c:	03530702 	cmpeq	r3, #524288	; 0x80000
     880:	ad030000 	stcge	0, cr0, [r3, #-0]
     884:	02000004 	andeq	r0, r0, #4
     888:	00004c37 	andeq	r4, r0, r7, lsr ip
     88c:	05040200 	streq	r0, [r4, #-512]	; 0x200
     890:	0000023c 	andeq	r0, r0, ip, lsr r2
     894:	00070402 	andeq	r0, r7, r2, lsl #8
     898:	02000003 	andeq	r0, r0, #3
     89c:	02370508 	eorseq	r0, r7, #8, 10	; 0x2000000
     8a0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     8a4:	0002fb07 	andeq	pc, r2, r7, lsl #22
     8a8:	05040400 	streq	r0, [r4, #-1024]	; 0x400
     8ac:	00746e69 	rsbseq	r6, r4, r9, ror #28
     8b0:	05070402 	streq	r0, [r7, #-1026]	; 0x402
     8b4:	03000003 	movweq	r0, #3
     8b8:	000004af 	andeq	r0, r0, pc, lsr #9
     8bc:	00414103 	subeq	r4, r1, r3, lsl #2
     8c0:	04020000 	streq	r0, [r2], #-0
     8c4:	00004607 	andeq	r4, r0, r7, lsl #12
     8c8:	00760500 	rsbseq	r0, r6, r0, lsl #10
     8cc:	d2060000 	andle	r0, r6, #0
     8d0:	01000005 	tsteq	r0, r5
     8d4:	00037c36 	andeq	r7, r3, r6, lsr ip
     8d8:	00000208 	andeq	r0, r0, r8, lsl #4
     8dc:	069c0100 	ldreq	r0, [ip], r0, lsl #2
     8e0:	000005c0 	andeq	r0, r0, r0, asr #11
     8e4:	03803f01 	orreq	r3, r0, #1, 30
     8e8:	00020800 	andeq	r0, r2, r0, lsl #16
     8ec:	9c010000 	stcls	0, cr0, [r1], {-0}
     8f0:	00056c06 	andeq	r6, r5, r6, lsl #24
     8f4:	844c0100 	strbhi	r0, [ip], #-256	; 0x100
     8f8:	02080003 	andeq	r0, r8, #3
     8fc:	01000000 	mrseq	r0, (UNDEF: 0)
     900:	05a0069c 	streq	r0, [r0, #1692]!	; 0x69c
     904:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
     908:	08000388 	stmdaeq	r0, {r3, r7, r8, r9}
     90c:	00000002 	andeq	r0, r0, r2
     910:	8d069c01 	stchi	12, cr9, [r6, #-4]
     914:	01000005 	tsteq	r0, r5
     918:	00038c66 	andeq	r8, r3, r6, ror #24
     91c:	00000208 	andeq	r0, r0, r8, lsl #4
     920:	069c0100 	ldreq	r0, [ip], r0, lsl #2
     924:	000005ee 	andeq	r0, r0, lr, ror #11
     928:	03907301 	orrseq	r7, r0, #67108864	; 0x4000000
     92c:	00020800 	andeq	r0, r2, r0, lsl #16
     930:	9c010000 	stcls	0, cr0, [r1], {-0}
     934:	0005fa06 	andeq	pc, r5, r6, lsl #20
     938:	947c0100 	ldrbtls	r0, [ip], #-256	; 0x100
     93c:	02080003 	andeq	r0, r8, #3
     940:	01000000 	mrseq	r0, (UNDEF: 0)
     944:	057e069c 	ldrbeq	r0, [lr, #-1692]!	; 0x69c
     948:	85010000 	strhi	r0, [r1, #-0]
     94c:	08000398 	stmdaeq	r0, {r3, r4, r7, r8, r9}
     950:	00000002 	andeq	r0, r0, r2
     954:	de069c01 	cdple	12, 0, cr9, cr6, cr1, {0}
     958:	01000005 	tsteq	r0, r5
     95c:	00039c8e 	andeq	r9, r3, lr, lsl #25
     960:	00000208 	andeq	r0, r0, r8, lsl #4
     964:	079c0100 	ldreq	r0, [ip, r0, lsl #2]
     968:	00000468 	andeq	r0, r0, r8, ror #8
     96c:	8806a704 	stmdahi	r6, {r2, r8, r9, sl, sp, pc}
     970:	00000000 	andeq	r0, r0, r0
     974:	000005da 	ldrdeq	r0, [r0], -sl
     978:	028f0004 	addeq	r0, pc, #4
     97c:	01040000 	mrseq	r0, (UNDEF: 4)
     980:	000000f8 	strdeq	r0, [r0], -r8
     984:	00078601 	andeq	r8, r7, r1, lsl #12
     988:	00051b00 	andeq	r1, r5, r0, lsl #22
     98c:	0000a800 	andeq	sl, r0, r0, lsl #16
     990:	00000000 	andeq	r0, r0, r0
     994:	00037500 	andeq	r7, r3, r0, lsl #10
     998:	06010200 	streq	r0, [r1], -r0, lsl #4
     99c:	000002d3 	ldrdeq	r0, [r0], -r3
     9a0:	00029703 	andeq	r9, r2, r3, lsl #14
     9a4:	371c0200 	ldrcc	r0, [ip, -r0, lsl #4]
     9a8:	02000000 	andeq	r0, r0, #0
     9ac:	02d10801 	sbcseq	r0, r1, #65536	; 0x10000
     9b0:	02020000 	andeq	r0, r2, #0
     9b4:	00009505 	andeq	r9, r0, r5, lsl #10
     9b8:	006d0300 	rsbeq	r0, sp, r0, lsl #6
     9bc:	26020000 	strcs	r0, [r2], -r0
     9c0:	00000050 	andeq	r0, r0, r0, asr r0
     9c4:	53070202 	movwpl	r0, #29186	; 0x7202
     9c8:	03000003 	movweq	r0, #3
     9cc:	000004ad 	andeq	r0, r0, sp, lsr #9
     9d0:	00623702 	rsbeq	r3, r2, r2, lsl #14
     9d4:	04020000 	streq	r0, [r2], #-0
     9d8:	00023c05 	andeq	r3, r2, r5, lsl #24
     9dc:	00620300 	rsbeq	r0, r2, r0, lsl #6
     9e0:	38020000 	stmdacc	r2, {}	; <UNPREDICTABLE>
     9e4:	00000074 	andeq	r0, r0, r4, ror r0
     9e8:	00070402 	andeq	r0, r7, r2, lsl #8
     9ec:	02000003 	andeq	r0, r0, #3
     9f0:	02370508 	eorseq	r0, r7, #8, 10	; 0x2000000
     9f4:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     9f8:	0002fb07 	andeq	pc, r2, r7, lsl #22
     9fc:	05040400 	streq	r0, [r4, #-1024]	; 0x400
     a00:	00746e69 	rsbseq	r6, r4, r9, ror #28
     a04:	05070402 	streq	r0, [r7, #-1026]	; 0x402
     a08:	03000003 	movweq	r0, #3
     a0c:	00000299 	muleq	r0, r9, r2
     a10:	002c2a03 	eoreq	r2, ip, r3, lsl #20
     a14:	6f030000 	svcvs	0x00030000
     a18:	03000000 	movweq	r0, #0
     a1c:	00004536 	andeq	r4, r0, r6, lsr r5
     a20:	04af0300 	strteq	r0, [pc], #768	; a28 <_Min_Stack_Size+0x628>
     a24:	41030000 	mrsmi	r0, (UNDEF: 3)
     a28:	00000057 	andeq	r0, r0, r7, asr r0
     a2c:	00006403 	andeq	r6, r0, r3, lsl #8
     a30:	69420300 	stmdbvs	r2, {r8, r9}^
     a34:	02000000 	andeq	r0, r0, #0
     a38:	00460704 	subeq	r0, r6, r4, lsl #14
     a3c:	b8050000 	stmdalt	r5, {}	; <UNPREDICTABLE>
     a40:	06000000 	streq	r0, [r0], -r0
     a44:	0170048c 	cmneq	r0, ip, lsl #9
     a48:	000001ea 	andeq	r0, r0, sl, ror #3
     a4c:	00066307 	andeq	r6, r6, r7, lsl #6
     a50:	01720400 	cmneq	r2, r0, lsl #8
     a54:	000001ea 	andeq	r0, r0, sl, ror #3
     a58:	06950700 	ldreq	r0, [r5], r0, lsl #14
     a5c:	73040000 	movwvc	r0, #16384	; 0x4000
     a60:	0000ca01 	andeq	ip, r0, r1, lsl #20
     a64:	3f070400 	svccc	0x00070400
     a68:	04000007 	streq	r0, [r0], #-7
     a6c:	00ca0174 	sbceq	r0, sl, r4, ror r1
     a70:	07080000 	streq	r0, [r8, -r0]
     a74:	000006e4 	andeq	r0, r0, r4, ror #13
     a78:	ca017504 	bgt	5de90 <_Min_Stack_Size+0x5da90>
     a7c:	0c000000 	stceq	0, cr0, [r0], {-0}
     a80:	52435308 	subpl	r5, r3, #8, 6	; 0x20000000
     a84:	01760400 	cmneq	r6, r0, lsl #8
     a88:	000000ca 	andeq	r0, r0, sl, asr #1
     a8c:	43430810 	movtmi	r0, #14352	; 0x3810
     a90:	77040052 	smlsdvc	r4, r2, r0, r0
     a94:	0000ca01 	andeq	ip, r0, r1, lsl #20
     a98:	53081400 	movwpl	r1, #33792	; 0x8400
     a9c:	04005048 	streq	r5, [r0], #-72	; 0x48
     aa0:	01ff0178 	mvnseq	r0, r8, ror r1
     aa4:	07180000 	ldreq	r0, [r8, -r0]
     aa8:	00000701 	andeq	r0, r0, r1, lsl #14
     aac:	ca017904 	bgt	5eec4 <_Min_Stack_Size+0x5eac4>
     ab0:	24000000 	strcs	r0, [r0], #-0
     ab4:	0006bc07 	andeq	fp, r6, r7, lsl #24
     ab8:	017a0400 	cmneq	sl, r0, lsl #8
     abc:	000000ca 	andeq	r0, r0, sl, asr #1
     ac0:	075e0728 	ldrbeq	r0, [lr, -r8, lsr #14]
     ac4:	7b040000 	blvc	100acc <_Min_Stack_Size+0x1006cc>
     ac8:	0000ca01 	andeq	ip, r0, r1, lsl #20
     acc:	49072c00 	stmdbmi	r7, {sl, fp, sp}
     ad0:	04000007 	streq	r0, [r0], #-7
     ad4:	00ca017c 	sbceq	r0, sl, ip, ror r1
     ad8:	07300000 	ldreq	r0, [r0, -r0]!
     adc:	0000071d 	andeq	r0, r0, sp, lsl r7
     ae0:	ca017d04 	bgt	5fef8 <_Min_Stack_Size+0x5faf8>
     ae4:	34000000 	strcc	r0, [r0], #-0
     ae8:	0006a207 	andeq	sl, r6, r7, lsl #4
     aec:	017e0400 	cmneq	lr, r0, lsl #8
     af0:	000000ca 	andeq	r0, r0, sl, asr #1
     af4:	07990738 			; <UNDEFINED> instruction: 0x07990738
     af8:	7f040000 	svcvc	0x00040000
     afc:	0000ca01 	andeq	ip, r0, r1, lsl #20
     b00:	50083c00 	andpl	r3, r8, r0, lsl #24
     b04:	04005246 	streq	r5, [r0], #-582	; 0x246
     b08:	02140180 	andseq	r0, r4, #128, 2
     b0c:	08400000 	stmdaeq	r0, {}^	; <UNPREDICTABLE>
     b10:	00524644 	subseq	r4, r2, r4, asr #12
     b14:	ea018104 	b	60f2c <_Min_Stack_Size+0x60b2c>
     b18:	48000001 	stmdami	r0, {r0}
     b1c:	52444108 	subpl	r4, r4, #8, 2
     b20:	01820400 	orreq	r0, r2, r0, lsl #8
     b24:	000001ea 	andeq	r0, r0, sl, ror #3
     b28:	076d074c 	strbeq	r0, [sp, -ip, asr #14]!
     b2c:	83040000 	movwhi	r0, #16384	; 0x4000
     b30:	00022e01 	andeq	r2, r2, r1, lsl #28
     b34:	44075000 	strmi	r5, [r7], #-0
     b38:	04000007 	streq	r0, [r0], #-7
     b3c:	02480184 	subeq	r0, r8, #132, 2	; 0x21
     b40:	07600000 	strbeq	r0, [r0, -r0]!
     b44:	000003f5 	strdeq	r0, [r0], -r5
     b48:	38018504 	stmdacc	r1, {r2, r8, sl, pc}
     b4c:	74000002 	strvc	r0, [r0], #-2
     b50:	0007c007 	andeq	ip, r7, r7
     b54:	01860400 	orreq	r0, r6, r0, lsl #8
     b58:	000000ca 	andeq	r0, r0, sl, asr #1
     b5c:	ca090088 	bgt	240d84 <_Min_Stack_Size+0x240984>
     b60:	0a000000 	beq	b68 <_Min_Stack_Size+0x768>
     b64:	00000097 	muleq	r0, r7, r0
     b68:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     b6c:	0000c30b 	andeq	ip, r0, fp, lsl #6
     b70:	05000b00 	streq	r0, [r0, #-2816]	; 0xb00
     b74:	000001ef 	andeq	r0, r0, pc, ror #3
     b78:	0000b80a 	andeq	fp, r0, sl, lsl #16
     b7c:	00021400 	andeq	r1, r2, r0, lsl #8
     b80:	00c30b00 	sbceq	r0, r3, r0, lsl #22
     b84:	00010000 	andeq	r0, r1, r0
     b88:	00021909 	andeq	r1, r2, r9, lsl #18
     b8c:	02040500 	andeq	r0, r4, #0, 10
     b90:	b80a0000 	stmdalt	sl, {}	; <UNPREDICTABLE>
     b94:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
     b98:	0b000002 	bleq	ba8 <_Min_Stack_Size+0x7a8>
     b9c:	000000c3 	andeq	r0, r0, r3, asr #1
     ba0:	33090003 	movwcc	r0, #36867	; 0x9003
     ba4:	05000002 	streq	r0, [r0, #-2]
     ba8:	0000021e 	andeq	r0, r0, lr, lsl r2
     bac:	0000b80a 	andeq	fp, r0, sl, lsl #16
     bb0:	00024800 	andeq	r4, r2, r0, lsl #16
     bb4:	00c30b00 	sbceq	r0, r3, r0, lsl #22
     bb8:	00040000 	andeq	r0, r4, r0
     bbc:	00024d09 	andeq	r4, r2, r9, lsl #26
     bc0:	02380500 	eorseq	r0, r8, #0, 10
     bc4:	7c0c0000 	stcvc	0, cr0, [ip], {-0}
     bc8:	04000006 	streq	r0, [r0], #-6
     bcc:	00cf0187 	sbceq	r0, pc, r7, lsl #3
     bd0:	ad050000 	stcge	0, cr0, [r5, #-0]
     bd4:	0d000000 	stceq	0, cr0, [r0, #-0]
     bd8:	01f70501 	mvnseq	r0, r1, lsl #10
     bdc:	00000279 	andeq	r0, r0, r9, ror r2
     be0:	0009f00e 	andeq	pc, r9, lr
     be4:	530f0000 	movwpl	r0, #61440	; 0xf000
     be8:	01005445 	tsteq	r0, r5, asr #8
     bec:	051c0600 	ldreq	r0, [ip, #-1536]	; 0x600
     bf0:	02dc033e 	sbcseq	r0, ip, #-134217728	; 0xf8000000
     bf4:	41080000 	mrsmi	r0, (UNDEF: 8)
     bf8:	05005243 	streq	r5, [r0, #-579]	; 0x243
     bfc:	00ca0340 	sbceq	r0, sl, r0, asr #6
     c00:	07000000 	streq	r0, [r0, -r0]
     c04:	0000069d 	muleq	r0, sp, r6
     c08:	ca034105 	bgt	d1024 <_Min_Stack_Size+0xd0c24>
     c0c:	04000000 	streq	r0, [r0], #-0
     c10:	00069a07 	andeq	r9, r6, r7, lsl #20
     c14:	03420500 	movteq	r0, #9472	; 0x2500
     c18:	000000ca 	andeq	r0, r0, sl, asr #1
     c1c:	52530808 	subspl	r0, r3, #8, 16	; 0x80000
     c20:	03430500 	movteq	r0, #13568	; 0x3500
     c24:	000000ca 	andeq	r0, r0, sl, asr #1
     c28:	5243080c 	subpl	r0, r3, #12, 16	; 0xc0000
     c2c:	03440500 	movteq	r0, #17664	; 0x4500
     c30:	000000ca 	andeq	r0, r0, sl, asr #1
     c34:	07d00710 	bfieq	r0, r0, #14, #3
     c38:	45050000 	strmi	r0, [r5, #-0]
     c3c:	0000ca03 	andeq	ip, r0, r3, lsl #20
     c40:	c1071400 	tstgt	r7, r0, lsl #8
     c44:	05000006 	streq	r0, [r0, #-6]
     c48:	00ca0346 	sbceq	r0, sl, r6, asr #6
     c4c:	00180000 	andseq	r0, r8, r0
     c50:	0007a70c 	andeq	sl, r7, ip, lsl #14
     c54:	03470500 	movteq	r0, #29952	; 0x7500
     c58:	00000279 	andeq	r0, r0, r9, ror r2
     c5c:	4b050806 	blmi	142c7c <_Min_Stack_Size+0x14287c>
     c60:	00030b04 	andeq	r0, r3, r4, lsl #22
     c64:	52430800 	subpl	r0, r3, #0, 16
     c68:	044d0500 	strbeq	r0, [sp], #-1280	; 0x500
     c6c:	000000ca 	andeq	r0, r0, sl, asr #1
     c70:	53430800 	movtpl	r0, #14336	; 0x3800
     c74:	4e050052 	mcrmi	0, 0, r0, cr5, cr2, {2}
     c78:	0000ca04 	andeq	ip, r0, r4, lsl #20
     c7c:	0c000400 	cfstrseq	mvf0, [r0], {-0}
     c80:	00000647 	andeq	r0, r0, r7, asr #12
     c84:	e8044f05 	stmda	r4, {r0, r2, r8, r9, sl, fp, lr}
     c88:	06000002 	streq	r0, [r0], -r2
     c8c:	04550590 	ldrbeq	r0, [r5], #-1424	; 0x590
     c90:	000004c0 	andeq	r0, r0, r0, asr #9
     c94:	00524308 	subseq	r4, r2, r8, lsl #6
     c98:	ca045705 	bgt	1168b4 <_Min_Stack_Size+0x1164b4>
     c9c:	00000000 	andeq	r0, r0, r0
     ca0:	00061507 	andeq	r1, r6, r7, lsl #10
     ca4:	04580500 	ldrbeq	r0, [r8], #-1280	; 0x500
     ca8:	000000ca 	andeq	r0, r0, sl, asr #1
     cac:	07bb0704 	ldreq	r0, [fp, r4, lsl #14]!
     cb0:	59050000 	stmdbpl	r5, {}	; <UNPREDICTABLE>
     cb4:	0000ca04 	andeq	ip, r0, r4, lsl #20
     cb8:	43080800 	movwmi	r0, #34816	; 0x8800
     cbc:	05005249 	streq	r5, [r0, #-585]	; 0x249
     cc0:	00ca045a 	sbceq	r0, sl, sl, asr r4
     cc4:	070c0000 	streq	r0, [ip, -r0]
     cc8:	00000669 	andeq	r0, r0, r9, ror #12
     ccc:	ca045b05 	bgt	1178e8 <_Min_Stack_Size+0x1174e8>
     cd0:	10000000 	andne	r0, r0, r0
     cd4:	00062e07 	andeq	r2, r6, r7, lsl #28
     cd8:	045c0500 	ldrbeq	r0, [ip], #-1280	; 0x500
     cdc:	000000ca 	andeq	r0, r0, sl, asr #1
     ce0:	079e0714 			; <UNDEFINED> instruction: 0x079e0714
     ce4:	5d050000 	stcpl	0, cr0, [r5, #-0]
     ce8:	0000ca04 	andeq	ip, r0, r4, lsl #20
     cec:	f5071800 			; <UNDEFINED> instruction: 0xf5071800
     cf0:	05000003 	streq	r0, [r0, #-3]
     cf4:	00b8045e 	adcseq	r0, r8, lr, asr r4
     cf8:	071c0000 	ldreq	r0, [ip, -r0]
     cfc:	0000061d 	andeq	r0, r0, sp, lsl r6
     d00:	ca045f05 	bgt	11891c <_Min_Stack_Size+0x11851c>
     d04:	20000000 	andcs	r0, r0, r0
     d08:	0006b307 	andeq	fp, r6, r7, lsl #6
     d0c:	04600500 	strbteq	r0, [r0], #-1280	; 0x500
     d10:	000000ca 	andeq	r0, r0, sl, asr #1
     d14:	03ff0724 	mvnseq	r0, #36, 14	; 0x900000
     d18:	61050000 	mrsvs	r0, (UNDEF: 5)
     d1c:	00020404 	andeq	r0, r2, r4, lsl #8
     d20:	7e072800 	cdpvc	8, 0, cr2, cr7, cr0, {0}
     d24:	05000007 	streq	r0, [r0, #-7]
     d28:	00ca0462 	sbceq	r0, sl, r2, ror #8
     d2c:	07300000 	ldreq	r0, [r0, -r0]!
     d30:	00000626 	andeq	r0, r0, r6, lsr #12
     d34:	ca046305 	bgt	119950 <_Min_Stack_Size+0x119550>
     d38:	34000000 	strcc	r0, [r0], #-0
     d3c:	0006d207 	andeq	sp, r6, r7, lsl #4
     d40:	04640500 	strbteq	r0, [r4], #-1280	; 0x500
     d44:	000000ca 	andeq	r0, r0, sl, asr #1
     d48:	04090738 	streq	r0, [r9], #-1848	; 0x738
     d4c:	65050000 	strvs	r0, [r5, #-0]
     d50:	0000b804 	andeq	fp, r0, r4, lsl #16
     d54:	85073c00 	strhi	r3, [r7, #-3072]	; 0xc00
     d58:	05000006 	streq	r0, [r0, #-6]
     d5c:	00ca0466 	sbceq	r0, sl, r6, ror #8
     d60:	07400000 	strbeq	r0, [r0, -r0]
     d64:	000006ea 	andeq	r0, r0, sl, ror #13
     d68:	ca046705 	bgt	11a984 <_Min_Stack_Size+0x11a584>
     d6c:	44000000 	strmi	r0, [r0], #-0
     d70:	00041307 	andeq	r1, r4, r7, lsl #6
     d74:	04680500 	strbteq	r0, [r8], #-1280	; 0x500
     d78:	00000204 	andeq	r0, r0, r4, lsl #4
     d7c:	060b0748 	streq	r0, [fp], -r8, asr #14
     d80:	69050000 	stmdbvs	r5, {}	; <UNPREDICTABLE>
     d84:	0000ca04 	andeq	ip, r0, r4, lsl #20
     d88:	63075000 	movwvs	r5, #28672	; 0x7000
     d8c:	05000007 	streq	r0, [r0, #-7]
     d90:	00ca046a 	sbceq	r0, sl, sl, ror #8
     d94:	07540000 	ldrbeq	r0, [r4, -r0]
     d98:	00000672 	andeq	r0, r0, r2, ror r6
     d9c:	ca046b05 	bgt	11b9b8 <_Min_Stack_Size+0x11b5b8>
     da0:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
     da4:	00041d07 	andeq	r1, r4, r7, lsl #26
     da8:	046c0500 	strbteq	r0, [ip], #-1280	; 0x500
     dac:	000000b8 	strheq	r0, [r0], -r8
     db0:	072e075c 			; <UNDEFINED> instruction: 0x072e075c
     db4:	6d050000 	stcvs	0, cr0, [r5, #-0]
     db8:	0000ca04 	andeq	ip, r0, r4, lsl #20
     dbc:	c6076000 	strgt	r6, [r7], -r0
     dc0:	05000007 	streq	r0, [r0, #-7]
     dc4:	00ca046e 	sbceq	r0, sl, lr, ror #8
     dc8:	07640000 	strbeq	r0, [r4, -r0]!
     dcc:	00000427 	andeq	r0, r0, r7, lsr #8
     dd0:	04046f05 	streq	r6, [r4], #-3845	; 0xf05
     dd4:	68000002 	stmdavs	r0, {r1}
     dd8:	00063707 	andeq	r3, r6, r7, lsl #14
     ddc:	04700500 	ldrbteq	r0, [r0], #-1280	; 0x500
     de0:	000000ca 	andeq	r0, r0, sl, asr #1
     de4:	53430870 	movtpl	r0, #14448	; 0x3870
     de8:	71050052 	qaddvc	r0, r2, r5
     dec:	0000ca04 	andeq	ip, r0, r4, lsl #20
     df0:	31077400 	tstcc	r7, r0, lsl #8
     df4:	05000004 	streq	r0, [r0, #-4]
     df8:	02040472 	andeq	r0, r4, #1912602624	; 0x72000000
     dfc:	07780000 	ldrbeq	r0, [r8, -r0]!
     e00:	00000653 	andeq	r0, r0, r3, asr r6
     e04:	ca047305 	bgt	11da20 <_Min_Stack_Size+0x11d620>
     e08:	80000000 	andhi	r0, r0, r0
     e0c:	00063c07 	andeq	r3, r6, r7, lsl #24
     e10:	04740500 	ldrbteq	r0, [r4], #-1280	; 0x500
     e14:	000000ca 	andeq	r0, r0, sl, asr #1
     e18:	07b50784 	ldreq	r0, [r5, r4, lsl #15]!
     e1c:	75050000 	strvc	r0, [r5, #-0]
     e20:	0000ca04 	andeq	ip, r0, r4, lsl #20
     e24:	8d078800 	stchi	8, cr8, [r7, #-0]
     e28:	05000006 	streq	r0, [r0, #-6]
     e2c:	00ca0476 	sbceq	r0, sl, r6, ror r4
     e30:	008c0000 	addeq	r0, ip, r0
     e34:	0006a70c 	andeq	sl, r6, ip, lsl #14
     e38:	04780500 	ldrbteq	r0, [r8], #-1280	; 0x500
     e3c:	00000317 	andeq	r0, r0, r7, lsl r3
     e40:	00077210 	andeq	r7, r7, r0, lsl r2
     e44:	01400100 	mrseq	r0, (UNDEF: 80)
     e48:	0004f201 	andeq	pc, r4, r1, lsl #4
     e4c:	06f21100 	ldrbteq	r1, [r2], r0, lsl #2
     e50:	45010000 	strmi	r0, [r1, #-0]
     e54:	0000ca01 	andeq	ip, r0, r1, lsl #20
     e58:	06591100 	ldrbeq	r1, [r9], -r0, lsl #2
     e5c:	45010000 	strmi	r0, [r1, #-0]
     e60:	0000ca01 	andeq	ip, r0, r1, lsl #20
     e64:	23120000 	tstcs	r2, #0
     e68:	01000007 	tsteq	r0, r7
     e6c:	0003a0bb 	strheq	sl, [r3], -fp
     e70:	00011008 	andeq	r1, r1, r8
     e74:	2e9c0100 	fmlcse	f0, f4, f0
     e78:	13000005 	movwne	r0, #5
     e7c:	000004cc 	andeq	r0, r0, ip, asr #9
     e80:	080003ca 	stmdaeq	r0, {r1, r3, r6, r7, r8, r9}
     e84:	00000090 	muleq	r0, r0, r0
     e88:	9014da01 	andsls	sp, r4, r1, lsl #20
     e8c:	15000000 	strne	r0, [r0, #-0]
     e90:	000004d9 	ldrdeq	r0, [r0], -r9
     e94:	15789102 	ldrbne	r9, [r8, #-258]!	; 0x102
     e98:	000004e5 	andeq	r0, r0, r5, ror #9
     e9c:	007c9102 	rsbseq	r9, ip, r2, lsl #2
     ea0:	07160000 	ldreq	r0, [r6, -r0]
     ea4:	01000007 	tsteq	r0, r7
     ea8:	04b00108 	ldrteq	r0, [r0], #264	; 0x108
     eac:	00700800 	rsbseq	r0, r0, r0, lsl #16
     eb0:	9c010000 	stcls	0, cr0, [r1], {-0}
     eb4:	00000595 	muleq	r0, r5, r5
     eb8:	706d7417 	rsbvc	r7, sp, r7, lsl r4
     ebc:	010a0100 	mrseq	r0, (UNDEF: 26)
     ec0:	000000b8 	strheq	r0, [r0], -r8
     ec4:	000000c0 	andeq	r0, r0, r0, asr #1
     ec8:	00073818 	andeq	r3, r7, r8, lsl r8
     ecc:	010a0100 	mrseq	r0, (UNDEF: 26)
     ed0:	000000b8 	strheq	r0, [r0], -r8
     ed4:	00000114 	andeq	r0, r0, r4, lsl r1
     ed8:	0006df18 	andeq	sp, r6, r8, lsl pc
     edc:	010a0100 	mrseq	r0, (UNDEF: 26)
     ee0:	000000b8 	strheq	r0, [r0], -r8
     ee4:	0000014b 	andeq	r0, r0, fp, asr #2
     ee8:	0006c818 	andeq	ip, r6, r8, lsl r8
     eec:	010a0100 	mrseq	r0, (UNDEF: 26)
     ef0:	000000b8 	strheq	r0, [r0], -r8
     ef4:	0000018e 	andeq	r0, r0, lr, lsl #3
     ef8:	0006da18 	andeq	sp, r6, r8, lsl sl
     efc:	010a0100 	mrseq	r0, (UNDEF: 26)
     f00:	000000b8 	strheq	r0, [r0], -r8
     f04:	000001cd 	andeq	r0, r0, sp, asr #3
     f08:	04681900 	strbteq	r1, [r8], #-2304	; 0x900
     f0c:	a7040000 	strge	r0, [r4, -r0]
     f10:	00025e06 	andeq	r5, r2, r6, lsl #28
     f14:	074e1a00 	strbeq	r1, [lr, -r0, lsl #20]
     f18:	9b010000 	blls	40f20 <_Min_Stack_Size+0x40b20>
     f1c:	000000b8 	strheq	r0, [r0], -r8
     f20:	00100305 	andseq	r0, r0, r5, lsl #6
     f24:	970a2000 	strls	r2, [sl, -r0]
     f28:	c2000000 	andgt	r0, r0, #0
     f2c:	0b000005 	bleq	f48 <_Min_Stack_Size+0xb48>
     f30:	000000c3 	andeq	r0, r0, r3, asr #1
     f34:	e21a000f 	ands	r0, sl, #15
     f38:	0100000f 	tsteq	r0, pc
     f3c:	0005d39d 	muleq	r5, sp, r3
     f40:	00030500 	andeq	r0, r3, r0, lsl #10
     f44:	09200000 	stmdbeq	r0!, {}	; <UNPREDICTABLE>
     f48:	000005d8 	ldrdeq	r0, [r0], -r8
     f4c:	0005b205 	andeq	fp, r5, r5, lsl #4
     f50:	00810000 	addeq	r0, r1, r0
     f54:	00020000 	andeq	r0, r2, r0
     f58:	000003ee 	andeq	r0, r0, lr, ror #7
     f5c:	04ed0104 	strbteq	r0, [sp], #260	; 0x104
     f60:	00c00000 	sbceq	r0, r0, r0
     f64:	74730000 	ldrbtvc	r0, [r3], #-0
     f68:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0x261
     f6c:	74735f70 	ldrbtvc	r5, [r3], #-3952	; 0xf70
     f70:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     f74:	5f393234 	svcpl	0x00393234
     f78:	78393334 	ldmdavc	r9!, {r2, r4, r5, r8, r9, ip, sp}
     f7c:	00532e78 	subseq	r2, r3, r8, ror lr
     f80:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; ecc <_Min_Stack_Size+0xacc>
     f84:	616c2f65 	cmnvs	ip, r5, ror #30
     f88:	31373062 	teqcc	r7, r2, rrx
     f8c:	726f772f 	rsbvc	r7, pc, #12320768	; 0xbc0000
     f90:	6170736b 	cmnvs	r0, fp, ror #6
     f94:	4a2f6563 	bmi	bda528 <_Min_Stack_Size+0xbda128>
     f98:	76726573 			; <UNDEFINED> instruction: 0x76726573
     f9c:	73616c43 	cmnvc	r1, #17152	; 0x4300
     fa0:	694d2f73 	stmdbvs	sp, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp}^
     fa4:	345f676e 	ldrbcc	r6, [pc], #-1902	; fac <_Min_Stack_Size+0xbac>
     fa8:	745f3932 	ldrbvc	r3, [pc], #-2354	; fb0 <_Min_Stack_Size+0xbb0>
     fac:	6e696172 	mcrvs	1, 3, r6, cr9, cr2, {3}
     fb0:	2f676e69 	svccs	0x00676e69
     fb4:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     fb8:	32346632 	eorscc	r6, r4, #52428800	; 0x3200000
     fbc:	72745f39 	rsbsvc	r5, r4, #57, 30	; 0xe4
     fc0:	696e6961 	stmdbvs	lr!, {r0, r5, r6, r8, fp, sp, lr}^
     fc4:	4700676e 	strmi	r6, [r0, -lr, ror #14]
     fc8:	4120554e 	teqmi	r0, lr, asr #10
     fcc:	2e322053 	mrccs	0, 1, r2, cr2, cr3, {2}
     fd0:	322e3332 	eorcc	r3, lr, #-939524096	; 0xc8000000
     fd4:	43800100 	orrmi	r0, r0, #0, 2
     fd8:	04000005 	streq	r0, [r0], #-5
     fdc:	00040000 	andeq	r0, r4, r0
     fe0:	f8010400 			; <UNDEFINED> instruction: 0xf8010400
     fe4:	01000000 	mrseq	r0, (UNDEF: 0)
     fe8:	00000939 	andeq	r0, r0, r9, lsr r9
     fec:	0000051b 	andeq	r0, r0, fp, lsl r5
     ff0:	000000e0 	andeq	r0, r0, r0, ror #1
     ff4:	00000000 	andeq	r0, r0, r0
     ff8:	00000562 	andeq	r0, r0, r2, ror #10
     ffc:	d3060102 	movwle	r0, #24834	; 0x6102
    1000:	03000002 	movweq	r0, #2
    1004:	00000297 	muleq	r0, r7, r2
    1008:	00371c02 	eorseq	r1, r7, r2, lsl #24
    100c:	01020000 	mrseq	r0, (UNDEF: 2)
    1010:	0002d108 	andeq	sp, r2, r8, lsl #2
    1014:	05020200 	streq	r0, [r2, #-512]	; 0x200
    1018:	00000095 	muleq	r0, r5, r0
    101c:	53070202 	movwpl	r0, #29186	; 0x7202
    1020:	03000003 	movweq	r0, #3
    1024:	000004ad 	andeq	r0, r0, sp, lsr #9
    1028:	00573702 	subseq	r3, r7, r2, lsl #14
    102c:	04020000 	streq	r0, [r2], #-0
    1030:	00023c05 	andeq	r3, r2, r5, lsl #24
    1034:	00620300 	rsbeq	r0, r2, r0, lsl #6
    1038:	38020000 	stmdacc	r2, {}	; <UNPREDICTABLE>
    103c:	00000069 	andeq	r0, r0, r9, rrx
    1040:	00070402 	andeq	r0, r7, r2, lsl #8
    1044:	02000003 	andeq	r0, r0, #3
    1048:	02370508 	eorseq	r0, r7, #8, 10	; 0x2000000
    104c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    1050:	0002fb07 	andeq	pc, r2, r7, lsl #22
    1054:	05040400 	streq	r0, [r4, #-1024]	; 0x400
    1058:	00746e69 	rsbseq	r6, r4, r9, ror #28
    105c:	05070402 	streq	r0, [r7, #-1026]	; 0x402
    1060:	03000003 	movweq	r0, #3
    1064:	00000299 	muleq	r0, r9, r2
    1068:	002c2a03 	eoreq	r2, ip, r3, lsl #20
    106c:	af030000 	svcge	0x00030000
    1070:	03000004 	movweq	r0, #4
    1074:	00004c41 	andeq	r4, r0, r1, asr #24
    1078:	00640300 	rsbeq	r0, r4, r0, lsl #6
    107c:	42030000 	andmi	r0, r3, #0
    1080:	0000005e 	andeq	r0, r0, lr, asr r0
    1084:	040e0405 	streq	r0, [lr], #-1029	; 0x405
    1088:	01690150 	cmneq	r9, r0, asr r1
    108c:	45060000 	strmi	r0, [r6, #-0]
    1090:	04000008 	streq	r0, [r0], #-8
    1094:	01800152 	orreq	r0, r0, r2, asr r1
    1098:	06000000 	streq	r0, [r0], -r0
    109c:	000003f5 	strdeq	r0, [r0], -r5
    10a0:	85015304 	strhi	r5, [r1, #-772]	; 0x304
    10a4:	20000001 	andcs	r0, r0, r1
    10a8:	00088c06 	andeq	r8, r8, r6, lsl #24
    10ac:	01540400 	cmpeq	r4, r0, lsl #8
    10b0:	00000195 	muleq	r0, r5, r1
    10b4:	08580680 	ldmdaeq	r8, {r7, r9, sl}^
    10b8:	55040000 	strpl	r0, [r4, #-0]
    10bc:	00018501 	andeq	r8, r1, r1, lsl #10
    10c0:	dd07a000 	stcle	0, cr10, [r7, #-0]
    10c4:	04000008 	streq	r0, [r0], #-8
    10c8:	019a0156 	orrseq	r0, sl, r6, asr r1
    10cc:	01000000 	mrseq	r0, (UNDEF: 0)
    10d0:	00040907 	andeq	r0, r4, r7, lsl #18
    10d4:	01570400 	cmpeq	r7, r0, lsl #8
    10d8:	00000185 	andeq	r0, r0, r5, lsl #3
    10dc:	81070120 	tsthi	r7, r0, lsr #2
    10e0:	04000008 	streq	r0, [r0], #-8
    10e4:	019f0158 	orrseq	r0, pc, r8, asr r1	; <UNPREDICTABLE>
    10e8:	01800000 	orreq	r0, r0, r0
    10ec:	00041307 	andeq	r1, r4, r7, lsl #6
    10f0:	01590400 	cmpeq	r9, r0, lsl #8
    10f4:	00000185 	andeq	r0, r0, r5, lsl #3
    10f8:	d60701a0 	strle	r0, [r7], -r0, lsr #3
    10fc:	04000007 	streq	r0, [r0], #-7
    1100:	01a4015a 			; <UNDEFINED> instruction: 0x01a4015a
    1104:	02000000 	andeq	r0, r0, #0
    1108:	00041d07 	andeq	r1, r4, r7, lsl #26
    110c:	015b0400 	cmpeq	fp, r0, lsl #8
    1110:	000001a9 	andeq	r0, r0, r9, lsr #3
    1114:	49080220 	stmdbmi	r8, {r5, r9}
    1118:	5c040050 	stcpl	0, cr0, [r4], {80}	; 0x50
    111c:	0001c901 	andeq	ip, r1, r1, lsl #18
    1120:	07030000 	streq	r0, [r3, -r0]
    1124:	00000427 	andeq	r0, r0, r7, lsr #8
    1128:	ce015d04 	cdpgt	13, 0, cr5, cr1, cr4, {0}
    112c:	f0000001 			; <UNDEFINED> instruction: 0xf0000001
    1130:	08530703 	ldmdaeq	r3, {r0, r1, r8, r9, sl}^
    1134:	5e040000 	cdppl	0, 0, cr0, cr4, cr0, {0}
    1138:	0001df01 	andeq	sp, r1, r1, lsl #30
    113c:	000e0000 	andeq	r0, lr, r0
    1140:	0000a209 	andeq	sl, r0, r9, lsl #4
    1144:	00017900 	andeq	r7, r1, r0, lsl #18
    1148:	01790a00 	cmneq	r9, r0, lsl #20
    114c:	00070000 	andeq	r0, r7, r0
    1150:	46070402 	strmi	r0, [r7], -r2, lsl #8
    1154:	0b000000 	bleq	115c <_Min_Stack_Size+0xd5c>
    1158:	00000169 	andeq	r0, r0, r9, ror #2
    115c:	0000a209 	andeq	sl, r0, r9, lsl #4
    1160:	00019500 	andeq	r9, r1, r0, lsl #10
    1164:	01790a00 	cmneq	r9, r0, lsl #20
    1168:	00170000 	andseq	r0, r7, r0
    116c:	0001690b 	andeq	r6, r1, fp, lsl #18
    1170:	01690b00 	cmneq	r9, r0, lsl #22
    1174:	690b0000 	stmdbvs	fp, {}	; <UNPREDICTABLE>
    1178:	0b000001 	bleq	1184 <_Min_Stack_Size+0xd84>
    117c:	00000169 	andeq	r0, r0, r9, ror #2
    1180:	0000a209 	andeq	sl, r0, r9, lsl #4
    1184:	0001b900 	andeq	fp, r1, r0, lsl #18
    1188:	01790a00 	cmneq	r9, r0, lsl #20
    118c:	00370000 	eorseq	r0, r7, r0
    1190:	00008c09 	andeq	r8, r0, r9, lsl #24
    1194:	0001c900 	andeq	ip, r1, r0, lsl #18
    1198:	01790a00 	cmneq	r9, r0, lsl #20
    119c:	00ef0000 	rsceq	r0, pc, r0
    11a0:	0001b90b 	andeq	fp, r1, fp, lsl #18
    11a4:	00a20900 	adceq	r0, r2, r0, lsl #18
    11a8:	01df0000 	bicseq	r0, pc, r0
    11ac:	790c0000 	stmdbvc	ip, {}	; <UNPREDICTABLE>
    11b0:	83000001 	movwhi	r0, #1
    11b4:	a20b0002 	andge	r0, fp, #2
    11b8:	0d000000 	stceq	0, cr0, [r0, #-0]
    11bc:	0000090d 	andeq	r0, r0, sp, lsl #18
    11c0:	ad015f04 	stcge	15, cr5, [r1, #-16]
    11c4:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    11c8:	0170048c 	cmneq	r0, ip, lsl #9
    11cc:	0000030b 	andeq	r0, r0, fp, lsl #6
    11d0:	00066306 	andeq	r6, r6, r6, lsl #6
    11d4:	01720400 	cmneq	r2, r0, lsl #8
    11d8:	0000030b 	andeq	r0, r0, fp, lsl #6
    11dc:	06950600 	ldreq	r0, [r5], r0, lsl #12
    11e0:	73040000 	movwvc	r0, #16384	; 0x4000
    11e4:	0001df01 	andeq	sp, r1, r1, lsl #30
    11e8:	3f060400 	svccc	0x00060400
    11ec:	04000007 	streq	r0, [r0], #-7
    11f0:	01df0174 	bicseq	r0, pc, r4, ror r1	; <UNPREDICTABLE>
    11f4:	06080000 	streq	r0, [r8], -r0
    11f8:	000006e4 	andeq	r0, r0, r4, ror #13
    11fc:	df017504 	svcle	0x00017504
    1200:	0c000001 	stceq	0, cr0, [r0], {1}
    1204:	5243530f 	subpl	r5, r3, #1006632960	; 0x3c000000
    1208:	01760400 	cmneq	r6, r0, lsl #8
    120c:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1210:	43430f10 	movtmi	r0, #16144	; 0x3f10
    1214:	77040052 	smlsdvc	r4, r2, r0, r0
    1218:	0001df01 	andeq	sp, r1, r1, lsl #30
    121c:	530f1400 	movwpl	r1, #62464	; 0xf400
    1220:	04005048 	streq	r5, [r0], #-72	; 0x48
    1224:	03200178 	teqeq	r0, #120, 2
    1228:	06180000 	ldreq	r0, [r8], -r0
    122c:	00000701 	andeq	r0, r0, r1, lsl #14
    1230:	df017904 	svcle	0x00017904
    1234:	24000001 	strcs	r0, [r0], #-1
    1238:	0006bc06 	andeq	fp, r6, r6, lsl #24
    123c:	017a0400 	cmneq	sl, r0, lsl #8
    1240:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1244:	075e0628 	ldrbeq	r0, [lr, -r8, lsr #12]
    1248:	7b040000 	blvc	101250 <_Min_Stack_Size+0x100e50>
    124c:	0001df01 	andeq	sp, r1, r1, lsl #30
    1250:	49062c00 	stmdbmi	r6, {sl, fp, sp}
    1254:	04000007 	streq	r0, [r0], #-7
    1258:	01df017c 	bicseq	r0, pc, ip, ror r1	; <UNPREDICTABLE>
    125c:	06300000 	ldrteq	r0, [r0], -r0
    1260:	0000071d 	andeq	r0, r0, sp, lsl r7
    1264:	df017d04 	svcle	0x00017d04
    1268:	34000001 	strcc	r0, [r0], #-1
    126c:	0006a206 	andeq	sl, r6, r6, lsl #4
    1270:	017e0400 	cmneq	lr, r0, lsl #8
    1274:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1278:	07990638 			; <UNDEFINED> instruction: 0x07990638
    127c:	7f040000 	svcvc	0x00040000
    1280:	0001df01 	andeq	sp, r1, r1, lsl #30
    1284:	500f3c00 	andpl	r3, pc, r0, lsl #24
    1288:	04005246 	streq	r5, [r0], #-582	; 0x246
    128c:	03350180 	teqeq	r5, #128, 2
    1290:	0f400000 	svceq	0x00400000
    1294:	00524644 	subseq	r4, r2, r4, asr #12
    1298:	0b018104 	bleq	616b0 <_Min_Stack_Size+0x612b0>
    129c:	48000003 	stmdami	r0, {r0, r1}
    12a0:	5244410f 	subpl	r4, r4, #-1073741821	; 0xc0000003
    12a4:	01820400 	orreq	r0, r2, r0, lsl #8
    12a8:	0000030b 	andeq	r0, r0, fp, lsl #6
    12ac:	076d064c 	strbeq	r0, [sp, -ip, asr #12]!
    12b0:	83040000 	movwhi	r0, #16384	; 0x4000
    12b4:	00034f01 	andeq	r4, r3, r1, lsl #30
    12b8:	44065000 	strmi	r5, [r6], #-0
    12bc:	04000007 	streq	r0, [r0], #-7
    12c0:	03690184 	cmneq	r9, #132, 2	; 0x21
    12c4:	06600000 	strbteq	r0, [r0], -r0
    12c8:	000003f5 	strdeq	r0, [r0], -r5
    12cc:	59018504 	stmdbpl	r1, {r2, r8, sl, pc}
    12d0:	74000003 	strvc	r0, [r0], #-3
    12d4:	0007c006 	andeq	ip, r7, r6
    12d8:	01860400 	orreq	r0, r6, r0, lsl #8
    12dc:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    12e0:	df100088 	svcle	0x00100088
    12e4:	09000001 	stmdbeq	r0, {r0}
    12e8:	0000008c 	andeq	r0, r0, ip, lsl #1
    12ec:	00000320 	andeq	r0, r0, r0, lsr #6
    12f0:	0001790a 	andeq	r7, r1, sl, lsl #18
    12f4:	0b000b00 	bleq	3efc <_Min_Stack_Size+0x3afc>
    12f8:	00000310 	andeq	r0, r0, r0, lsl r3
    12fc:	0000a209 	andeq	sl, r0, r9, lsl #4
    1300:	00033500 	andeq	r3, r3, r0, lsl #10
    1304:	01790a00 	cmneq	r9, r0, lsl #20
    1308:	00010000 	andeq	r0, r1, r0
    130c:	00033a10 	andeq	r3, r3, r0, lsl sl
    1310:	03250b00 	teqeq	r5, #0, 22
    1314:	a2090000 	andge	r0, r9, #0
    1318:	4f000000 	svcmi	0x00000000
    131c:	0a000003 	beq	1330 <_Min_Stack_Size+0xf30>
    1320:	00000179 	andeq	r0, r0, r9, ror r1
    1324:	54100003 	ldrpl	r0, [r0], #-3
    1328:	0b000003 	bleq	133c <_Min_Stack_Size+0xf3c>
    132c:	0000033f 	andeq	r0, r0, pc, lsr r3
    1330:	0000a209 	andeq	sl, r0, r9, lsl #4
    1334:	00036900 	andeq	r6, r3, r0, lsl #18
    1338:	01790a00 	cmneq	r9, r0, lsl #20
    133c:	00040000 	andeq	r0, r4, r0
    1340:	00036e10 	andeq	r6, r3, r0, lsl lr
    1344:	03590b00 	cmpeq	r9, #0, 22
    1348:	7c0d0000 	stcvc	0, cr0, [sp], {-0}
    134c:	04000006 	streq	r0, [r0], #-6
    1350:	01f00187 	mvnseq	r0, r7, lsl #3
    1354:	100e0000 	andne	r0, lr, r0
    1358:	bd026f04 	stclt	15, cr6, [r2, #-16]
    135c:	06000003 	streq	r0, [r0], -r3
    1360:	00000868 	andeq	r0, r0, r8, ror #16
    1364:	df027104 	svcle	0x00027104
    1368:	00000001 	andeq	r0, r0, r1
    136c:	00097a06 	andeq	r7, r9, r6, lsl #20
    1370:	02720400 	rsbseq	r0, r2, #0, 8
    1374:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1378:	41560f04 	cmpmi	r6, r4, lsl #30
    137c:	7304004c 	movwvc	r0, #16460	; 0x404c
    1380:	0001df02 	andeq	sp, r1, r2, lsl #30
    1384:	86060800 	strhi	r0, [r6], -r0, lsl #16
    1388:	04000008 	streq	r0, [r0], #-8
    138c:	030b0274 	movweq	r0, #45684	; 0xb274
    1390:	000c0000 	andeq	r0, ip, r0
    1394:	0008c40d 	andeq	ip, r8, sp, lsl #8
    1398:	02750400 	rsbseq	r0, r5, #0, 8
    139c:	0000037f 	andeq	r0, r0, pc, ror r3
    13a0:	0000970b 	andeq	r9, r0, fp, lsl #14
    13a4:	05011100 	streq	r1, [r1, #-256]	; 0x100
    13a8:	03e401f9 	mvneq	r0, #1073741886	; 0x4000003e
    13ac:	c7120000 	ldrgt	r0, [r2, -r0]
    13b0:	00000003 	andeq	r0, r0, r3
    13b4:	00024512 	andeq	r4, r2, r2, lsl r5
    13b8:	0d000100 	stfeqs	f0, [r0, #-0]
    13bc:	00000500 	andeq	r0, r0, r0, lsl #10
    13c0:	ce01f905 	cdpgt	9, 0, cr15, cr1, cr5, {0}
    13c4:	13000003 	movwne	r0, #3
    13c8:	29360604 	ldmdbcs	r6!, {r2, r9, sl}
    13cc:	14000004 	strne	r0, [r0], #-4
    13d0:	000008e2 	andeq	r0, r0, r2, ror #17
    13d4:	008c3806 	addeq	r3, ip, r6, lsl #16
    13d8:	14000000 	strne	r0, [r0], #-0
    13dc:	00000917 	andeq	r0, r0, r7, lsl r9
    13e0:	008c3d06 	addeq	r3, ip, r6, lsl #26
    13e4:	14010000 	strne	r0, [r1], #-0
    13e8:	000008f2 	strdeq	r0, [r0], -r2
    13ec:	008c4206 	addeq	r4, ip, r6, lsl #4
    13f0:	14020000 	strne	r0, [r2], #-0
    13f4:	000007ec 	andeq	r0, r0, ip, ror #15
    13f8:	03e44706 	mvneq	r4, #1572864	; 0x180000
    13fc:	00030000 	andeq	r0, r3, r0
    1400:	0007db03 	andeq	sp, r7, r3, lsl #22
    1404:	f04a0600 			; <UNDEFINED> instruction: 0xf04a0600
    1408:	15000003 	strne	r0, [r0, #-3]
    140c:	0000098c 	andeq	r0, r0, ip, lsl #19
    1410:	05707601 	ldrbeq	r7, [r0, #-1537]!	; 0x601
    1414:	00140800 	andseq	r0, r4, r0, lsl #16
    1418:	9c010000 	stcls	0, cr0, [r1], {-0}
    141c:	00000459 	andeq	r0, r0, r9, asr r4
    1420:	00082116 	andeq	r2, r8, r6, lsl r1
    1424:	a2760100 	rsbsge	r0, r6, #0, 2
    1428:	04000000 	streq	r0, [r0], #-0
    142c:	00000002 	andeq	r0, r0, r2
    1430:	00083415 	andeq	r3, r8, r5, lsl r4
    1434:	84880100 	strhi	r0, [r8], #256	; 0x100
    1438:	78080005 	stmdavc	r8, {r0, r2}
    143c:	01000000 	mrseq	r0, (UNDEF: 0)
    1440:	0004ab9c 	muleq	r4, ip, fp
    1444:	08111600 	ldmdaeq	r1, {r9, sl, ip}
    1448:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    144c:	000004ab 	andeq	r0, r0, fp, lsr #9
    1450:	00000225 	andeq	r0, r0, r5, lsr #4
    1454:	0008d117 	andeq	sp, r8, r7, lsl r1
    1458:	8c8a0100 	stfhis	f0, [sl], {0}
    145c:	5f000000 	svcpl	0x00000000
    1460:	17000002 	strne	r0, [r0, -r2]
    1464:	0000083e 	andeq	r0, r0, lr, lsr r8
    1468:	008c8a01 	addeq	r8, ip, r1, lsl #20
    146c:	029f0000 	addseq	r0, pc, #0
    1470:	91170000 	tstls	r7, r0
    1474:	01000008 	tsteq	r0, r8
    1478:	00008c8a 	andeq	r8, r0, sl, lsl #25
    147c:	0002c200 	andeq	ip, r2, r0, lsl #4
    1480:	04180000 	ldreq	r0, [r8], #-0
    1484:	00000429 	andeq	r0, r0, r9, lsr #8
    1488:	00086d15 	andeq	r6, r8, r5, lsl sp
    148c:	fcb40100 	ldc2	1, cr0, [r4]
    1490:	14080005 	strne	r0, [r8], #-5
    1494:	01000000 	mrseq	r0, (UNDEF: 0)
    1498:	0004e59c 	muleq	r4, ip, r5
    149c:	096d1600 	stmdbeq	sp!, {r9, sl, ip}^
    14a0:	b4010000 	strlt	r0, [r1], #-0
    14a4:	000000a2 	andeq	r0, r0, r2, lsr #1
    14a8:	000002e5 	andeq	r0, r0, r5, ror #5
    14ac:	00086116 	andeq	r6, r8, r6, lsl r1
    14b0:	a2b40100 	adcsge	r0, r4, #0, 2
    14b4:	06000000 	streq	r0, [r0], -r0
    14b8:	00000003 	andeq	r0, r0, r3
    14bc:	00089815 	andeq	r9, r8, r5, lsl r8
    14c0:	10c70100 	sbcne	r0, r7, r0, lsl #2
    14c4:	18080006 	stmdane	r8, {r1, r2}
    14c8:	01000000 	mrseq	r0, (UNDEF: 0)
    14cc:	0005179c 	muleq	r5, ip, r7
    14d0:	097f1600 	ldmdbeq	pc!, {r9, sl, ip}^	; <UNPREDICTABLE>
    14d4:	c7010000 	strgt	r0, [r1, -r0]
    14d8:	0000008c 	andeq	r0, r0, ip, lsl #1
    14dc:	00000327 	andeq	r0, r0, r7, lsr #6
    14e0:	00084a19 	andeq	r4, r8, r9, lsl sl
    14e4:	e4c70100 	strb	r0, [r7], #256	; 0x100
    14e8:	01000003 	tsteq	r0, r3
    14ec:	ac150051 	ldcge	0, cr0, [r5], {81}	; 0x51
    14f0:	01000008 	tsteq	r0, r8
    14f4:	000628df 	ldrdeq	r2, [r6], -pc	; <UNPREDICTABLE>
    14f8:	00001808 	andeq	r1, r0, r8, lsl #16
    14fc:	3a9c0100 	bcc	fe701904 <_estack+0xde6d1904>
    1500:	19000005 	stmdbne	r0, {r0, r2}
    1504:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1508:	00a2df01 	adceq	sp, r2, r1, lsl #30
    150c:	50010000 	andpl	r0, r1, r0
    1510:	04681a00 	strbteq	r1, [r8], #-2560	; 0xa00
    1514:	a7040000 	strge	r0, [r4, -r0]
    1518:	0003c906 	andeq	ip, r3, r6, lsl #18
    151c:	08410000 	stmdaeq	r1, {}^	; <UNPREDICTABLE>
    1520:	00040000 	andeq	r0, r4, r0
    1524:	00000556 	andeq	r0, r0, r6, asr r5
    1528:	00f80104 	rscseq	r0, r8, r4, lsl #2
    152c:	7b010000 	blvc	41534 <_Min_Stack_Size+0x41134>
    1530:	1b00000a 	blne	1560 <_Min_Stack_Size+0x1160>
    1534:	10000005 	andne	r0, r0, r5
    1538:	00000001 	andeq	r0, r0, r1
    153c:	34000000 	strcc	r0, [r0], #-0
    1540:	02000007 	andeq	r0, r0, #7
    1544:	02d30601 	sbcseq	r0, r3, #1048576	; 0x100000
    1548:	97030000 	strls	r0, [r3, -r0]
    154c:	02000002 	andeq	r0, r0, #2
    1550:	0000371c 	andeq	r3, r0, ip, lsl r7
    1554:	08010200 	stmdaeq	r1, {r9}
    1558:	000002d1 	ldrdeq	r0, [r0], -r1
    155c:	95050202 	strls	r0, [r5, #-514]	; 0x202
    1560:	03000000 	movweq	r0, #0
    1564:	0000006d 	andeq	r0, r0, sp, rrx
    1568:	00502602 	subseq	r2, r0, r2, lsl #12
    156c:	02020000 	andeq	r0, r2, #0
    1570:	00035307 	andeq	r5, r3, r7, lsl #6
    1574:	04ad0300 	strteq	r0, [sp], #768	; 0x300
    1578:	37020000 	strcc	r0, [r2, -r0]
    157c:	00000062 	andeq	r0, r0, r2, rrx
    1580:	3c050402 	cfstrscc	mvf0, [r5], {2}
    1584:	03000002 	movweq	r0, #2
    1588:	00000062 	andeq	r0, r0, r2, rrx
    158c:	00743802 	rsbseq	r3, r4, r2, lsl #16
    1590:	04020000 	streq	r0, [r2], #-0
    1594:	00030007 	andeq	r0, r3, r7
    1598:	05080200 	streq	r0, [r8, #-512]	; 0x200
    159c:	00000237 	andeq	r0, r0, r7, lsr r2
    15a0:	fb070802 	blx	1c35b2 <_Min_Stack_Size+0x1c31b2>
    15a4:	04000002 	streq	r0, [r0], #-2
    15a8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    15ac:	04020074 	streq	r0, [r2], #-116	; 0x74
    15b0:	00030507 	andeq	r0, r3, r7, lsl #10
    15b4:	02990300 	addseq	r0, r9, #0, 6
    15b8:	2a030000 	bcs	c15c0 <_Min_Stack_Size+0xc11c0>
    15bc:	0000002c 	andeq	r0, r0, ip, lsr #32
    15c0:	00006f03 	andeq	r6, r0, r3, lsl #30
    15c4:	45360300 	ldrmi	r0, [r6, #-768]!	; 0x300
    15c8:	03000000 	movweq	r0, #0
    15cc:	000004af 	andeq	r0, r0, pc, lsr #9
    15d0:	00574103 	subseq	r4, r7, r3, lsl #2
    15d4:	64030000 	strvs	r0, [r3], #-0
    15d8:	03000000 	movweq	r0, #0
    15dc:	00006942 	andeq	r6, r0, r2, asr #18
    15e0:	07040200 	streq	r0, [r4, -r0, lsl #4]
    15e4:	00000046 	andeq	r0, r0, r6, asr #32
    15e8:	0000b805 	andeq	fp, r0, r5, lsl #16
    15ec:	00b80600 	adcseq	r0, r8, r0, lsl #12
    15f0:	00df0000 	sbcseq	r0, pc, r0
    15f4:	c3070000 	movwgt	r0, #28672	; 0x7000
    15f8:	01000000 	mrseq	r0, (UNDEF: 0)
    15fc:	00a20500 	adceq	r0, r2, r0, lsl #10
    1600:	ad050000 	stcge	0, cr0, [r5, #-0]
    1604:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1608:	01f90401 	mvnseq	r0, r1, lsl #8
    160c:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1610:	0003c709 	andeq	ip, r3, r9, lsl #14
    1614:	45090000 	strmi	r0, [r9, #-0]
    1618:	01000002 	tsteq	r0, r2
    161c:	05000a00 	streq	r0, [r0, #-2560]	; 0xa00
    1620:	f9040000 			; <UNDEFINED> instruction: 0xf9040000
    1624:	0000e901 	andeq	lr, r0, r1, lsl #18
    1628:	04280b00 	strteq	r0, [r8], #-2816	; 0xb00
    162c:	019703d4 			; <UNDEFINED> instruction: 0x019703d4
    1630:	910c0000 	mrsls	r0, (UNDEF: 12)
    1634:	04000002 	streq	r0, [r0], #-2
    1638:	00ca03d6 	ldrdeq	r0, [sl], #54	; 0x36
    163c:	0c000000 	stceq	0, cr0, [r0], {-0}
    1640:	00000219 	andeq	r0, r0, r9, lsl r2
    1644:	ca03d704 	bgt	f725c <_Min_Stack_Size+0xf6e5c>
    1648:	04000000 	streq	r0, [r0], #-0
    164c:	00022f0c 	andeq	r2, r2, ip, lsl #30
    1650:	03d80400 	bicseq	r0, r8, #0, 8
    1654:	000000ca 	andeq	r0, r0, sl, asr #1
    1658:	025a0c08 	subseq	r0, sl, #8, 24	; 0x800
    165c:	d9040000 	stmdble	r4, {}	; <UNPREDICTABLE>
    1660:	0000ca03 	andeq	ip, r0, r3, lsl #20
    1664:	490d0c00 	stmdbmi	sp, {sl, fp}
    1668:	04005244 	streq	r5, [r0], #-580	; 0x244
    166c:	00ca03da 	ldrdeq	r0, [sl], #58	; 0x3a
    1670:	0d100000 	ldceq	0, cr0, [r0, #-0]
    1674:	0052444f 	subseq	r4, r2, pc, asr #8
    1678:	ca03db04 	bgt	f8290 <_Min_Stack_Size+0xf7e90>
    167c:	14000000 	strne	r0, [r0], #-0
    1680:	0005100c 	andeq	r1, r5, ip
    1684:	03dc0400 	bicseq	r0, ip, #0, 8
    1688:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    168c:	02790c18 	rsbseq	r0, r9, #24, 24	; 0x1800
    1690:	dd040000 	stcle	0, cr0, [r4, #-0]
    1694:	0000df03 	andeq	sp, r0, r3, lsl #30
    1698:	160c1a00 	strne	r1, [ip], -r0, lsl #20
    169c:	04000005 	streq	r0, [r0], #-5
    16a0:	00ca03de 	ldrdeq	r0, [sl], #62	; 0x3e
    16a4:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
    16a8:	00524641 	subseq	r4, r2, r1, asr #12
    16ac:	9703df04 	strls	sp, [r3, -r4, lsl #30]
    16b0:	20000001 	andcs	r0, r0, r1
    16b4:	00cf0500 	sbceq	r0, pc, r0, lsl #10
    16b8:	000a0000 	andeq	r0, sl, r0
    16bc:	04000000 	streq	r0, [r0], #-0
    16c0:	010b03e0 	smlatteq	fp, r0, r3, r0
    16c4:	010e0000 	mrseq	r0, (UNDEF: 14)
    16c8:	01c94205 	biceq	r4, r9, r5, lsl #4
    16cc:	60090000 	andvs	r0, r9, r0
    16d0:	00000002 	andeq	r0, r0, r2
    16d4:	00024c09 	andeq	r4, r2, r9, lsl #24
    16d8:	aa090100 	bge	241ae0 <_Min_Stack_Size+0x2416e0>
    16dc:	02000000 	andeq	r0, r0, #0
    16e0:	0000da09 	andeq	sp, r0, r9, lsl #20
    16e4:	03000300 	movweq	r0, #768	; 0x300
    16e8:	0000002a 	andeq	r0, r0, sl, lsr #32
    16ec:	01a84705 			; <UNDEFINED> instruction: 0x01a84705
    16f0:	010e0000 	mrseq	r0, (UNDEF: 14)
    16f4:	01e94f05 	mvneq	r4, r5, lsl #30
    16f8:	b1090000 	mrslt	r0, (UNDEF: 9)
    16fc:	00000002 	andeq	r0, r0, r2
    1700:	00004f09 	andeq	r4, r0, r9, lsl #30
    1704:	03000100 	movweq	r0, #256	; 0x100
    1708:	00000207 	andeq	r0, r0, r7, lsl #4
    170c:	01d45205 	bicseq	r5, r4, r5, lsl #4
    1710:	010e0000 	mrseq	r0, (UNDEF: 14)
    1714:	02155a05 	andseq	r5, r5, #20480	; 0x5000
    1718:	cf090000 	svcgt	0x00090000
    171c:	00000003 	andeq	r0, r0, r3
    1720:	0002e909 	andeq	lr, r2, r9, lsl #18
    1724:	a2090100 	andge	r0, r9, #0, 2
    1728:	02000003 	andeq	r0, r0, #3
    172c:	0002a109 	andeq	sl, r2, r9, lsl #2
    1730:	03000300 	movweq	r0, #768	; 0x300
    1734:	00000447 	andeq	r0, r0, r7, asr #8
    1738:	01f45f05 	mvnseq	r5, r5, lsl #30
    173c:	010e0000 	mrseq	r0, (UNDEF: 14)
    1740:	023b6e05 	eorseq	r6, fp, #5, 28	; 0x50
    1744:	75090000 	strvc	r0, [r9, #-0]
    1748:	00000004 	andeq	r0, r0, r4
    174c:	0004db09 	andeq	sp, r4, r9, lsl #22
    1750:	59090100 	stmdbpl	r9, {r8}
    1754:	02000004 	andeq	r0, r0, #4
    1758:	04ca0300 	strbeq	r0, [sl], #768	; 0x300
    175c:	72050000 	andvc	r0, r5, #0
    1760:	00000220 	andeq	r0, r0, r0, lsr #4
    1764:	7a05010e 	bvc	141ba4 <_Min_Stack_Size+0x1417a4>
    1768:	0000025b 	andeq	r0, r0, fp, asr r2
    176c:	0009ec09 	andeq	lr, r9, r9, lsl #24
    1770:	ac090000 	stcge	0, cr0, [r9], {-0}
    1774:	01000009 	tsteq	r0, r9
    1778:	0aee0300 	beq	ffb82380 <_estack+0xdfb52380>
    177c:	7d050000 	stcvc	0, cr0, [r5, #-0]
    1780:	00000246 	andeq	r0, r0, r6, asr #4
    1784:	8405080f 	strhi	r0, [r5], #-2063	; 0x80f
    1788:	000002ab 	andeq	r0, r0, fp, lsr #5
    178c:	00000d10 	andeq	r0, r0, r0, lsl sp
    1790:	b8860500 	stmlt	r6, {r8, sl}
    1794:	00000000 	andeq	r0, r0, r0
    1798:	00056210 	andeq	r6, r5, r0, lsl r2
    179c:	c9890500 	stmibgt	r9, {r8, sl}
    17a0:	04000001 	streq	r0, [r0], #-1
    17a4:	00034810 	andeq	r4, r3, r0, lsl r8
    17a8:	158c0500 	strne	r0, [ip, #1280]	; 0x500
    17ac:	05000002 	streq	r0, [r0, #-2]
    17b0:	00009f10 	andeq	r9, r0, r0, lsl pc
    17b4:	e98f0500 	stmib	pc, {r8, sl}	; <UNPREDICTABLE>
    17b8:	06000001 	streq	r0, [r0], -r1
    17bc:	0002df10 	andeq	sp, r2, r0, lsl pc
    17c0:	3b920500 	blcc	fe482bc8 <_estack+0xde452bc8>
    17c4:	07000002 	streq	r0, [r0, -r2]
    17c8:	03250300 	teqeq	r5, #0, 6
    17cc:	94050000 	strls	r0, [r5], #-0
    17d0:	00000266 	andeq	r0, r0, r6, ror #4
    17d4:	000a2011 	andeq	r2, sl, r1, lsl r0
    17d8:	407f0100 	rsbsmi	r0, pc, r0, lsl #2
    17dc:	5c080006 	stcpl	0, cr0, [r8], {6}
    17e0:	01000001 	tsteq	r0, r1
    17e4:	0004f99c 	muleq	r4, ip, r9
    17e8:	16541200 	ldrbne	r1, [r4], -r0, lsl #4
    17ec:	7f010000 	svcvc	0x00010000
    17f0:	000004f9 	strdeq	r0, [r0], -r9
    17f4:	00000361 	andeq	r0, r0, r1, ror #6
    17f8:	00069013 	andeq	r9, r6, r3, lsl r0
    17fc:	00083108 	andeq	r3, r8, r8, lsl #2
    1800:	0002f400 	andeq	pc, r2, r0, lsl #8
    1804:	51011400 	tstpl	r1, r0, lsl #8
    1808:	01143101 	tsteq	r4, r1, lsl #2
    180c:	000a0350 	andeq	r0, sl, r0, asr r3
    1810:	9e150004 	cdpls	0, 1, cr0, cr5, cr4, {0}
    1814:	31080006 	tstcc	r8, r6
    1818:	0e000008 	cdpeq	0, 0, cr0, cr0, cr8, {0}
    181c:	14000003 	strne	r0, [r0], #-3
    1820:	30015101 	andcc	r5, r1, r1, lsl #2
    1824:	03500114 	cmpeq	r0, #20, 2
    1828:	0004000a 	andeq	r0, r4, sl
    182c:	0006a613 	andeq	sl, r6, r3, lsl r6
    1830:	00083108 	andeq	r3, r8, r8, lsl #2
    1834:	00032600 	andeq	r2, r3, r0, lsl #12
    1838:	51011400 	tstpl	r1, r0, lsl #8
    183c:	01143101 	tsteq	r4, r1, lsl #2
    1840:	00310150 	eorseq	r0, r1, r0, asr r1
    1844:	0006b215 	andeq	fp, r6, r5, lsl r2
    1848:	00083108 	andeq	r3, r8, r8, lsl #2
    184c:	00033e00 	andeq	r3, r3, r0, lsl #28
    1850:	51011400 	tstpl	r1, r0, lsl #8
    1854:	01143001 	tsteq	r4, r1
    1858:	00310150 	eorseq	r0, r1, r0, asr r1
    185c:	0006ba13 	andeq	fp, r6, r3, lsl sl
    1860:	00083108 	andeq	r3, r8, r8, lsl #2
    1864:	00035600 	andeq	r5, r3, r0, lsl #12
    1868:	51011400 	tstpl	r1, r0, lsl #8
    186c:	01143101 	tsteq	r4, r1, lsl #2
    1870:	00320150 	eorseq	r0, r2, r0, asr r1
    1874:	0006c615 	andeq	ip, r6, r5, lsl r6
    1878:	00083108 	andeq	r3, r8, r8, lsl #2
    187c:	00036e00 	andeq	r6, r3, r0, lsl #28
    1880:	51011400 	tstpl	r1, r0, lsl #8
    1884:	01143001 	tsteq	r4, r1
    1888:	00320150 	eorseq	r0, r2, r0, asr r1
    188c:	0006ce13 	andeq	ip, r6, r3, lsl lr
    1890:	00083108 	andeq	r3, r8, r8, lsl #2
    1894:	00038600 	andeq	r8, r3, r0, lsl #12
    1898:	51011400 	tstpl	r1, r0, lsl #8
    189c:	01143101 	tsteq	r4, r1, lsl #2
    18a0:	00340150 	eorseq	r0, r4, r0, asr r1
    18a4:	0006da15 	andeq	sp, r6, r5, lsl sl
    18a8:	00083108 	andeq	r3, r8, r8, lsl #2
    18ac:	00039e00 	andeq	r9, r3, r0, lsl #28
    18b0:	51011400 	tstpl	r1, r0, lsl #8
    18b4:	01143001 	tsteq	r4, r1
    18b8:	00340150 	eorseq	r0, r4, r0, asr r1
    18bc:	0006e213 	andeq	lr, r6, r3, lsl r2
    18c0:	00083108 	andeq	r3, r8, r8, lsl #2
    18c4:	0003b600 	andeq	fp, r3, r0, lsl #12
    18c8:	51011400 	tstpl	r1, r0, lsl #8
    18cc:	01143101 	tsteq	r4, r1, lsl #2
    18d0:	00380150 	eorseq	r0, r8, r0, asr r1
    18d4:	0006ee15 	andeq	lr, r6, r5, lsl lr
    18d8:	00083108 	andeq	r3, r8, r8, lsl #2
    18dc:	0003ce00 	andeq	ip, r3, r0, lsl #28
    18e0:	51011400 	tstpl	r1, r0, lsl #8
    18e4:	01143001 	tsteq	r4, r1
    18e8:	00380150 	eorseq	r0, r8, r0, asr r1
    18ec:	0006f613 	andeq	pc, r6, r3, lsl r6	; <UNPREDICTABLE>
    18f0:	00083108 	andeq	r3, r8, r8, lsl #2
    18f4:	0003e600 	andeq	lr, r3, r0, lsl #12
    18f8:	51011400 	tstpl	r1, r0, lsl #8
    18fc:	01143101 	tsteq	r4, r1, lsl #2
    1900:	00400150 	subeq	r0, r0, r0, asr r1
    1904:	00070215 	andeq	r0, r7, r5, lsl r2
    1908:	00083108 	andeq	r3, r8, r8, lsl #2
    190c:	0003fe00 	andeq	pc, r3, r0, lsl #28
    1910:	51011400 	tstpl	r1, r0, lsl #8
    1914:	01143001 	tsteq	r4, r1
    1918:	00400150 	subeq	r0, r0, r0, asr r1
    191c:	00070a13 	andeq	r0, r7, r3, lsl sl
    1920:	00083108 	andeq	r3, r8, r8, lsl #2
    1924:	00041700 	andeq	r1, r4, r0, lsl #14
    1928:	51011400 	tstpl	r1, r0, lsl #8
    192c:	01143101 	tsteq	r4, r1, lsl #2
    1930:	20080250 	andcs	r0, r8, r0, asr r2
    1934:	07161500 	ldreq	r1, [r6, -r0, lsl #10]
    1938:	08310800 	ldmdaeq	r1!, {fp}
    193c:	04300000 	ldrteq	r0, [r0], #-0
    1940:	01140000 	tsteq	r4, r0
    1944:	14300151 	ldrtne	r0, [r0], #-337	; 0x151
    1948:	08025001 	stmdaeq	r2, {r0, ip, lr}
    194c:	1e130020 	cdpne	0, 1, cr0, cr3, cr0, {1}
    1950:	31080007 	tstcc	r8, r7
    1954:	49000008 	stmdbmi	r0, {r3}
    1958:	14000004 	strne	r0, [r0], #-4
    195c:	31015101 	tstcc	r1, r1, lsl #2
    1960:	02500114 	subseq	r0, r0, #20, 2
    1964:	15004008 	strne	r4, [r0, #-8]
    1968:	0800072a 	stmdaeq	r0, {r1, r3, r5, r8, r9, sl}
    196c:	00000831 	andeq	r0, r0, r1, lsr r8
    1970:	00000462 	andeq	r0, r0, r2, ror #8
    1974:	01510114 	cmpeq	r1, r4, lsl r1
    1978:	50011430 	andpl	r1, r1, r0, lsr r4
    197c:	00400802 	subeq	r0, r0, r2, lsl #16
    1980:	00073213 	andeq	r3, r7, r3, lsl r2
    1984:	00083108 	andeq	r3, r8, r8, lsl #2
    1988:	00047b00 	andeq	r7, r4, r0, lsl #22
    198c:	51011400 	tstpl	r1, r0, lsl #8
    1990:	01143101 	tsteq	r4, r1, lsl #2
    1994:	80080250 	andhi	r0, r8, r0, asr r2
    1998:	073e1500 	ldreq	r1, [lr, -r0, lsl #10]!
    199c:	08310800 	ldmdaeq	r1!, {fp}
    19a0:	04940000 	ldreq	r0, [r4], #0
    19a4:	01140000 	tsteq	r4, r0
    19a8:	14300151 	ldrtne	r0, [r0], #-337	; 0x151
    19ac:	08025001 	stmdaeq	r2, {r0, ip, lr}
    19b0:	48130080 	ldmdami	r3, {r7}
    19b4:	31080007 	tstcc	r8, r7
    19b8:	ae000008 	cdpge	0, 0, cr0, cr0, cr8, {0}
    19bc:	14000004 	strne	r0, [r0], #-4
    19c0:	31015101 	tstcc	r1, r1, lsl #2
    19c4:	03500114 	cmpeq	r0, #20, 2
    19c8:	0001000a 	andeq	r0, r1, sl
    19cc:	00075615 	andeq	r5, r7, r5, lsl r6
    19d0:	00083108 	andeq	r3, r8, r8, lsl #2
    19d4:	0004c800 	andeq	ip, r4, r0, lsl #16
    19d8:	51011400 	tstpl	r1, r0, lsl #8
    19dc:	01143001 	tsteq	r4, r1
    19e0:	000a0350 	andeq	r0, sl, r0, asr r3
    19e4:	60130001 	andsvs	r0, r3, r1
    19e8:	31080007 	tstcc	r8, r7
    19ec:	e2000008 	and	r0, r0, #8
    19f0:	14000004 	strne	r0, [r0], #-4
    19f4:	31015101 	tstcc	r1, r1, lsl #2
    19f8:	03500114 	cmpeq	r0, #20, 2
    19fc:	0002000a 	andeq	r0, r2, sl
    1a00:	00076e16 	andeq	r6, r7, r6, lsl lr
    1a04:	00083108 	andeq	r3, r8, r8, lsl #2
    1a08:	51011400 	tstpl	r1, r0, lsl #8
    1a0c:	01143001 	tsteq	r4, r1
    1a10:	000a0350 	andeq	r0, sl, r0, asr r3
    1a14:	17000002 	strne	r0, [r0, -r2]
    1a18:	00019c04 	andeq	r9, r1, r4, lsl #24
    1a1c:	00d01100 	sbcseq	r1, r0, r0, lsl #2
    1a20:	ca010000 	bgt	41a28 <_Min_Stack_Size+0x41628>
    1a24:	0800079c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl}
    1a28:	000000bc 	strheq	r0, [r0], -ip
    1a2c:	055c9c01 	ldrbeq	r9, [ip, #-3073]	; 0xc01
    1a30:	54180000 	ldrpl	r0, [r8], #-0
    1a34:	01000016 	tsteq	r0, r6, lsl r0
    1a38:	0004f9ca 	andeq	pc, r4, sl, asr #19
    1a3c:	18500100 	ldmdane	r0, {r8}^
    1a40:	00000a63 	andeq	r0, r0, r3, ror #20
    1a44:	055cca01 	ldrbeq	ip, [ip, #-2561]	; 0xa01
    1a48:	51010000 	mrspl	r0, (UNDEF: 1)
    1a4c:	0009a519 	andeq	sl, r9, r9, lsl r5
    1a50:	b8cc0100 	stmialt	ip, {r8}^
    1a54:	7c000000 	stcvc	0, cr0, [r0], {-0}
    1a58:	1a000004 	bne	1a70 <_Min_Stack_Size+0x1670>
    1a5c:	00736f70 	rsbseq	r6, r3, r0, ror pc
    1a60:	00b8cc01 	adcseq	ip, r8, r1, lsl #24
    1a64:	049b0000 	ldreq	r0, [fp], #0
    1a68:	f8190000 			; <UNDEFINED> instruction: 0xf8190000
    1a6c:	0100000a 	tsteq	r0, sl
    1a70:	0000b8cc 	andeq	fp, r0, ip, asr #17
    1a74:	0004f500 	andeq	pc, r4, r0, lsl #10
    1a78:	04170000 	ldreq	r0, [r7], #-0
    1a7c:	000002ab 	andeq	r0, r0, fp, lsr #5
    1a80:	0009d511 	andeq	sp, r9, r1, lsl r5
    1a84:	58fe0100 	ldmpl	lr!, {r8}^
    1a88:	12080008 	andne	r0, r8, #8
    1a8c:	01000000 	mrseq	r0, (UNDEF: 0)
    1a90:	0005859c 	muleq	r5, ip, r5
    1a94:	0a631800 	beq	18c7a9c <_Min_Stack_Size+0x18c769c>
    1a98:	fe010000 	cdp2	0, 0, cr0, cr1, cr0, {0}
    1a9c:	0000055c 	andeq	r0, r0, ip, asr r5
    1aa0:	1b005001 	blne	15aac <_Min_Stack_Size+0x156ac>
    1aa4:	00000adb 	ldrdeq	r0, [r0], -fp
    1aa8:	6c011501 	cfstr32vs	mvfx1, [r1], {1}
    1aac:	24080008 	strcs	r0, [r8], #-8
    1ab0:	01000000 	mrseq	r0, (UNDEF: 0)
    1ab4:	0005c79c 	muleq	r5, ip, r7
    1ab8:	16541c00 	ldrbne	r1, [r4], -r0, lsl #24
    1abc:	15010000 	strne	r0, [r1, #-0]
    1ac0:	0004f901 	andeq	pc, r4, r1, lsl #18
    1ac4:	1c500100 	ldfnee	f0, [r0], {-0}
    1ac8:	0000000d 	andeq	r0, r0, sp
    1acc:	a2011501 	andge	r1, r1, #4194304	; 0x400000
    1ad0:	01000000 	mrseq	r0, (UNDEF: 0)
    1ad4:	6d741d51 	ldclvs	13, cr1, [r4, #-324]!	; 0xfffffebc
    1ad8:	17010070 	smlsdxne	r1, r0, r0, r0
    1adc:	0000ca01 	andeq	ip, r0, r1, lsl #20
    1ae0:	7c910200 	lfmvc	f0, 4, [r1], {0}
    1ae4:	0a2c1e00 	beq	b092ec <_Min_Stack_Size+0xb08eec>
    1ae8:	43010000 	movwmi	r0, #4096	; 0x1000
    1aec:	00009701 	andeq	r9, r0, r1, lsl #14
    1af0:	00089000 	andeq	r9, r8, r0
    1af4:	00000c08 	andeq	r0, r0, r8, lsl #24
    1af8:	109c0100 	addsne	r0, ip, r0, lsl #2
    1afc:	1f000006 	svcne	0x00000006
    1b00:	00001654 	andeq	r1, r0, r4, asr r6
    1b04:	f9014301 			; <UNDEFINED> instruction: 0xf9014301
    1b08:	63000004 	movwvs	r0, #4
    1b0c:	1c000005 	stcne	0, cr0, [r0], {5}
    1b10:	0000000d 	andeq	r0, r0, sp
    1b14:	a2014301 	andge	r4, r1, #67108864	; 0x4000000
    1b18:	01000000 	mrseq	r0, (UNDEF: 0)
    1b1c:	0a422051 	beq	1089c68 <_Min_Stack_Size+0x1089868>
    1b20:	45010000 	strmi	r0, [r1, #-0]
    1b24:	00009701 	andeq	r9, r0, r1, lsl #14
    1b28:	00058400 	andeq	r8, r5, r0, lsl #8
    1b2c:	c81e0000 	ldmdagt	lr, {}	; <UNPREDICTABLE>
    1b30:	0100000a 	tsteq	r0, sl
    1b34:	00a2015d 	adceq	r0, r2, sp, asr r1
    1b38:	089c0000 	ldmeq	ip, {}	; <UNPREDICTABLE>
    1b3c:	00060800 	andeq	r0, r6, r0, lsl #16
    1b40:	9c010000 	stcls	0, cr0, [r1], {-0}
    1b44:	0000063b 	andeq	r0, r0, fp, lsr r6
    1b48:	0016541f 	andseq	r5, r6, pc, lsl r4
    1b4c:	015d0100 	cmpeq	sp, r0, lsl #2
    1b50:	000004f9 	strdeq	r0, [r0], -r9
    1b54:	000005ae 	andeq	r0, r0, lr, lsr #11
    1b58:	0b251e00 	bleq	949360 <_Min_Stack_Size+0x948f60>
    1b5c:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    1b60:	00009701 	andeq	r9, r0, r1, lsl #14
    1b64:	0008a400 	andeq	sl, r8, r0, lsl #8
    1b68:	00000c08 	andeq	r0, r0, r8, lsl #24
    1b6c:	849c0100 	ldrhi	r0, [ip], #256	; 0x100
    1b70:	1f000006 	svcne	0x00000006
    1b74:	00001654 	andeq	r1, r0, r4, asr r6
    1b78:	f9016e01 			; <UNDEFINED> instruction: 0xf9016e01
    1b7c:	cf000004 	svcgt	0x00000004
    1b80:	1c000005 	stcne	0, cr0, [r0], {5}
    1b84:	0000000d 	andeq	r0, r0, sp
    1b88:	a2016e01 	andge	r6, r1, #1, 28
    1b8c:	01000000 	mrseq	r0, (UNDEF: 0)
    1b90:	0a422051 	beq	1089cdc <_Min_Stack_Size+0x10898dc>
    1b94:	70010000 	andvc	r0, r1, r0
    1b98:	00009701 	andeq	r9, r0, r1, lsl #14
    1b9c:	0005f000 	andeq	pc, r5, r0
    1ba0:	b41e0000 	ldrlt	r0, [lr], #-0
    1ba4:	01000009 	tsteq	r0, r9
    1ba8:	00a20188 	adceq	r0, r2, r8, lsl #3
    1bac:	08b00000 	ldmeq	r0!, {}	; <UNPREDICTABLE>
    1bb0:	00060800 	andeq	r0, r6, r0, lsl #16
    1bb4:	9c010000 	stcls	0, cr0, [r1], {-0}
    1bb8:	000006af 	andeq	r0, r0, pc, lsr #13
    1bbc:	0016541f 	andseq	r5, r6, pc, lsl r4
    1bc0:	01880100 	orreq	r0, r8, r0, lsl #2
    1bc4:	000004f9 	strdeq	r0, [r0], -r9
    1bc8:	0000061a 	andeq	r0, r0, sl, lsl r6
    1bcc:	0a041b00 	beq	1087d4 <_Min_Stack_Size+0x1083d4>
    1bd0:	9c010000 	stcls	0, cr0, [r1], {-0}
    1bd4:	0008b801 	andeq	fp, r8, r1, lsl #16
    1bd8:	00000408 	andeq	r0, r0, r8, lsl #8
    1bdc:	e29c0100 	adds	r0, ip, #0, 2
    1be0:	1c000006 	stcne	0, cr0, [r0], {6}
    1be4:	00001654 	andeq	r1, r0, r4, asr r6
    1be8:	f9019c01 			; <UNDEFINED> instruction: 0xf9019c01
    1bec:	01000004 	tsteq	r0, r4
    1bf0:	000d1c50 	andeq	r1, sp, r0, asr ip
    1bf4:	9c010000 	stcls	0, cr0, [r1], {-0}
    1bf8:	0000a201 	andeq	sl, r0, r1, lsl #4
    1bfc:	00510100 	subseq	r0, r1, r0, lsl #2
    1c00:	000a111b 	andeq	r1, sl, fp, lsl r1
    1c04:	01b10100 			; <UNDEFINED> instruction: 0x01b10100
    1c08:	080008bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, fp}
    1c0c:	00000004 	andeq	r0, r0, r4
    1c10:	07159c01 	ldreq	r9, [r5, -r1, lsl #24]
    1c14:	541c0000 	ldrpl	r0, [ip], #-0
    1c18:	01000016 	tsteq	r0, r6, lsl r0
    1c1c:	04f901b1 	ldrbteq	r0, [r9], #433	; 0x1b1
    1c20:	50010000 	andpl	r0, r1, r0
    1c24:	00000d1c 	andeq	r0, r0, ip, lsl sp
    1c28:	01b10100 			; <UNDEFINED> instruction: 0x01b10100
    1c2c:	000000a2 	andeq	r0, r0, r2, lsr #1
    1c30:	1b005101 	blne	1603c <_Min_Stack_Size+0x15c3c>
    1c34:	000009f6 	strdeq	r0, [r0], -r6
    1c38:	c001c701 	andgt	ip, r1, r1, lsl #14
    1c3c:	0a080008 	beq	201c64 <_Min_Stack_Size+0x201864>
    1c40:	01000000 	mrseq	r0, (UNDEF: 0)
    1c44:	0007569c 	muleq	r7, ip, r6
    1c48:	16541c00 	ldrbne	r1, [r4], -r0, lsl #24
    1c4c:	c7010000 	strgt	r0, [r1, -r0]
    1c50:	0004f901 	andeq	pc, r4, r1, lsl #18
    1c54:	1c500100 	ldfnee	f0, [r0], {-0}
    1c58:	0000000d 	andeq	r0, r0, sp
    1c5c:	a201c701 	andge	ip, r1, #262144	; 0x40000
    1c60:	01000000 	mrseq	r0, (UNDEF: 0)
    1c64:	09e51c51 	stmibeq	r5!, {r0, r4, r6, sl, fp, ip}^
    1c68:	c7010000 	strgt	r0, [r1, -r0]
    1c6c:	00025b01 	andeq	r5, r2, r1, lsl #22
    1c70:	00520100 	subseq	r0, r2, r0, lsl #2
    1c74:	000b031b 	andeq	r0, fp, fp, lsl r3
    1c78:	01e00100 	mvneq	r0, r0, lsl #2
    1c7c:	080008cc 	stmdaeq	r0, {r2, r3, r6, r7, fp}
    1c80:	00000004 	andeq	r0, r0, r4
    1c84:	07899c01 	streq	r9, [r9, r1, lsl #24]
    1c88:	541c0000 	ldrpl	r0, [ip], #-0
    1c8c:	01000016 	tsteq	r0, r6, lsl r0
    1c90:	04f901e0 	ldrbteq	r0, [r9], #480	; 0x1e0
    1c94:	50010000 	andpl	r0, r1, r0
    1c98:	000a731c 	andeq	r7, sl, ip, lsl r3
    1c9c:	01e00100 	mvneq	r0, r0, lsl #2
    1ca0:	000000a2 	andeq	r0, r0, r2, lsr #1
    1ca4:	1b005101 	blne	160b0 <_Min_Stack_Size+0x15cb0>
    1ca8:	00000b0e 	andeq	r0, r0, lr, lsl #22
    1cac:	d001f001 	andle	pc, r1, r1
    1cb0:	08080008 	stmdaeq	r8, {r3}
    1cb4:	01000000 	mrseq	r0, (UNDEF: 0)
    1cb8:	0007be9c 	muleq	r7, ip, lr
    1cbc:	16541c00 	ldrbne	r1, [r4], -r0, lsl #24
    1cc0:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    1cc4:	0004f901 	andeq	pc, r4, r1, lsl #18
    1cc8:	1f500100 	svcne	0x00500100
    1ccc:	0000000d 	andeq	r0, r0, sp
    1cd0:	a201f001 	andge	pc, r1, #1
    1cd4:	3b000000 	blcc	1cdc <_Min_Stack_Size+0x18dc>
    1cd8:	00000006 	andeq	r0, r0, r6
    1cdc:	0004e81b 	andeq	lr, r4, fp, lsl r8
    1ce0:	02430100 	subeq	r0, r3, #0, 2
    1ce4:	080008d8 	stmdaeq	r0, {r3, r4, r6, r7, fp}
    1ce8:	00000028 	andeq	r0, r0, r8, lsr #32
    1cec:	08259c01 	stmdaeq	r5!, {r0, sl, fp, ip, pc}
    1cf0:	541f0000 	ldrpl	r0, [pc], #-0	; 1cf8 <_Min_Stack_Size+0x18f8>
    1cf4:	01000016 	tsteq	r0, r6, lsl r0
    1cf8:	04f90243 	ldrbteq	r0, [r9], #579	; 0x243
    1cfc:	065c0000 	ldrbeq	r0, [ip], -r0
    1d00:	b91f0000 	ldmdblt	pc, {}	; <UNPREDICTABLE>
    1d04:	0100000a 	tsteq	r0, sl
    1d08:	00a20243 	adceq	r0, r2, r3, asr #4
    1d0c:	067d0000 	ldrbteq	r0, [sp], -r0
    1d10:	c81f0000 	ldmdagt	pc, {}	; <UNPREDICTABLE>
    1d14:	01000009 	tsteq	r0, r9
    1d18:	00970243 	addseq	r0, r7, r3, asr #4
    1d1c:	069e0000 	ldreq	r0, [lr], r0
    1d20:	d0200000 	eorle	r0, r0, r0
    1d24:	01000009 	tsteq	r0, r9
    1d28:	00b80245 	adcseq	r0, r8, r5, asr #4
    1d2c:	06bf0000 	ldrteq	r0, [pc], r0
    1d30:	1e200000 	cdpne	0, 2, cr0, cr0, cr0, {0}
    1d34:	0100000b 	tsteq	r0, fp
    1d38:	00b80246 	adcseq	r0, r8, r6, asr #4
    1d3c:	06fa0000 	ldrbteq	r0, [sl], r0
    1d40:	21000000 	mrscs	r0, (UNDEF: 0)
    1d44:	00000468 	andeq	r0, r0, r8, ror #8
    1d48:	e406a706 	str	sl, [r6], #-1798	; 0x706
    1d4c:	22000000 	andcs	r0, r0, #0
    1d50:	00000a4c 	andeq	r0, r0, ip, asr #20
    1d54:	23024607 	movwcs	r4, #9735	; 0x2607
    1d58:	000000b8 	strheq	r0, [r0], -r8
    1d5c:	0000ff23 	andeq	pc, r0, r3, lsr #30
    1d60:	ce000000 	cdpgt	0, 0, cr0, cr0, cr0, {0}
    1d64:	0400000e 	streq	r0, [r0], #-14
    1d68:	00074e00 	andeq	r4, r7, r0, lsl #28
    1d6c:	f8010400 			; <UNDEFINED> instruction: 0xf8010400
    1d70:	01000000 	mrseq	r0, (UNDEF: 0)
    1d74:	0000105d 	andeq	r1, r0, sp, asr r0
    1d78:	0000051b 	andeq	r0, r0, fp, lsl r5
    1d7c:	000001a0 	andeq	r0, r0, r0, lsr #3
    1d80:	00000000 	andeq	r0, r0, r0
    1d84:	00000a56 	andeq	r0, r0, r6, asr sl
    1d88:	d3060102 	movwle	r0, #24834	; 0x6102
    1d8c:	03000002 	movweq	r0, #2
    1d90:	00000297 	muleq	r0, r7, r2
    1d94:	00371c02 	eorseq	r1, r7, r2, lsl #24
    1d98:	01020000 	mrseq	r0, (UNDEF: 2)
    1d9c:	0002d108 	andeq	sp, r2, r8, lsl #2
    1da0:	05020200 	streq	r0, [r2, #-512]	; 0x200
    1da4:	00000095 	muleq	r0, r5, r0
    1da8:	00006d03 	andeq	r6, r0, r3, lsl #26
    1dac:	50260200 	eorpl	r0, r6, r0, lsl #4
    1db0:	02000000 	andeq	r0, r0, #0
    1db4:	03530702 	cmpeq	r3, #524288	; 0x80000
    1db8:	ad030000 	stcge	0, cr0, [r3, #-0]
    1dbc:	02000004 	andeq	r0, r0, #4
    1dc0:	00006237 	andeq	r6, r0, r7, lsr r2
    1dc4:	05040200 	streq	r0, [r4, #-512]	; 0x200
    1dc8:	0000023c 	andeq	r0, r0, ip, lsr r2
    1dcc:	00006203 	andeq	r6, r0, r3, lsl #4
    1dd0:	74380200 	ldrtvc	r0, [r8], #-512	; 0x200
    1dd4:	02000000 	andeq	r0, r0, #0
    1dd8:	03000704 	movweq	r0, #1796	; 0x704
    1ddc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    1de0:	00023705 	andeq	r3, r2, r5, lsl #14
    1de4:	07080200 	streq	r0, [r8, -r0, lsl #4]
    1de8:	000002fb 	strdeq	r0, [r0], -fp
    1dec:	69050404 	stmdbvs	r5, {r2, sl}
    1df0:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    1df4:	03050704 	movweq	r0, #22276	; 0x5704
    1df8:	99030000 	stmdbls	r3, {}	; <UNPREDICTABLE>
    1dfc:	03000002 	movweq	r0, #2
    1e00:	00002c2a 	andeq	r2, r0, sl, lsr #24
    1e04:	006f0300 	rsbeq	r0, pc, r0, lsl #6
    1e08:	36030000 	strcc	r0, [r3], -r0
    1e0c:	00000045 	andeq	r0, r0, r5, asr #32
    1e10:	0004af03 	andeq	sl, r4, r3, lsl #30
    1e14:	57410300 	strbpl	r0, [r1, -r0, lsl #6]
    1e18:	03000000 	movweq	r0, #0
    1e1c:	00000064 	andeq	r0, r0, r4, rrx
    1e20:	00694203 	rsbeq	r4, r9, r3, lsl #4
    1e24:	04020000 	streq	r0, [r2], #-0
    1e28:	00004607 	andeq	r4, r0, r7, lsl #12
    1e2c:	00b80500 	adcseq	r0, r8, r0, lsl #10
    1e30:	b8060000 	stmdalt	r6, {}	; <UNPREDICTABLE>
    1e34:	df000000 	svcle	0x00000000
    1e38:	07000000 	streq	r0, [r0, -r0]
    1e3c:	000000c3 	andeq	r0, r0, r3, asr #1
    1e40:	ad050001 	stcge	0, cr0, [r5, #-4]
    1e44:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1e48:	01f70401 	mvnseq	r0, r1, lsl #8
    1e4c:	000000fa 	strdeq	r0, [r0], -sl
    1e50:	0009f009 	andeq	pc, r9, r9
    1e54:	530a0000 	movwpl	r0, #40960	; 0xa000
    1e58:	01005445 	tsteq	r0, r5, asr #8
    1e5c:	0f130b00 	svceq	0x00130b00
    1e60:	f7040000 			; <UNDEFINED> instruction: 0xf7040000
    1e64:	0000e401 	andeq	lr, r0, r1, lsl #8
    1e68:	10540b00 	subsne	r0, r4, r0, lsl #22
    1e6c:	f7040000 			; <UNDEFINED> instruction: 0xf7040000
    1e70:	0000e401 	andeq	lr, r0, r1, lsl #8
    1e74:	04010800 	streq	r0, [r1], #-2048	; 0x800
    1e78:	012801f9 	strdeq	r0, [r8, -r9]!
    1e7c:	c7090000 	strgt	r0, [r9, -r0]
    1e80:	00000003 	andeq	r0, r0, r3
    1e84:	00024509 	andeq	r4, r2, r9, lsl #10
    1e88:	0b000100 	bleq	2290 <_Min_Stack_Size+0x1e90>
    1e8c:	00000500 	andeq	r0, r0, r0, lsl #10
    1e90:	1201f904 	andne	pc, r1, #4, 18	; 0x10000
    1e94:	08000001 	stmdaeq	r0, {r0}
    1e98:	01fc0401 	mvnseq	r0, r1, lsl #8
    1e9c:	0000014a 	andeq	r0, r0, sl, asr #2
    1ea0:	000e8809 	andeq	r8, lr, r9, lsl #16
    1ea4:	39090000 	stmdbcc	r9, {}	; <UNPREDICTABLE>
    1ea8:	01000011 	tsteq	r0, r1, lsl r0
    1eac:	0d080b00 	vstreq	d0, [r8, #-0]
    1eb0:	fc040000 	stc2	0, cr0, [r4], {-0}
    1eb4:	00013401 	andeq	r3, r1, r1, lsl #8
    1eb8:	04900c00 	ldreq	r0, [r0], #3072	; 0xc00
    1ebc:	02ff0455 	rscseq	r0, pc, #1426063360	; 0x55000000
    1ec0:	430d0000 	movwmi	r0, #53248	; 0xd000
    1ec4:	57040052 	smlsdpl	r4, r2, r0, r0
    1ec8:	0000ca04 	andeq	ip, r0, r4, lsl #20
    1ecc:	150e0000 	strne	r0, [lr, #-0]
    1ed0:	04000006 	streq	r0, [r0], #-6
    1ed4:	00ca0458 	sbceq	r0, sl, r8, asr r4
    1ed8:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    1edc:	000007bb 			; <UNDEFINED> instruction: 0x000007bb
    1ee0:	ca045904 	bgt	1182f8 <_Min_Stack_Size+0x117ef8>
    1ee4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1ee8:	5249430d 	subpl	r4, r9, #872415232	; 0x34000000
    1eec:	045a0400 	ldrbeq	r0, [sl], #-1024	; 0x400
    1ef0:	000000ca 	andeq	r0, r0, sl, asr #1
    1ef4:	06690e0c 	strbteq	r0, [r9], -ip, lsl #28
    1ef8:	5b040000 	blpl	101f00 <_Min_Stack_Size+0x101b00>
    1efc:	0000ca04 	andeq	ip, r0, r4, lsl #20
    1f00:	2e0e1000 	cdpcs	0, 0, cr1, cr14, cr0, {0}
    1f04:	04000006 	streq	r0, [r0], #-6
    1f08:	00ca045c 	sbceq	r0, sl, ip, asr r4
    1f0c:	0e140000 	cdpeq	0, 1, cr0, cr4, cr0, {0}
    1f10:	0000079e 	muleq	r0, lr, r7
    1f14:	ca045d04 	bgt	11932c <_Min_Stack_Size+0x118f2c>
    1f18:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    1f1c:	0003f50e 	andeq	pc, r3, lr, lsl #10
    1f20:	045e0400 	ldrbeq	r0, [lr], #-1024	; 0x400
    1f24:	000000b8 	strheq	r0, [r0], -r8
    1f28:	061d0e1c 			; <UNDEFINED> instruction: 0x061d0e1c
    1f2c:	5f040000 	svcpl	0x00040000
    1f30:	0000ca04 	andeq	ip, r0, r4, lsl #20
    1f34:	b30e2000 	movwlt	r2, #57344	; 0xe000
    1f38:	04000006 	streq	r0, [r0], #-6
    1f3c:	00ca0460 	sbceq	r0, sl, r0, ror #8
    1f40:	0e240000 	cdpeq	0, 2, cr0, cr4, cr0, {0}
    1f44:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1f48:	cf046104 	svcgt	0x00046104
    1f4c:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    1f50:	00077e0e 	andeq	r7, r7, lr, lsl #28
    1f54:	04620400 	strbteq	r0, [r2], #-1024	; 0x400
    1f58:	000000ca 	andeq	r0, r0, sl, asr #1
    1f5c:	06260e30 			; <UNDEFINED> instruction: 0x06260e30
    1f60:	63040000 	movwvs	r0, #16384	; 0x4000
    1f64:	0000ca04 	andeq	ip, r0, r4, lsl #20
    1f68:	d20e3400 	andle	r3, lr, #0, 8
    1f6c:	04000006 	streq	r0, [r0], #-6
    1f70:	00ca0464 	sbceq	r0, sl, r4, ror #8
    1f74:	0e380000 	cdpeq	0, 3, cr0, cr8, cr0, {0}
    1f78:	00000409 	andeq	r0, r0, r9, lsl #8
    1f7c:	b8046504 	stmdalt	r4, {r2, r8, sl, sp, lr}
    1f80:	3c000000 	stccc	0, cr0, [r0], {-0}
    1f84:	0006850e 	andeq	r8, r6, lr, lsl #10
    1f88:	04660400 	strbteq	r0, [r6], #-1024	; 0x400
    1f8c:	000000ca 	andeq	r0, r0, sl, asr #1
    1f90:	06ea0e40 	strbteq	r0, [sl], r0, asr #28
    1f94:	67040000 	strvs	r0, [r4, -r0]
    1f98:	0000ca04 	andeq	ip, r0, r4, lsl #20
    1f9c:	130e4400 	movwne	r4, #58368	; 0xe400
    1fa0:	04000004 	streq	r0, [r0], #-4
    1fa4:	00cf0468 	sbceq	r0, pc, r8, ror #8
    1fa8:	0e480000 	cdpeq	0, 4, cr0, cr8, cr0, {0}
    1fac:	0000060b 	andeq	r0, r0, fp, lsl #12
    1fb0:	ca046904 	bgt	11c3c8 <_Min_Stack_Size+0x11bfc8>
    1fb4:	50000000 	andpl	r0, r0, r0
    1fb8:	0007630e 	andeq	r6, r7, lr, lsl #6
    1fbc:	046a0400 	strbteq	r0, [sl], #-1024	; 0x400
    1fc0:	000000ca 	andeq	r0, r0, sl, asr #1
    1fc4:	06720e54 			; <UNDEFINED> instruction: 0x06720e54
    1fc8:	6b040000 	blvs	101fd0 <_Min_Stack_Size+0x101bd0>
    1fcc:	0000ca04 	andeq	ip, r0, r4, lsl #20
    1fd0:	1d0e5800 	stcne	8, cr5, [lr, #-0]
    1fd4:	04000004 	streq	r0, [r0], #-4
    1fd8:	00b8046c 	adcseq	r0, r8, ip, ror #8
    1fdc:	0e5c0000 	cdpeq	0, 5, cr0, cr12, cr0, {0}
    1fe0:	0000072e 	andeq	r0, r0, lr, lsr #14
    1fe4:	ca046d04 	bgt	11d3fc <_Min_Stack_Size+0x11cffc>
    1fe8:	60000000 	andvs	r0, r0, r0
    1fec:	0007c60e 	andeq	ip, r7, lr, lsl #12
    1ff0:	046e0400 	strbteq	r0, [lr], #-1024	; 0x400
    1ff4:	000000ca 	andeq	r0, r0, sl, asr #1
    1ff8:	04270e64 	strteq	r0, [r7], #-3684	; 0xe64
    1ffc:	6f040000 	svcvs	0x00040000
    2000:	0000cf04 	andeq	ip, r0, r4, lsl #30
    2004:	370e6800 	strcc	r6, [lr, -r0, lsl #16]
    2008:	04000006 	streq	r0, [r0], #-6
    200c:	00ca0470 	sbceq	r0, sl, r0, ror r4
    2010:	0d700000 	ldcleq	0, cr0, [r0, #-0]
    2014:	00525343 	subseq	r5, r2, r3, asr #6
    2018:	ca047104 	bgt	11e430 <_Min_Stack_Size+0x11e030>
    201c:	74000000 	strvc	r0, [r0], #-0
    2020:	0004310e 	andeq	r3, r4, lr, lsl #2
    2024:	04720400 	ldrbteq	r0, [r2], #-1024	; 0x400
    2028:	000000cf 	andeq	r0, r0, pc, asr #1
    202c:	06530e78 			; <UNDEFINED> instruction: 0x06530e78
    2030:	73040000 	movwvc	r0, #16384	; 0x4000
    2034:	0000ca04 	andeq	ip, r0, r4, lsl #20
    2038:	3c0e8000 	stccc	0, cr8, [lr], {-0}
    203c:	04000006 	streq	r0, [r0], #-6
    2040:	00ca0474 	sbceq	r0, sl, r4, ror r4
    2044:	0e840000 	cdpeq	0, 8, cr0, cr4, cr0, {0}
    2048:	000007b5 			; <UNDEFINED> instruction: 0x000007b5
    204c:	ca047504 	bgt	11f464 <_Min_Stack_Size+0x11f064>
    2050:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    2054:	00068d0e 	andeq	r8, r6, lr, lsl #26
    2058:	04760400 	ldrbteq	r0, [r6], #-1024	; 0x400
    205c:	000000ca 	andeq	r0, r0, sl, asr #1
    2060:	a70b008c 	strge	r0, [fp, -ip, lsl #1]
    2064:	04000006 	streq	r0, [r0], #-6
    2068:	01560478 	cmpeq	r6, r8, ror r4
    206c:	100f0000 	andne	r0, pc, r0
    2070:	03443005 	movteq	r3, #16389	; 0x4005
    2074:	83100000 	tsthi	r0, #0
    2078:	0500000b 	streq	r0, [r0, #-11]
    207c:	0000b832 	andeq	fp, r0, r2, lsr r8
    2080:	4c100000 	ldcmi	0, cr0, [r0], {-0}
    2084:	0500000d 	streq	r0, [r0, #-13]
    2088:	0000b833 	andeq	fp, r0, r3, lsr r8
    208c:	cf100400 	svcgt	0x00100400
    2090:	0500000f 	streq	r0, [r0, #-15]
    2094:	0000b834 	andeq	fp, r0, r4, lsr r8
    2098:	59100800 	ldmdbpl	r0, {fp}
    209c:	0500000c 	streq	r0, [r0, #-12]
    20a0:	0000b835 	andeq	fp, r0, r5, lsr r8
    20a4:	03000c00 	movweq	r0, #3072	; 0xc00
    20a8:	0000114f 	andeq	r1, r0, pc, asr #2
    20ac:	030b3605 	movweq	r3, #46597	; 0xb605
    20b0:	0c110000 	ldceq	0, cr0, [r1], {-0}
    20b4:	0100000f 	tsteq	r0, pc
    20b8:	00fa082c 	rscseq	r0, sl, ip, lsr #16
    20bc:	91010000 	mrsls	r0, (UNDEF: 1)
    20c0:	12000003 	andne	r0, r0, #3
    20c4:	00000cec 	andeq	r0, r0, ip, ror #25
    20c8:	97082c01 	strls	r2, [r8, -r1, lsl #24]
    20cc:	13000000 	movwne	r0, #0
    20d0:	00706d74 	rsbseq	r6, r0, r4, ror sp
    20d4:	b8082e01 	stmdalt	r8, {r0, r9, sl, fp, sp}
    20d8:	14000000 	strne	r0, [r0], #-0
    20dc:	00000b79 	andeq	r0, r0, r9, ror fp
    20e0:	b8082f01 	stmdalt	r8, {r0, r8, r9, sl, fp, sp}
    20e4:	14000000 	strne	r0, [r0], #-0
    20e8:	00000a42 	andeq	r0, r0, r2, asr #20
    20ec:	fa083001 	blx	20e0f8 <_Min_Stack_Size+0x20dcf8>
    20f0:	00000000 	andeq	r0, r0, r0
    20f4:	00103215 	andseq	r3, r0, r5, lsl r2
    20f8:	00d50100 	sbcseq	r0, r5, r0, lsl #2
    20fc:	50080009 	andpl	r0, r8, r9
    2100:	01000000 	mrseq	r0, (UNDEF: 0)
    2104:	0f1e169c 	svceq	0x001e169c
    2108:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    210c:	00095001 	andeq	r5, r9, r1
    2110:	00001008 	andeq	r1, r0, r8
    2114:	c79c0100 	ldrgt	r0, [ip, r0, lsl #2]
    2118:	17000003 	strne	r0, [r0, -r3]
    211c:	00000b94 	muleq	r0, r4, fp
    2120:	97010801 	strls	r0, [r1, -r1, lsl #16]
    2124:	01000000 	mrseq	r0, (UNDEF: 0)
    2128:	36180050 			; <UNDEFINED> instruction: 0x36180050
    212c:	0100000d 	tsteq	r0, sp
    2130:	014a0120 	cmpeq	sl, r0, lsr #2
    2134:	09600000 	stmdbeq	r0!, {}^	; <UNPREDICTABLE>
    2138:	00380800 	eorseq	r0, r8, r0, lsl #16
    213c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2140:	00000488 	andeq	r0, r0, r8, lsl #9
    2144:	0010b719 	andseq	fp, r0, r9, lsl r7
    2148:	01220100 	teqeq	r2, r0, lsl #2
    214c:	000000ca 	andeq	r0, r0, sl, asr #1
    2150:	1a7c9102 	bne	1f26560 <_Min_Stack_Size+0x1f26160>
    2154:	00001011 	andeq	r1, r0, r1, lsl r0
    2158:	4a012301 	bmi	4ad64 <_Min_Stack_Size+0x4a964>
    215c:	19000001 	stmdbne	r0, {r0}
    2160:	14000007 	strne	r0, [r0], #-7
    2164:	0000100e 	andeq	r1, r0, lr
    2168:	fa012401 	blx	4b174 <_Min_Stack_Size+0x4ad74>
    216c:	1b000000 	blne	2174 <_Min_Stack_Size+0x1d74>
    2170:	0000034f 	andeq	r0, r0, pc, asr #6
    2174:	08000964 	stmdaeq	r0, {r2, r5, r6, r8, fp}
    2178:	00000188 	andeq	r0, r0, r8, lsl #3
    217c:	48012801 	stmdami	r1, {r0, fp, sp}
    2180:	1c000004 	stcne	0, cr0, [r0], {4}
    2184:	00000360 	andeq	r0, r0, r0, ror #6
    2188:	01881d31 	orreq	r1, r8, r1, lsr sp
    218c:	6c1e0000 	ldcvs	0, cr0, [lr], {-0}
    2190:	4a000003 	bmi	21a4 <_Min_Stack_Size+0x1da4>
    2194:	1e000007 	cdpne	0, 0, cr0, cr0, cr7, {0}
    2198:	00000378 	andeq	r0, r0, r8, ror r3
    219c:	0000076a 	andeq	r0, r0, sl, ror #14
    21a0:	0003841e 	andeq	r8, r3, lr, lsl r4
    21a4:	00078900 	andeq	r8, r7, r0, lsl #18
    21a8:	1f000000 	svcne	0x00000000
    21ac:	0000034f 	andeq	r0, r0, pc, asr #6
    21b0:	0800097c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, fp}
    21b4:	00000004 	andeq	r0, r0, r4
    21b8:	20012c01 	andcs	r2, r1, r1, lsl #24
    21bc:	00000360 	andeq	r0, r0, r0, ror #6
    21c0:	000007a9 	andeq	r0, r0, r9, lsr #15
    21c4:	00097c21 	andeq	r7, r9, r1, lsr #24
    21c8:	00000408 	andeq	r0, r0, r8, lsl #8
    21cc:	036c1e00 	cmneq	ip, #0, 28
    21d0:	07be0000 	ldreq	r0, [lr, r0]!
    21d4:	781e0000 	ldmdavc	lr, {}	; <UNPREDICTABLE>
    21d8:	de000003 	cdple	0, 0, cr0, cr0, cr3, {0}
    21dc:	1e000007 	cdpne	0, 0, cr0, cr0, cr7, {0}
    21e0:	00000384 	andeq	r0, r0, r4, lsl #7
    21e4:	000007fd 	strdeq	r0, [r0], -sp
    21e8:	16000000 	strne	r0, [r0], -r0
    21ec:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    21f0:	98013f01 	stmdals	r1, {r0, r8, r9, sl, fp, ip, sp}
    21f4:	14080009 	strne	r0, [r8], #-9
    21f8:	01000000 	mrseq	r0, (UNDEF: 0)
    21fc:	0004bf9c 	muleq	r4, ip, pc	; <UNPREDICTABLE>
    2200:	0ffa2200 	svceq	0x00fa2200
    2204:	3f010000 	svccc	0x00010000
    2208:	00009701 	andeq	r9, r0, r1, lsl #14
    220c:	00081100 	andeq	r1, r8, r0, lsl #2
    2210:	0c521a00 	mrrceq	10, 0, r1, r2, cr0
    2214:	41010000 	mrsmi	r0, (UNDEF: 1)
    2218:	0000b801 	andeq	fp, r0, r1, lsl #16
    221c:	00083200 	andeq	r3, r8, r0, lsl #4
    2220:	2b160000 	blcs	582228 <_Min_Stack_Size+0x581e28>
    2224:	0100000e 	tsteq	r0, lr
    2228:	09ac0163 	stmibeq	ip!, {r0, r1, r5, r6, r8}
    222c:	000c0800 	andeq	r0, ip, r0, lsl #16
    2230:	9c010000 	stcls	0, cr0, [r1], {-0}
    2234:	000004e4 	andeq	r0, r0, r4, ror #9
    2238:	00084a17 	andeq	r4, r8, r7, lsl sl
    223c:	01630100 	cmneq	r3, r0, lsl #2
    2240:	00000128 	andeq	r0, r0, r8, lsr #2
    2244:	16005001 	strne	r5, [r0], -r1
    2248:	00000cde 	ldrdeq	r0, [r0], -lr
    224c:	b8017c01 	stmdalt	r1, {r0, sl, fp, ip, sp, lr}
    2250:	20080009 	andcs	r0, r8, r9
    2254:	01000000 	mrseq	r0, (UNDEF: 0)
    2258:	0005099c 	muleq	r5, ip, r9
    225c:	0b451700 	bleq	1147e64 <_Min_Stack_Size+0x1147a64>
    2260:	7c010000 	stcvc	0, cr0, [r1], {-0}
    2264:	00009701 	andeq	r9, r0, r1, lsl #14
    2268:	00500100 	subseq	r0, r0, r0, lsl #2
    226c:	00110a16 	andseq	r0, r1, r6, lsl sl
    2270:	01a40100 			; <UNDEFINED> instruction: 0x01a40100
    2274:	080009d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, fp}
    2278:	0000000c 	andeq	r0, r0, ip
    227c:	052e9c01 	streq	r9, [lr, #-3073]!	; 0xc01
    2280:	4a170000 	bmi	5c2288 <_Min_Stack_Size+0x5c1e88>
    2284:	01000008 	tsteq	r0, r8
    2288:	012801a4 	smulwbeq	r8, r4, r1
    228c:	50010000 	andpl	r0, r1, r0
    2290:	11411600 	cmpne	r1, r0, lsl #12
    2294:	cf010000 	svcgt	0x00010000
    2298:	0009e401 	andeq	lr, r9, r1, lsl #8
    229c:	00002408 	andeq	r2, r0, r8, lsl #8
    22a0:	959c0100 	ldrls	r0, [ip, #256]	; 0x100
    22a4:	22000005 	andcs	r0, r0, #5
    22a8:	00000d14 	andeq	r0, r0, r4, lsl sp
    22ac:	b801cf01 	stmdalt	r1, {r0, r8, r9, sl, fp, lr, pc}
    22b0:	5c000000 	stcpl	0, cr0, [r0], {-0}
    22b4:	22000008 	andcs	r0, r0, #8
    22b8:	00000c01 	andeq	r0, r0, r1, lsl #24
    22bc:	b801cf01 	stmdalt	r1, {r0, r8, r9, sl, fp, lr, pc}
    22c0:	7d000000 	stcvc	0, cr0, [r0, #-0]
    22c4:	22000008 	andcs	r0, r0, #8
    22c8:	00000bc2 	andeq	r0, r0, r2, asr #23
    22cc:	b801cf01 	stmdalt	r1, {r0, r8, r9, sl, fp, lr, pc}
    22d0:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    22d4:	22000008 	andcs	r0, r0, #8
    22d8:	00000be1 	andeq	r0, r0, r1, ror #23
    22dc:	b801cf01 	stmdalt	r1, {r0, r8, r9, sl, fp, lr, pc}
    22e0:	bf000000 	svclt	0x00000000
    22e4:	22000008 	andcs	r0, r0, #8
    22e8:	00000be6 	andeq	r0, r0, r6, ror #23
    22ec:	b801cf01 	stmdalt	r1, {r0, r8, r9, sl, fp, lr, pc}
    22f0:	e0000000 	and	r0, r0, r0
    22f4:	00000008 	andeq	r0, r0, r8
    22f8:	000f6f16 	andeq	r6, pc, r6, lsl pc	; <UNPREDICTABLE>
    22fc:	01e60100 	mvneq	r0, r0, lsl #2
    2300:	08000a08 	stmdaeq	r0, {r3, r9, fp}
    2304:	0000000c 	andeq	r0, r0, ip
    2308:	05ba9c01 	ldreq	r9, [sl, #3073]!	; 0xc01
    230c:	4a170000 	bmi	5c2314 <_Min_Stack_Size+0x5c1f14>
    2310:	01000008 	tsteq	r0, r8
    2314:	012801e6 	smulwteq	r8, r6, r1
    2318:	50010000 	andpl	r0, r1, r0
    231c:	0e1a1600 	cfmsub32eq	mvax0, mvfx1, mvfx10, mvfx0
    2320:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    2324:	000a1402 	andeq	r1, sl, r2, lsl #8
    2328:	00001808 	andeq	r1, r0, r8, lsl #16
    232c:	019c0100 	orrseq	r0, ip, r0, lsl #2
    2330:	22000006 	andcs	r0, r0, #6
    2334:	00001018 	andeq	r1, r0, r8, lsl r0
    2338:	b8022801 	stmdalt	r2, {r0, fp, sp}
    233c:	f4000000 	vst4.8	{d0-d3}, [r0], r0
    2340:	22000008 	andcs	r0, r0, #8
    2344:	0000103d 	andeq	r1, r0, sp, lsr r0
    2348:	b8022801 	stmdalt	r2, {r0, fp, sp}
    234c:	15000000 	strne	r0, [r0, #-0]
    2350:	22000009 	andcs	r0, r0, #9
    2354:	00001045 	andeq	r1, r0, r5, asr #32
    2358:	b8022801 	stmdalt	r2, {r0, fp, sp}
    235c:	36000000 	strcc	r0, [r0], -r0
    2360:	00000009 	andeq	r0, r0, r9
    2364:	000d9516 	andeq	r9, sp, r6, lsl r5
    2368:	02390100 	eorseq	r0, r9, #0, 2
    236c:	08000a2c 	stmdaeq	r0, {r2, r3, r5, r9, fp}
    2370:	0000000c 	andeq	r0, r0, ip
    2374:	06269c01 	strteq	r9, [r6], -r1, lsl #24
    2378:	4a170000 	bmi	5c2380 <_Min_Stack_Size+0x5c1f80>
    237c:	01000008 	tsteq	r0, r8
    2380:	01280239 	teqeq	r8, r9, lsr r2
    2384:	50010000 	andpl	r0, r1, r0
    2388:	0eb81600 	cdpeq	6, 11, cr1, cr8, cr0, {0}
    238c:	56010000 	strpl	r0, [r1], -r0
    2390:	000a3802 	andeq	r3, sl, r2, lsl #16
    2394:	00001808 	andeq	r1, r0, r8, lsl #16
    2398:	6d9c0100 	ldfvss	f0, [ip]
    239c:	22000006 	andcs	r0, r0, #6
    23a0:	00000f43 	andeq	r0, r0, r3, asr #30
    23a4:	b8025601 	stmdalt	r2, {r0, r9, sl, ip, lr}
    23a8:	57000000 	strpl	r0, [r0, -r0]
    23ac:	22000009 	andcs	r0, r0, #9
    23b0:	00000f4b 	andeq	r0, r0, fp, asr #30
    23b4:	b8025601 	stmdalt	r2, {r0, r9, sl, ip, lr}
    23b8:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    23bc:	22000009 	andcs	r0, r0, #9
    23c0:	00000f53 	andeq	r0, r0, r3, asr pc
    23c4:	b8025601 	stmdalt	r2, {r0, r9, sl, ip, lr}
    23c8:	99000000 	stmdbls	r0, {}	; <UNPREDICTABLE>
    23cc:	00000009 	andeq	r0, r0, r9
    23d0:	000b4d16 	andeq	r4, fp, r6, lsl sp
    23d4:	02680100 	rsbeq	r0, r8, #0, 2
    23d8:	08000a50 	stmdaeq	r0, {r4, r6, r9, fp}
    23dc:	0000000c 	andeq	r0, r0, ip
    23e0:	06929c01 	ldreq	r9, [r2], r1, lsl #24
    23e4:	4a170000 	bmi	5c23ec <_Min_Stack_Size+0x5c1fec>
    23e8:	01000008 	tsteq	r0, r8
    23ec:	01280268 	teqeq	r8, r8, ror #4
    23f0:	50010000 	andpl	r0, r1, r0
    23f4:	0e8e1600 	cdpeq	6, 8, cr1, cr14, cr0, {0}
    23f8:	7a010000 	bvc	42400 <_Min_Stack_Size+0x42000>
    23fc:	000a5c02 	andeq	r5, sl, r2, lsl #24
    2400:	00000c08 	andeq	r0, r0, r8, lsl #24
    2404:	b79c0100 	ldrlt	r0, [ip, r0, lsl #2]
    2408:	17000006 	strne	r0, [r0, -r6]
    240c:	0000084a 	andeq	r0, r0, sl, asr #16
    2410:	28027a01 	stmdacs	r2, {r0, r9, fp, ip, sp, lr}
    2414:	01000001 	tsteq	r0, r1
    2418:	7b160050 	blvc	582560 <_Min_Stack_Size+0x582160>
    241c:	0100000d 	tsteq	r0, sp
    2420:	0a680293 	beq	1a02e74 <_Min_Stack_Size+0x1a02a74>
    2424:	00140800 	andseq	r0, r4, r0, lsl #16
    2428:	9c010000 	stcls	0, cr0, [r1], {-0}
    242c:	000006fe 	strdeq	r0, [r0], -lr
    2430:	000b9c22 	andeq	r9, fp, r2, lsr #24
    2434:	02930100 	addseq	r0, r3, #0, 2
    2438:	000000b8 	strheq	r0, [r0], -r8
    243c:	000009ba 			; <UNDEFINED> instruction: 0x000009ba
    2440:	000ec922 	andeq	ip, lr, r2, lsr #18
    2444:	02930100 	addseq	r0, r3, #0, 2
    2448:	000000b8 	strheq	r0, [r0], -r8
    244c:	000009db 	ldrdeq	r0, [r0], -fp
    2450:	000c521a 	andeq	r5, ip, sl, lsl r2
    2454:	02950100 	addseq	r0, r5, #0, 2
    2458:	000000b8 	strheq	r0, [r0], -r8
    245c:	000009fc 	strdeq	r0, [r0], -ip
    2460:	10fb1600 	rscsne	r1, fp, r0, lsl #12
    2464:	b9010000 	stmdblt	r1, {}	; <UNPREDICTABLE>
    2468:	000a7c02 	andeq	r7, sl, r2, lsl #24
    246c:	00001408 	andeq	r1, r0, r8, lsl #8
    2470:	459c0100 	ldrmi	r0, [ip, #256]	; 0x100
    2474:	22000007 	andcs	r0, r0, #7
    2478:	00000eec 	andeq	r0, r0, ip, ror #29
    247c:	b802b901 	stmdalt	r2, {r0, r8, fp, ip, sp, pc}
    2480:	39000000 	stmdbcc	r0, {}	; <UNPREDICTABLE>
    2484:	2200000a 	andcs	r0, r0, #10
    2488:	00000e54 	andeq	r0, r0, r4, asr lr
    248c:	b802b901 	stmdalt	r2, {r0, r8, fp, ip, sp, pc}
    2490:	5a000000 	bpl	2498 <_Min_Stack_Size+0x2098>
    2494:	1a00000a 	bne	24c4 <_Min_Stack_Size+0x20c4>
    2498:	00000c52 	andeq	r0, r0, r2, asr ip
    249c:	b802bb01 	stmdalt	r2, {r0, r8, r9, fp, ip, sp, pc}
    24a0:	7b000000 	blvc	24a8 <_Min_Stack_Size+0x20a8>
    24a4:	0000000a 	andeq	r0, r0, sl
    24a8:	000ccd16 	andeq	ip, ip, r6, lsl sp
    24ac:	035f0100 	cmpeq	pc, #0, 2
    24b0:	08000a90 	stmdaeq	r0, {r4, r7, r9, fp}
    24b4:	00000014 	andeq	r0, r0, r4, lsl r0
    24b8:	077c9c01 	ldrbeq	r9, [ip, -r1, lsl #24]!
    24bc:	be220000 	cdplt	0, 2, cr0, cr2, cr0, {0}
    24c0:	0100000f 	tsteq	r0, pc
    24c4:	00b8035f 	adcseq	r0, r8, pc, asr r3
    24c8:	0ab80000 	beq	fee024d0 <_estack+0xdedd24d0>
    24cc:	521a0000 	andspl	r0, sl, #0
    24d0:	0100000c 	tsteq	r0, ip
    24d4:	00b80361 	adcseq	r0, r8, r1, ror #6
    24d8:	0ad90000 	beq	ff6424e0 <_estack+0xdf6124e0>
    24dc:	23000000 	movwcs	r0, #0
    24e0:	00000d22 	andeq	r0, r0, r2, lsr #26
    24e4:	97037b01 	strls	r7, [r3, -r1, lsl #22]
    24e8:	a4000000 	strge	r0, [r0], #-0
    24ec:	1008000a 	andne	r0, r8, sl
    24f0:	01000000 	mrseq	r0, (UNDEF: 0)
    24f4:	0cbe169c 	ldceq	6, cr1, [lr], #624	; 0x270
    24f8:	94010000 	strls	r0, [r1], #-0
    24fc:	000ab403 	andeq	fp, sl, r3, lsl #8
    2500:	00001408 	andeq	r1, r0, r8, lsl #8
    2504:	c99c0100 	ldmibgt	ip, {r8}
    2508:	22000007 	andcs	r0, r0, #7
    250c:	00000d8a 	andeq	r0, r0, sl, lsl #27
    2510:	b8039401 	stmdalt	r3, {r0, sl, ip, pc}
    2514:	03000000 	movweq	r0, #0
    2518:	1a00000b 	bne	254c <_Min_Stack_Size+0x214c>
    251c:	00000c52 	andeq	r0, r0, r2, asr ip
    2520:	b8039601 	stmdalt	r3, {r0, r9, sl, ip, pc}
    2524:	24000000 	strcs	r0, [r0], #-0
    2528:	0000000b 	andeq	r0, r0, fp
    252c:	000c8016 	andeq	r8, ip, r6, lsl r0
    2530:	03b40100 			; <UNDEFINED> instruction: 0x03b40100
    2534:	08000ac8 	stmdaeq	r0, {r3, r6, r7, r9, fp}
    2538:	00000014 	andeq	r0, r0, r4, lsl r0
    253c:	08009c01 	stmdaeq	r0, {r0, sl, fp, ip, pc}
    2540:	3c220000 	stccc	0, cr0, [r2], #-0
    2544:	0100000b 	tsteq	r0, fp
    2548:	00b803b4 	ldrhteq	r0, [r8], r4
    254c:	0b4e0000 	bleq	1382554 <_Min_Stack_Size+0x1382154>
    2550:	521a0000 	andspl	r0, sl, #0
    2554:	0100000c 	tsteq	r0, ip
    2558:	00b803b6 	ldrhteq	r0, [r8], r6
    255c:	0b6f0000 	bleq	1bc2564 <_Min_Stack_Size+0x1bc2164>
    2560:	16000000 	strne	r0, [r0], -r0
    2564:	00000fae 	andeq	r0, r0, lr, lsr #31
    2568:	dc03d301 	stcle	3, cr13, [r3], {1}
    256c:	1408000a 	strne	r0, [r8], #-10
    2570:	01000000 	mrseq	r0, (UNDEF: 0)
    2574:	0008379c 	muleq	r8, ip, r7
    2578:	0b3c2200 	bleq	f0ad80 <_Min_Stack_Size+0xf0a980>
    257c:	d3010000 	movwle	r0, #4096	; 0x1000
    2580:	0000b803 	andeq	fp, r0, r3, lsl #16
    2584:	000b9900 	andeq	r9, fp, r0, lsl #18
    2588:	0c521a00 	mrrceq	10, 0, r1, r2, cr0
    258c:	d5010000 	strle	r0, [r1, #-0]
    2590:	0000b803 	andeq	fp, r0, r3, lsl #16
    2594:	000bba00 	andeq	fp, fp, r0, lsl #20
    2598:	20160000 	andscs	r0, r6, r0
    259c:	01000010 	tsteq	r0, r0, lsl r0
    25a0:	0af00407 	beq	ffc035c4 <_estack+0xdfbd35c4>
    25a4:	00900800 	addseq	r0, r0, r0, lsl #16
    25a8:	9c010000 	stcls	0, cr0, [r1], {-0}
    25ac:	000008bc 			; <UNDEFINED> instruction: 0x000008bc
    25b0:	000c1517 	andeq	r1, ip, r7, lsl r5
    25b4:	04070100 	streq	r0, [r7], #-256	; 0x100
    25b8:	000008bc 			; <UNDEFINED> instruction: 0x000008bc
    25bc:	74245001 	strtvc	r5, [r4], #-1
    25c0:	0100706d 	tsteq	r0, sp, rrx
    25c4:	00b80409 	adcseq	r0, r8, r9, lsl #8
    25c8:	0be40000 	bleq	ff9025d0 <_estack+0xdf8d25d0>
    25cc:	a31a0000 	tstge	sl, #0
    25d0:	0100000d 	tsteq	r0, sp
    25d4:	00b80409 	adcseq	r0, r8, r9, lsl #8
    25d8:	0c7b0000 	ldcleq	0, cr0, [fp], #-0
    25dc:	381a0000 	ldmdacc	sl, {}	; <UNPREDICTABLE>
    25e0:	01000007 	tsteq	r0, r7
    25e4:	00b80409 	adcseq	r0, r8, r9, lsl #8
    25e8:	0ccb0000 	stcleq	0, cr0, [fp], {0}
    25ec:	df1a0000 	svcle	0x001a0000
    25f0:	01000006 	tsteq	r0, r6
    25f4:	00b80409 	adcseq	r0, r8, r9, lsl #8
    25f8:	0cf60000 	ldcleq	0, cr0, [r6]
    25fc:	c81a0000 	ldmdagt	sl, {}	; <UNPREDICTABLE>
    2600:	01000006 	tsteq	r0, r6
    2604:	00b80409 	adcseq	r0, r8, r9, lsl #8
    2608:	0d2d0000 	stceq	0, cr0, [sp, #-0]
    260c:	da1a0000 	ble	682614 <_Min_Stack_Size+0x682214>
    2610:	01000006 	tsteq	r0, r6
    2614:	00b80409 	adcseq	r0, r8, r9, lsl #8
    2618:	0d600000 	stcleq	0, cr0, [r0, #-0]
    261c:	25000000 	strcs	r0, [r0, #-0]
    2620:	00034404 	andeq	r4, r3, r4, lsl #8
    2624:	0d6a1600 	stcleq	6, cr1, [sl, #-0]
    2628:	84010000 	strhi	r0, [r1], #-0
    262c:	000b8004 	andeq	r8, fp, r4
    2630:	00003008 	andeq	r3, r0, r8
    2634:	f99c0100 			; <UNDEFINED> instruction: 0xf99c0100
    2638:	22000008 	andcs	r0, r0, #8
    263c:	00000da9 	andeq	r0, r0, r9, lsr #27
    2640:	b8048401 	stmdalt	r4, {r0, sl, pc}
    2644:	8b000000 	blhi	264c <_Min_Stack_Size+0x224c>
    2648:	1a00000d 	bne	2684 <_Min_Stack_Size+0x2284>
    264c:	00000c52 	andeq	r0, r0, r2, asr ip
    2650:	b8048601 	stmdalt	r4, {r0, r9, sl, pc}
    2654:	ac000000 	stcge	0, cr0, [r0], {-0}
    2658:	0000000d 	andeq	r0, r0, sp
    265c:	000e7a16 	andeq	r7, lr, r6, lsl sl
    2660:	04a40100 	strteq	r0, [r4], #256	; 0x100
    2664:	08000bb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, fp}
    2668:	0000000c 	andeq	r0, r0, ip
    266c:	091e9c01 	ldmdbeq	lr, {r0, sl, fp, ip, pc}
    2670:	4a170000 	bmi	5c2678 <_Min_Stack_Size+0x5c2278>
    2674:	01000008 	tsteq	r0, r8
    2678:	012804a4 	smulwbeq	r8, r4, r4
    267c:	50010000 	andpl	r0, r1, r0
    2680:	0cf51600 	ldcleq	6, cr1, [r5]
    2684:	b5010000 	strlt	r0, [r1, #-0]
    2688:	000bbc04 	andeq	fp, fp, r4, lsl #24
    268c:	00000c08 	andeq	r0, r0, r8, lsl #24
    2690:	439c0100 	orrsmi	r0, ip, #0, 2
    2694:	17000009 	strne	r0, [r0, -r9]
    2698:	0000084a 	andeq	r0, r0, sl, asr #16
    269c:	2804b501 	stmdacs	r4, {r0, r8, sl, ip, sp, pc}
    26a0:	01000001 	tsteq	r0, r1
    26a4:	ea160050 	b	5827ec <_Min_Stack_Size+0x5823ec>
    26a8:	01000010 	tsteq	r0, r0, lsl r0
    26ac:	0bc804c6 	bleq	ff2039cc <_estack+0xdf1d39cc>
    26b0:	000c0800 	andeq	r0, ip, r0, lsl #16
    26b4:	9c010000 	stcls	0, cr0, [r1], {-0}
    26b8:	00000968 	andeq	r0, r0, r8, ror #18
    26bc:	000efb17 	andeq	pc, lr, r7, lsl fp	; <UNPREDICTABLE>
    26c0:	04c60100 	strbeq	r0, [r6], #256	; 0x100
    26c4:	000000b8 	strheq	r0, [r0], -r8
    26c8:	16005001 	strne	r5, [r0], -r1
    26cc:	00000e60 	andeq	r0, r0, r0, ror #28
    26d0:	d404db01 	strle	sp, [r4], #-2817	; 0xb01
    26d4:	1808000b 	stmdane	r8, {r0, r1, r3}
    26d8:	01000000 	mrseq	r0, (UNDEF: 0)
    26dc:	00099f9c 	muleq	r9, ip, pc	; <UNPREDICTABLE>
    26e0:	0ea92200 	cdpeq	2, 10, cr2, cr9, cr0, {0}
    26e4:	db010000 	blle	426ec <_Min_Stack_Size+0x422ec>
    26e8:	0000b804 	andeq	fp, r0, r4, lsl #16
    26ec:	000dd600 	andeq	sp, sp, r0, lsl #12
    26f0:	0c521a00 	mrrceq	10, 0, r1, r2, cr0
    26f4:	dd010000 	stcle	0, cr0, [r1, #-0]
    26f8:	0000b804 	andeq	fp, r0, r4, lsl #16
    26fc:	000df600 	andeq	pc, sp, r0, lsl #12
    2700:	c7160000 	ldrgt	r0, [r6, -r0]
    2704:	0100000b 	tsteq	r0, fp
    2708:	0bec04fb 	bleq	ffb03afc <_estack+0xdfad3afc>
    270c:	001c0800 	andseq	r0, ip, r0, lsl #16
    2710:	9c010000 	stcls	0, cr0, [r1], {-0}
    2714:	000009d6 	ldrdeq	r0, [r0], -r6
    2718:	000b5b22 	andeq	r5, fp, r2, lsr #22
    271c:	04fb0100 	ldrbteq	r0, [fp], #256	; 0x100
    2720:	000000b8 	strheq	r0, [r0], -r8
    2724:	00000e15 	andeq	r0, r0, r5, lsl lr
    2728:	000c521a 	andeq	r5, ip, sl, lsl r2
    272c:	04fd0100 	ldrbteq	r0, [sp], #256	; 0x100
    2730:	000000b8 	strheq	r0, [r0], -r8
    2734:	00000e35 	andeq	r0, r0, r5, lsr lr
    2738:	0ca71600 	stceq	6, cr1, [r7]
    273c:	1f010000 	svcne	0x00010000
    2740:	000c0805 	andeq	r0, ip, r5, lsl #16
    2744:	00001808 	andeq	r1, r0, r8, lsl #16
    2748:	0d9c0100 	ldfeqs	f0, [ip]
    274c:	2200000a 	andcs	r0, r0, #10
    2750:	00000dba 			; <UNDEFINED> instruction: 0x00000dba
    2754:	b8051f01 	stmdalt	r5, {r0, r8, r9, sl, fp, ip}
    2758:	54000000 	strpl	r0, [r0], #-0
    275c:	1a00000e 	bne	279c <_Min_Stack_Size+0x239c>
    2760:	00000c52 	andeq	r0, r0, r2, asr ip
    2764:	b8052101 	stmdalt	r5, {r0, r8, sp}
    2768:	75000000 	strvc	r0, [r0, #-0]
    276c:	0000000e 	andeq	r0, r0, lr
    2770:	000f2c16 	andeq	r2, pc, r6, lsl ip	; <UNPREDICTABLE>
    2774:	05430100 	strbeq	r0, [r3, #-256]	; 0x100
    2778:	08000c20 	stmdaeq	r0, {r5, sl, fp}
    277c:	00000018 	andeq	r0, r0, r8, lsl r0
    2780:	0a449c01 	beq	112978c <_Min_Stack_Size+0x112938c>
    2784:	d1220000 	teqle	r2, r0
    2788:	0100000d 	tsteq	r0, sp
    278c:	00b80543 	adcseq	r0, r8, r3, asr #10
    2790:	0e9f0000 	cdpeq	0, 9, cr0, cr15, cr0, {0}
    2794:	521a0000 	andspl	r0, sl, #0
    2798:	0100000c 	tsteq	r0, ip
    279c:	00b80545 	adcseq	r0, r8, r5, asr #10
    27a0:	0ec00000 	cdpeq	0, 12, cr0, cr0, cr0, {0}
    27a4:	16000000 	strne	r0, [r0], -r0
    27a8:	00000de8 	andeq	r0, r0, r8, ror #27
    27ac:	38056401 	stmdacc	r5, {r0, sl, sp, lr}
    27b0:	1808000c 	stmdane	r8, {r2, r3}
    27b4:	01000000 	mrseq	r0, (UNDEF: 0)
    27b8:	000a7b9c 	muleq	sl, ip, fp
    27bc:	0b6a2200 	bleq	1a8afc4 <_Min_Stack_Size+0x1a8abc4>
    27c0:	64010000 	strvs	r0, [r1], #-0
    27c4:	0000b805 	andeq	fp, r0, r5, lsl #16
    27c8:	000eea00 	andeq	lr, lr, r0, lsl #20
    27cc:	0c521a00 	mrrceq	10, 0, r1, r2, cr0
    27d0:	66010000 	strvs	r0, [r1], -r0
    27d4:	0000b805 	andeq	fp, r0, r5, lsl #16
    27d8:	000f0b00 	andeq	r0, pc, r0, lsl #22
    27dc:	d5160000 	ldrle	r0, [r6, #-0]
    27e0:	01000010 	tsteq	r0, r0, lsl r0
    27e4:	0c500589 	cfldr64eq	mvdx0, [r0], {137}	; 0x89
    27e8:	000c0800 	andeq	r0, ip, r0, lsl #16
    27ec:	9c010000 	stcls	0, cr0, [r1], {-0}
    27f0:	00000aa0 	andeq	r0, r0, r0, lsr #21
    27f4:	000f5b17 	andeq	r5, pc, r7, lsl fp	; <UNPREDICTABLE>
    27f8:	05890100 	streq	r0, [r9, #256]	; 0x100
    27fc:	000000b8 	strheq	r0, [r0], -r8
    2800:	16005001 	strne	r5, [r0], -r1
    2804:	00000380 	andeq	r0, r0, r0, lsl #7
    2808:	5c05b401 	cfstrspl	mvf11, [r5], {1}
    280c:	1808000c 	stmdane	r8, {r2, r3}
    2810:	01000000 	mrseq	r0, (UNDEF: 0)
    2814:	000ad59c 	muleq	sl, ip, r5
    2818:	0c062200 	sfmeq	f2, 4, [r6], {-0}
    281c:	b4010000 	strlt	r0, [r1], #-0
    2820:	0000b805 	andeq	fp, r0, r5, lsl #16
    2824:	000f3500 	andeq	r3, pc, r0, lsl #10
    2828:	084a1700 	stmdaeq	sl, {r8, r9, sl, ip}^
    282c:	b4010000 	strlt	r0, [r1], #-0
    2830:	00012805 	andeq	r2, r1, r5, lsl #16
    2834:	00510100 	subseq	r0, r1, r0, lsl #2
    2838:	000c6916 	andeq	r6, ip, r6, lsl r9
    283c:	05d40100 	ldrbeq	r0, [r4, #256]	; 0x100
    2840:	08000c74 	stmdaeq	r0, {r2, r4, r5, r6, sl, fp}
    2844:	00000018 	andeq	r0, r0, r8, lsl r0
    2848:	0b0a9c01 	bleq	2a9854 <_Min_Stack_Size+0x2a9454>
    284c:	36220000 	strtcc	r0, [r2], -r0
    2850:	0100000e 	tsteq	r0, lr
    2854:	00b805d4 	ldrsbteq	r0, [r8], r4
    2858:	0f6f0000 	svceq	0x006f0000
    285c:	4a170000 	bmi	5c2864 <_Min_Stack_Size+0x5c2464>
    2860:	01000008 	tsteq	r0, r8
    2864:	012805d4 	ldrdeq	r0, [r8, -r4]!
    2868:	51010000 	mrspl	r0, (UNDEF: 1)
    286c:	117e1600 	cmnne	lr, r0, lsl #12
    2870:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    2874:	000c8c05 	andeq	r8, ip, r5, lsl #24
    2878:	00001808 	andeq	r1, r0, r8, lsl #16
    287c:	3f9c0100 	svccc	0x009c0100
    2880:	2200000b 	andcs	r0, r0, #11
    2884:	00000e45 	andeq	r0, r0, r5, asr #28
    2888:	b805f001 	stmdalt	r5, {r0, ip, sp, lr, pc}
    288c:	a9000000 	stmdbge	r0, {}	; <UNPREDICTABLE>
    2890:	1700000f 	strne	r0, [r0, -pc]
    2894:	0000084a 	andeq	r0, r0, sl, asr #16
    2898:	2805f001 	stmdacs	r5, {r0, ip, sp, lr, pc}
    289c:	01000001 	tsteq	r0, r1
    28a0:	15160051 	ldrne	r0, [r6, #-81]	; 0x51
    28a4:	01000011 	tsteq	r0, r1, lsl r0
    28a8:	0ca40624 	stceq	6, cr0, [r4], #144	; 0x90
    28ac:	00180800 	andseq	r0, r8, r0, lsl #16
    28b0:	9c010000 	stcls	0, cr0, [r1], {-0}
    28b4:	00000b74 	andeq	r0, r0, r4, ror fp
    28b8:	000d5b22 	andeq	r5, sp, r2, lsr #22
    28bc:	06240100 	strteq	r0, [r4], -r0, lsl #2
    28c0:	000000b8 	strheq	r0, [r0], -r8
    28c4:	00000fe3 	andeq	r0, r0, r3, ror #31
    28c8:	00084a17 	andeq	r4, r8, r7, lsl sl
    28cc:	06240100 	strteq	r0, [r4], -r0, lsl #2
    28d0:	00000128 	andeq	r0, r0, r8, lsr #2
    28d4:	16005101 	strne	r5, [r0], -r1, lsl #2
    28d8:	000003de 	ldrdeq	r0, [r0], -lr
    28dc:	bc065101 	stflts	f5, [r6], {1}
    28e0:	1808000c 	stmdane	r8, {r2, r3}
    28e4:	01000000 	mrseq	r0, (UNDEF: 0)
    28e8:	000ba99c 	muleq	fp, ip, r9
    28ec:	10c62200 	sbcne	r2, r6, r0, lsl #4
    28f0:	51010000 	mrspl	r0, (UNDEF: 1)
    28f4:	0000b806 	andeq	fp, r0, r6, lsl #16
    28f8:	00101d00 	andseq	r1, r0, r0, lsl #26
    28fc:	084a1700 	stmdaeq	sl, {r8, r9, sl, ip}^
    2900:	51010000 	mrspl	r0, (UNDEF: 1)
    2904:	00012806 	andeq	r2, r1, r6, lsl #16
    2908:	00510100 	subseq	r0, r1, r0, lsl #2
    290c:	000a4c16 	andeq	r4, sl, r6, lsl ip
    2910:	067b0100 	ldrbteq	r0, [fp], -r0, lsl #2
    2914:	08000cd4 	stmdaeq	r0, {r2, r4, r6, r7, sl, fp}
    2918:	00000018 	andeq	r0, r0, r8, lsl r0
    291c:	0bde9c01 	bleq	ff7a9928 <_estack+0xdf779928>
    2920:	06220000 	strteq	r0, [r2], -r0
    2924:	0100000c 	tsteq	r0, ip
    2928:	00b8067b 	adcseq	r0, r8, fp, ror r6
    292c:	10570000 	subsne	r0, r7, r0
    2930:	4a170000 	bmi	5c2938 <_Min_Stack_Size+0x5c2538>
    2934:	01000008 	tsteq	r0, r8
    2938:	0128067b 	teqeq	r8, fp, ror r6
    293c:	51010000 	mrspl	r0, (UNDEF: 1)
    2940:	0f7a1600 	svceq	0x007a1600
    2944:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
    2948:	000cec06 	andeq	lr, ip, r6, lsl #24
    294c:	00001808 	andeq	r1, r0, r8, lsl #16
    2950:	139c0100 	orrsne	r0, ip, #0, 2
    2954:	2200000c 	andcs	r0, r0, #12
    2958:	00000e36 	andeq	r0, r0, r6, lsr lr
    295c:	b8069801 	stmdalt	r6, {r0, fp, ip, pc}
    2960:	91000000 	mrsls	r0, (UNDEF: 0)
    2964:	17000010 	smladne	r0, r0, r0, r0
    2968:	0000084a 	andeq	r0, r0, sl, asr #16
    296c:	28069801 	stmdacs	r6, {r0, fp, ip, pc}
    2970:	01000001 	tsteq	r0, r1
    2974:	90160051 	andsls	r0, r6, r1, asr r0
    2978:	0100000c 	tsteq	r0, ip
    297c:	0d0406b1 	stceq	6, cr0, [r4, #-708]	; 0xfffffd3c
    2980:	00180800 	andseq	r0, r8, r0, lsl #16
    2984:	9c010000 	stcls	0, cr0, [r1], {-0}
    2988:	00000c48 	andeq	r0, r0, r8, asr #24
    298c:	000e4522 	andeq	r4, lr, r2, lsr #10
    2990:	06b10100 	ldrteq	r0, [r1], r0, lsl #2
    2994:	000000b8 	strheq	r0, [r0], -r8
    2998:	000010cb 	andeq	r1, r0, fp, asr #1
    299c:	00084a17 	andeq	r4, r8, r7, lsl sl
    29a0:	06b10100 	ldrteq	r0, [r1], r0, lsl #2
    29a4:	00000128 	andeq	r0, r0, r8, lsr #2
    29a8:	16005101 	strne	r5, [r0], -r1, lsl #2
    29ac:	00000bab 	andeq	r0, r0, fp, lsr #23
    29b0:	1c06e201 	sfmne	f6, 1, [r6], {1}
    29b4:	1808000d 	stmdane	r8, {r0, r2, r3}
    29b8:	01000000 	mrseq	r0, (UNDEF: 0)
    29bc:	000c7d9c 	muleq	ip, ip, sp
    29c0:	0d5b2200 	lfmeq	f2, 2, [fp, #-0]
    29c4:	e2010000 	and	r0, r1, #0
    29c8:	0000b806 	andeq	fp, r0, r6, lsl #16
    29cc:	00110500 	andseq	r0, r1, r0, lsl #10
    29d0:	084a1700 	stmdaeq	sl, {r8, r9, sl, ip}^
    29d4:	e2010000 	and	r0, r1, #0
    29d8:	00012806 	andeq	r2, r1, r6, lsl #16
    29dc:	00510100 	subseq	r0, r1, r0, lsl #2
    29e0:	000ed516 	andeq	sp, lr, r6, lsl r5
    29e4:	070b0100 	streq	r0, [fp, -r0, lsl #2]
    29e8:	08000d34 	stmdaeq	r0, {r2, r4, r5, r8, sl, fp}
    29ec:	00000018 	andeq	r0, r0, r8, lsl r0
    29f0:	0cb29c01 	ldceq	12, cr9, [r2], #4
    29f4:	c6220000 	strtgt	r0, [r2], -r0
    29f8:	01000010 	tsteq	r0, r0, lsl r0
    29fc:	00b8070b 	adcseq	r0, r8, fp, lsl #14
    2a00:	113f0000 	teqne	pc, r0
    2a04:	4a170000 	bmi	5c2a0c <_Min_Stack_Size+0x5c260c>
    2a08:	01000008 	tsteq	r0, r8
    2a0c:	0128070b 	teqeq	r8, fp, lsl #14
    2a10:	51010000 	mrspl	r0, (UNDEF: 1)
    2a14:	11611600 	cmnne	r1, r0, lsl #12
    2a18:	3c010000 	stccc	0, cr0, [r1], {-0}
    2a1c:	000d4c07 	andeq	r4, sp, r7, lsl #24
    2a20:	00001808 	andeq	r1, r0, r8, lsl #16
    2a24:	e79c0100 	ldr	r0, [ip, r0, lsl #2]
    2a28:	2200000c 	andcs	r0, r0, #12
    2a2c:	00000c06 	andeq	r0, r0, r6, lsl #24
    2a30:	b8073c01 	stmdalt	r7, {r0, sl, fp, ip, sp}
    2a34:	79000000 	stmdbvc	r0, {}	; <UNPREDICTABLE>
    2a38:	17000011 	smladne	r0, r1, r0, r0
    2a3c:	0000084a 	andeq	r0, r0, sl, asr #16
    2a40:	28073c01 	stmdacs	r7, {r0, sl, fp, ip, sp}
    2a44:	01000001 	tsteq	r0, r1
    2a48:	fd160051 	ldc2	0, cr0, [r6, #-324]	; 0xfffffebc
    2a4c:	0100000d 	tsteq	r0, sp
    2a50:	0d64075c 	stcleq	7, cr0, [r4, #-368]!	; 0xfffffe90
    2a54:	00180800 	andseq	r0, r8, r0, lsl #16
    2a58:	9c010000 	stcls	0, cr0, [r1], {-0}
    2a5c:	00000d1c 	andeq	r0, r0, ip, lsl sp
    2a60:	000e3622 	andeq	r3, lr, r2, lsr #12
    2a64:	075c0100 	ldrbeq	r0, [ip, -r0, lsl #2]
    2a68:	000000b8 	strheq	r0, [r0], -r8
    2a6c:	000011b3 			; <UNDEFINED> instruction: 0x000011b3
    2a70:	00084a17 	andeq	r4, r8, r7, lsl sl
    2a74:	075c0100 	ldrbeq	r0, [ip, -r0, lsl #2]
    2a78:	00000128 	andeq	r0, r0, r8, lsr #2
    2a7c:	16005101 	strne	r5, [r0], -r1, lsl #2
    2a80:	0000109a 	muleq	r0, sl, r0
    2a84:	7c077801 	stcvc	8, cr7, [r7], {1}
    2a88:	1808000d 	stmdane	r8, {r0, r2, r3}
    2a8c:	01000000 	mrseq	r0, (UNDEF: 0)
    2a90:	000d519c 	muleq	sp, ip, r1
    2a94:	0e452200 	cdpeq	2, 4, cr2, cr5, cr0, {0}
    2a98:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    2a9c:	0000b807 	andeq	fp, r0, r7, lsl #16
    2aa0:	0011ed00 	andseq	lr, r1, r0, lsl #26
    2aa4:	084a1700 	stmdaeq	sl, {r8, r9, sl, ip}^
    2aa8:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    2aac:	00012807 	andeq	r2, r1, r7, lsl #16
    2ab0:	00510100 	subseq	r0, r1, r0, lsl #2
    2ab4:	000f9116 	andeq	r9, pc, r6, lsl r1	; <UNPREDICTABLE>
    2ab8:	07ac0100 	streq	r0, [ip, r0, lsl #2]!
    2abc:	08000d94 	stmdaeq	r0, {r2, r4, r7, r8, sl, fp}
    2ac0:	00000018 	andeq	r0, r0, r8, lsl r0
    2ac4:	0d869c01 	stceq	12, cr9, [r6, #4]
    2ac8:	5b220000 	blpl	882ad0 <_Min_Stack_Size+0x8826d0>
    2acc:	0100000d 	tsteq	r0, sp
    2ad0:	00b807ac 	adcseq	r0, r8, ip, lsr #15
    2ad4:	12270000 	eorne	r0, r7, #0
    2ad8:	4a170000 	bmi	5c2ae0 <_Min_Stack_Size+0x5c26e0>
    2adc:	01000008 	tsteq	r0, r8
    2ae0:	012807ac 	smulwbeq	r8, ip, r7
    2ae4:	51010000 	mrspl	r0, (UNDEF: 1)
    2ae8:	0c201600 	stceq	6, cr1, [r0], #-0
    2aec:	d9010000 	stmdble	r1, {}	; <UNPREDICTABLE>
    2af0:	000dac07 	andeq	sl, sp, r7, lsl #24
    2af4:	00001808 	andeq	r1, r0, r8, lsl #16
    2af8:	bb9c0100 	bllt	fe702f00 <_estack+0xde6d2f00>
    2afc:	2200000d 	andcs	r0, r0, #13
    2b00:	000010c6 	andeq	r1, r0, r6, asr #1
    2b04:	b807d901 	stmdalt	r7, {r0, r8, fp, ip, lr, pc}
    2b08:	61000000 	mrsvs	r0, (UNDEF: 0)
    2b0c:	17000012 	smladne	r0, r2, r0, r0
    2b10:	0000084a 	andeq	r0, r0, sl, asr #16
    2b14:	2807d901 	stmdacs	r7, {r0, r8, fp, ip, lr, pc}
    2b18:	01000001 	tsteq	r0, r1
    2b1c:	2c160051 	ldccs	0, cr0, [r6], {81}	; 0x51
    2b20:	01000011 	tsteq	r0, r1, lsl r0
    2b24:	0dc40807 	stcleq	8, cr0, [r4, #28]
    2b28:	00180800 	andseq	r0, r8, r0, lsl #16
    2b2c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2b30:	00000df0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2b34:	000c4b22 	andeq	r4, ip, r2, lsr #22
    2b38:	08070100 	stmdaeq	r7, {r8}
    2b3c:	00000097 	muleq	r0, r7, r0
    2b40:	0000129b 	muleq	r0, fp, r2
    2b44:	00084a17 	andeq	r4, r8, r7, lsl sl
    2b48:	08070100 	stmdaeq	r7, {r8}
    2b4c:	00000128 	andeq	r0, r0, r8, lsr #2
    2b50:	26005101 	strcs	r5, [r0], -r1, lsl #2
    2b54:	0000034f 	andeq	r0, r0, pc, asr #6
    2b58:	08000ddc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl, fp}
    2b5c:	00000034 	andeq	r0, r0, r4, lsr r0
    2b60:	0e289c01 	cdpeq	12, 2, cr9, cr8, cr1, {0}
    2b64:	60200000 	eorvs	r0, r0, r0
    2b68:	d5000003 	strle	r0, [r0, #-3]
    2b6c:	1e000012 	mcrne	0, 0, r0, cr0, cr2, {0}
    2b70:	0000036c 	andeq	r0, r0, ip, ror #6
    2b74:	0000130f 	andeq	r1, r0, pc, lsl #6
    2b78:	0003781e 	andeq	r7, r3, lr, lsl r8
    2b7c:	00137b00 	andseq	r7, r3, r0, lsl #22
    2b80:	03841e00 	orreq	r1, r4, #0, 28
    2b84:	13b10000 			; <UNDEFINED> instruction: 0x13b10000
    2b88:	27000000 	strcs	r0, [r0, -r0]
    2b8c:	00000c3d 	andeq	r0, r0, sp, lsr ip
    2b90:	10085901 	andne	r5, r8, r1, lsl #18
    2b94:	1008000e 	andne	r0, r8, lr
    2b98:	01000000 	mrseq	r0, (UNDEF: 0)
    2b9c:	104d189c 	umaalne	r1, sp, ip, r8
    2ba0:	6d010000 	stcvs	0, cr0, [r1, #-0]
    2ba4:	00010608 	andeq	r0, r1, r8, lsl #12
    2ba8:	000e2000 	andeq	r2, lr, r0
    2bac:	00001408 	andeq	r1, r0, r8, lsl #8
    2bb0:	759c0100 	ldrvc	r0, [ip, #256]	; 0x100
    2bb4:	2200000e 	andcs	r0, r0, #14
    2bb8:	00000c4b 	andeq	r0, r0, fp, asr #24
    2bbc:	97086d01 	strls	r6, [r8, -r1, lsl #26]
    2bc0:	ff000000 			; <UNDEFINED> instruction: 0xff000000
    2bc4:	1a000013 	bne	2c18 <_Min_Stack_Size+0x2818>
    2bc8:	00000a42 	andeq	r0, r0, r2, asr #20
    2bcc:	06086f01 	streq	r6, [r8], -r1, lsl #30
    2bd0:	20000001 	andcs	r0, r0, r1
    2bd4:	00000014 	andeq	r0, r0, r4, lsl r0
    2bd8:	000beb16 	andeq	lr, fp, r6, lsl fp
    2bdc:	088f0100 	stmeq	pc, {r8}	; <UNPREDICTABLE>
    2be0:	08000e34 	stmdaeq	r0, {r2, r4, r5, r9, sl, fp}
    2be4:	0000000c 	andeq	r0, r0, ip
    2be8:	0e9a9c01 	cdpeq	12, 9, cr9, cr10, cr1, {0}
    2bec:	4b170000 	blmi	5c2bf4 <_Min_Stack_Size+0x5c27f4>
    2bf0:	0100000c 	tsteq	r0, ip
    2bf4:	0097088f 	addseq	r0, r7, pc, lsl #17
    2bf8:	50010000 	andpl	r0, r1, r0
    2bfc:	00970600 	addseq	r0, r7, r0, lsl #12
    2c00:	0eaa0000 	cdpeq	0, 10, cr0, cr10, cr0, {0}
    2c04:	c3070000 	movwgt	r0, #28672	; 0x7000
    2c08:	0f000000 	svceq	0x00000000
    2c0c:	0fdf2800 	svceq	0x00df2800
    2c10:	8d010000 	stchi	0, cr0, [r1, #-0]
    2c14:	00000ebb 			; <UNDEFINED> instruction: 0x00000ebb
    2c18:	00140305 	andseq	r0, r4, r5, lsl #6
    2c1c:	c0292000 	eorgt	r2, r9, r0
    2c20:	0500000e 	streq	r0, [r0, #-14]
    2c24:	00000e9a 	muleq	r0, sl, lr
    2c28:	0004682a 	andeq	r6, r4, sl, lsr #16
    2c2c:	06a70600 	strteq	r0, [r7], r0, lsl #12
    2c30:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    2c34:	000bab00 	andeq	sl, fp, r0, lsl #22
    2c38:	a5000400 	strge	r0, [r0, #-1024]	; 0x400
    2c3c:	04000009 	streq	r0, [r0], #-9
    2c40:	0000f801 	andeq	pc, r0, r1, lsl #16
    2c44:	12cc0100 	sbcne	r0, ip, #0, 2
    2c48:	051b0000 	ldreq	r0, [fp, #-0]
    2c4c:	03480000 	movteq	r0, #32768	; 0x8000
    2c50:	00000000 	andeq	r0, r0, r0
    2c54:	101a0000 	andsne	r0, sl, r0
    2c58:	01020000 	mrseq	r0, (UNDEF: 2)
    2c5c:	0002d306 	andeq	sp, r2, r6, lsl #6
    2c60:	02970300 	addseq	r0, r7, #0, 6
    2c64:	1c020000 	stcne	0, cr0, [r2], {-0}
    2c68:	00000037 	andeq	r0, r0, r7, lsr r0
    2c6c:	d1080102 	tstle	r8, r2, lsl #2
    2c70:	02000002 	andeq	r0, r0, #2
    2c74:	00950502 	addseq	r0, r5, r2, lsl #10
    2c78:	6d030000 	stcvs	0, cr0, [r3, #-0]
    2c7c:	02000000 	andeq	r0, r0, #0
    2c80:	00005026 	andeq	r5, r0, r6, lsr #32
    2c84:	07020200 	streq	r0, [r2, -r0, lsl #4]
    2c88:	00000353 	andeq	r0, r0, r3, asr r3
    2c8c:	0004ad03 	andeq	sl, r4, r3, lsl #26
    2c90:	62370200 	eorsvs	r0, r7, #0, 4
    2c94:	02000000 	andeq	r0, r0, #0
    2c98:	023c0504 	eorseq	r0, ip, #4, 10	; 0x1000000
    2c9c:	62030000 	andvs	r0, r3, #0
    2ca0:	02000000 	andeq	r0, r0, #0
    2ca4:	00007438 	andeq	r7, r0, r8, lsr r4
    2ca8:	07040200 	streq	r0, [r4, -r0, lsl #4]
    2cac:	00000300 	andeq	r0, r0, r0, lsl #6
    2cb0:	37050802 	strcc	r0, [r5, -r2, lsl #16]
    2cb4:	02000002 	andeq	r0, r0, #2
    2cb8:	02fb0708 	rscseq	r0, fp, #8, 14	; 0x200000
    2cbc:	04040000 	streq	r0, [r4], #-0
    2cc0:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    2cc4:	07040200 	streq	r0, [r4, -r0, lsl #4]
    2cc8:	00000305 	andeq	r0, r0, r5, lsl #6
    2ccc:	00029903 	andeq	r9, r2, r3, lsl #18
    2cd0:	2c2a0300 	stccs	3, cr0, [sl], #-0
    2cd4:	03000000 	movweq	r0, #0
    2cd8:	0000006f 	andeq	r0, r0, pc, rrx
    2cdc:	00453603 	subeq	r3, r5, r3, lsl #12
    2ce0:	af030000 	svcge	0x00030000
    2ce4:	03000004 	movweq	r0, #4
    2ce8:	00005741 	andeq	r5, r0, r1, asr #14
    2cec:	00640300 	rsbeq	r0, r4, r0, lsl #6
    2cf0:	42030000 	andmi	r0, r3, #0
    2cf4:	00000069 	andeq	r0, r0, r9, rrx
    2cf8:	46070402 	strmi	r0, [r7], -r2, lsl #8
    2cfc:	05000000 	streq	r0, [r0, #-0]
    2d00:	000000a2 	andeq	r0, r0, r2, lsr #1
    2d04:	0000ad05 	andeq	sl, r0, r5, lsl #26
    2d08:	04010600 	streq	r0, [r1], #-1536	; 0x600
    2d0c:	00ea01f7 	strdeq	r0, [sl], #23	; <UNPREDICTABLE>
    2d10:	f0070000 			; <UNDEFINED> instruction: 0xf0070000
    2d14:	00000009 	andeq	r0, r0, r9
    2d18:	54455308 	strbpl	r5, [r5], #-776	; 0x308
    2d1c:	09000100 	stmdbeq	r0, {r8}
    2d20:	00000f13 	andeq	r0, r0, r3, lsl pc
    2d24:	d401f704 	strle	pc, [r1], #-1796	; 0x704
    2d28:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    2d2c:	00001054 	andeq	r1, r0, r4, asr r0
    2d30:	d401f704 	strle	pc, [r1], #-1796	; 0x704
    2d34:	06000000 	streq	r0, [r0], -r0
    2d38:	01f90401 	mvnseq	r0, r1, lsl #8
    2d3c:	00000118 	andeq	r0, r0, r8, lsl r1
    2d40:	0003c707 	andeq	ip, r3, r7, lsl #14
    2d44:	45070000 	strmi	r0, [r7, #-0]
    2d48:	01000002 	tsteq	r0, r2
    2d4c:	05000900 	streq	r0, [r0, #-2304]	; 0x900
    2d50:	f9040000 			; <UNDEFINED> instruction: 0xf9040000
    2d54:	00010201 	andeq	r0, r1, r1, lsl #4
    2d58:	041c0a00 	ldreq	r0, [ip], #-2560	; 0xa00
    2d5c:	01e20526 	mvneq	r0, r6, lsr #10
    2d60:	530b0000 	movwpl	r0, #45056	; 0xb000
    2d64:	28040052 	stmdacs	r4, {r1, r4, r6}
    2d68:	0000ca05 	andeq	ip, r0, r5, lsl #20
    2d6c:	f50c0000 			; <UNDEFINED> instruction: 0xf50c0000
    2d70:	04000003 	streq	r0, [r0], #-3
    2d74:	00a20529 	adceq	r0, r2, r9, lsr #10
    2d78:	0b020000 	bleq	82d80 <_Min_Stack_Size+0x82980>
    2d7c:	04005244 	streq	r5, [r0], #-580	; 0x244
    2d80:	00ca052a 	sbceq	r0, sl, sl, lsr #10
    2d84:	0c040000 	stceq	0, cr0, [r4], {-0}
    2d88:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    2d8c:	a2052b04 	andge	r2, r5, #4, 22	; 0x1000
    2d90:	06000000 	streq	r0, [r0], -r0
    2d94:	5252420b 	subspl	r4, r2, #-1342177280	; 0xb0000000
    2d98:	052c0400 	streq	r0, [ip, #-1024]!	; 0x400
    2d9c:	000000ca 	andeq	r0, r0, sl, asr #1
    2da0:	04090c08 	streq	r0, [r9], #-3080	; 0xc08
    2da4:	2d040000 	stccs	0, cr0, [r4, #-0]
    2da8:	0000a205 	andeq	sl, r0, r5, lsl #4
    2dac:	430b0a00 	movwmi	r0, #47616	; 0xba00
    2db0:	04003152 	streq	r3, [r0], #-338	; 0x152
    2db4:	00ca052e 	sbceq	r0, sl, lr, lsr #10
    2db8:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    2dbc:	00000413 	andeq	r0, r0, r3, lsl r4
    2dc0:	a2052f04 	andge	r2, r5, #4, 30
    2dc4:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    2dc8:	3252430b 	subscc	r4, r2, #738197504	; 0x2c000000
    2dcc:	05300400 	ldreq	r0, [r0, #-1024]!	; 0x400
    2dd0:	000000ca 	andeq	r0, r0, sl, asr #1
    2dd4:	041d0c10 	ldreq	r0, [sp], #-3088	; 0xc10
    2dd8:	31040000 	mrscc	r0, (UNDEF: 4)
    2ddc:	0000a205 	andeq	sl, r0, r5, lsl #4
    2de0:	430b1200 	movwmi	r1, #45568	; 0xb200
    2de4:	04003352 	streq	r3, [r0], #-850	; 0x352
    2de8:	00ca0532 	sbceq	r0, sl, r2, lsr r5
    2dec:	0c140000 	ldceq	0, cr0, [r4], {-0}
    2df0:	00000427 	andeq	r0, r0, r7, lsr #8
    2df4:	a2053304 	andge	r3, r5, #4, 6	; 0x10000000
    2df8:	16000000 	strne	r0, [r0], -r0
    2dfc:	0002cc0c 	andeq	ip, r2, ip, lsl #24
    2e00:	05340400 	ldreq	r0, [r4, #-1024]!	; 0x400
    2e04:	000000ca 	andeq	r0, r0, sl, asr #1
    2e08:	04310c18 	ldrteq	r0, [r1], #-3096	; 0xc18
    2e0c:	35040000 	strcc	r0, [r4, #-0]
    2e10:	0000a205 	andeq	sl, r0, r5, lsl #4
    2e14:	09001a00 	stmdbeq	r0, {r9, fp, ip}
    2e18:	00000078 	andeq	r0, r0, r8, ror r0
    2e1c:	24053604 	strcs	r3, [r5], #-1540	; 0x604
    2e20:	0d000001 	stceq	0, cr0, [r0, #-4]
    2e24:	27300510 			; <UNDEFINED> instruction: 0x27300510
    2e28:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    2e2c:	00000b83 	andeq	r0, r0, r3, lsl #23
    2e30:	00b83205 	adcseq	r3, r8, r5, lsl #4
    2e34:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    2e38:	00000d4c 	andeq	r0, r0, ip, asr #26
    2e3c:	00b83305 	adcseq	r3, r8, r5, lsl #6
    2e40:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    2e44:	00000fcf 	andeq	r0, r0, pc, asr #31
    2e48:	00b83405 	adcseq	r3, r8, r5, lsl #8
    2e4c:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    2e50:	00000c59 	andeq	r0, r0, r9, asr ip
    2e54:	00b83505 	adcseq	r3, r8, r5, lsl #10
    2e58:	000c0000 	andeq	r0, ip, r0
    2e5c:	00114f03 	andseq	r4, r1, r3, lsl #30
    2e60:	ee360500 	cfabs32	mvfx0, mvfx6
    2e64:	0d000001 	stceq	0, cr0, [r0, #-4]
    2e68:	83360610 	teqhi	r6, #16, 12	; 0x1000000
    2e6c:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    2e70:	00000220 	andeq	r0, r0, r0, lsr #4
    2e74:	00b83806 	adcseq	r3, r8, r6, lsl #16
    2e78:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    2e7c:	000000e7 	andeq	r0, r0, r7, ror #1
    2e80:	00a23e06 	adceq	r3, r2, r6, lsl #28
    2e84:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    2e88:	00000086 	andeq	r0, r0, r6, lsl #1
    2e8c:	00a24106 	adceq	r4, r2, r6, lsl #2
    2e90:	0e060000 	cdpeq	0, 0, cr0, cr6, cr0, {0}
    2e94:	000002bf 			; <UNDEFINED> instruction: 0x000002bf
    2e98:	00a24406 	adceq	r4, r2, r6, lsl #8
    2e9c:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    2ea0:	00000397 	muleq	r0, r7, r3
    2ea4:	00a24b06 	adceq	r4, r2, r6, lsl #22
    2ea8:	0e0a0000 	cdpeq	0, 0, cr0, cr10, cr0, {0}
    2eac:	00000366 	andeq	r0, r0, r6, ror #6
    2eb0:	00a24e06 	adceq	r4, r2, r6, lsl #28
    2eb4:	000c0000 	andeq	r0, ip, r0
    2eb8:	00033603 	andeq	r3, r3, r3, lsl #12
    2ebc:	32510600 	subscc	r0, r1, #0, 12
    2ec0:	0d000002 	stceq	0, cr0, [r0, #-8]
    2ec4:	c7570608 	ldrbgt	r0, [r7, -r8, lsl #12]
    2ec8:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    2ecc:	00001418 	andeq	r1, r0, r8, lsl r4
    2ed0:	00a25a06 	adceq	r5, r2, r6, lsl #20
    2ed4:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    2ed8:	000014d5 	ldrdeq	r1, [r0], -r5
    2edc:	00a25d06 	adceq	r5, r2, r6, lsl #26
    2ee0:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
    2ee4:	000011a4 	andeq	r1, r0, r4, lsr #3
    2ee8:	00a26006 	adceq	r6, r2, r6
    2eec:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    2ef0:	0000122f 	andeq	r1, r0, pc, lsr #4
    2ef4:	00a26306 	adceq	r6, r2, r6, lsl #6
    2ef8:	00060000 	andeq	r0, r6, r0
    2efc:	0011f503 	andseq	pc, r1, r3, lsl #10
    2f00:	8e660600 	cdphi	6, 6, cr0, cr6, cr0, {0}
    2f04:	0f000002 	svceq	0x00000002
    2f08:	000012a9 	andeq	r1, r0, r9, lsr #5
    2f0c:	0e40bb01 	vmlaeq.f64	d27, d0, d1
    2f10:	010c0800 	tsteq	ip, r0, lsl #16
    2f14:	9c010000 	stcls	0, cr0, [r1], {-0}
    2f18:	0000048f 	andeq	r0, r0, pc, lsl #9
    2f1c:	00138c10 	andseq	r8, r3, r0, lsl ip
    2f20:	8fbb0100 	svchi	0x00bb0100
    2f24:	5f000004 	svcpl	0x00000004
    2f28:	11000014 	tstne	r0, r4, lsl r0
    2f2c:	08000e7e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r9, sl, fp}
    2f30:	00000b68 	andeq	r0, r0, r8, ror #22
    2f34:	00000311 	andeq	r0, r0, r1, lsl r3
    2f38:	01510112 	cmpeq	r1, r2, lsl r1
    2f3c:	50011231 	andpl	r1, r1, r1, lsr r2
    2f40:	244b4004 	strbcs	r4, [fp], #-4
    2f44:	8c13001f 	ldchi	0, cr0, [r3], {31}
    2f48:	6808000e 	stmdavs	r8, {r1, r2, r3}
    2f4c:	2c00000b 	stccs	0, cr0, [r0], {11}
    2f50:	12000003 	andne	r0, r0, #3
    2f54:	30015101 	andcc	r5, r1, r1, lsl #2
    2f58:	04500112 	ldrbeq	r0, [r0], #-274	; 0x112
    2f5c:	1f244b40 	svcne	0x00244b40
    2f60:	0e941100 	fmleqs	f1, f4, f0
    2f64:	0b7f0800 	bleq	1fc4f6c <_Min_Stack_Size+0x1fc4b6c>
    2f68:	03440000 	movteq	r0, #16384	; 0x4000
    2f6c:	01120000 	tsteq	r2, r0
    2f70:	12310151 	eorsne	r0, r1, #1073741844	; 0x40000014
    2f74:	40015001 	andmi	r5, r1, r1
    2f78:	0ea01300 	cdpeq	3, 10, cr1, cr0, cr0, {0}
    2f7c:	0b7f0800 	bleq	1fc4f84 <_Min_Stack_Size+0x1fc4b84>
    2f80:	035c0000 	cmpeq	ip, #0
    2f84:	01120000 	tsteq	r2, r0
    2f88:	12300151 	eorsne	r0, r0, #1073741844	; 0x40000014
    2f8c:	40015001 	andmi	r5, r1, r1
    2f90:	0eaa1100 	fdveqe	f1, f2, f0
    2f94:	0b680800 	bleq	1a04f9c <_Min_Stack_Size+0x1a04b9c>
    2f98:	03760000 	cmneq	r6, #0
    2f9c:	01120000 	tsteq	r2, r0
    2fa0:	12310151 	eorsne	r0, r1, #1073741844	; 0x40000014
    2fa4:	40035001 	andmi	r5, r3, r1
    2fa8:	1300243d 	movwne	r2, #1085	; 0x43d
    2fac:	08000eb8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl, fp}
    2fb0:	00000b68 	andeq	r0, r0, r8, ror #22
    2fb4:	00000390 	muleq	r0, r0, r3
    2fb8:	01510112 	cmpeq	r1, r2, lsl r1
    2fbc:	50011230 	andpl	r1, r1, r0, lsr r2
    2fc0:	243d4003 	ldrtcs	r4, [sp], #-3
    2fc4:	0ec21100 	poleqs	f1, f2, f0
    2fc8:	0b680800 	bleq	1a04fd0 <_Min_Stack_Size+0x1a04bd0>
    2fcc:	03aa0000 			; <UNDEFINED> instruction: 0x03aa0000
    2fd0:	01120000 	tsteq	r2, r0
    2fd4:	12310151 	eorsne	r0, r1, #1073741844	; 0x40000014
    2fd8:	40035001 	andmi	r5, r3, r1
    2fdc:	1300243e 	movwne	r2, #1086	; 0x43e
    2fe0:	08000ed0 	stmdaeq	r0, {r4, r6, r7, r9, sl, fp}
    2fe4:	00000b68 	andeq	r0, r0, r8, ror #22
    2fe8:	000003c4 	andeq	r0, r0, r4, asr #7
    2fec:	01510112 	cmpeq	r1, r2, lsl r1
    2ff0:	50011230 	andpl	r1, r1, r0, lsr r2
    2ff4:	243e4003 	ldrtcs	r4, [lr], #-3
    2ff8:	0eda1100 	cdpeq	1, 13, cr1, cr10, cr0, {0}
    2ffc:	0b680800 	bleq	1a05004 <_Min_Stack_Size+0x1a04c04>
    3000:	03de0000 	bicseq	r0, lr, #0
    3004:	01120000 	tsteq	r2, r0
    3008:	12310151 	eorsne	r0, r1, #1073741844	; 0x40000014
    300c:	40035001 	andmi	r5, r3, r1
    3010:	1300243f 	movwne	r2, #1087	; 0x43f
    3014:	08000ee8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, fp}
    3018:	00000b68 	andeq	r0, r0, r8, ror #22
    301c:	000003f8 	strdeq	r0, [r0], -r8
    3020:	01510112 	cmpeq	r1, r2, lsl r1
    3024:	50011230 	andpl	r1, r1, r0, lsr r2
    3028:	243f4003 	ldrtcs	r4, [pc], #-3	; 3030 <_Min_Stack_Size+0x2c30>
    302c:	0ef21100 	cdpeq	1, 15, cr1, cr2, cr0, {0}
    3030:	0b680800 	bleq	1a05038 <_Min_Stack_Size+0x1a04c38>
    3034:	04120000 	ldreq	r0, [r2], #-0
    3038:	01120000 	tsteq	r2, r0
    303c:	12310151 	eorsne	r0, r1, #1073741844	; 0x40000014
    3040:	40035001 	andmi	r5, r3, r1
    3044:	13002440 	movwne	r2, #1088	; 0x440
    3048:	08000f00 	stmdaeq	r0, {r8, r9, sl, fp}
    304c:	00000b68 	andeq	r0, r0, r8, ror #22
    3050:	0000042c 	andeq	r0, r0, ip, lsr #8
    3054:	01510112 	cmpeq	r1, r2, lsl r1
    3058:	50011230 	andpl	r1, r1, r0, lsr r2
    305c:	24404003 	strbcs	r4, [r0], #-3
    3060:	0f081100 	svceq	0x00081100
    3064:	0b7f0800 	bleq	1fc506c <_Min_Stack_Size+0x1fc4c6c>
    3068:	04450000 	strbeq	r0, [r5], #-0
    306c:	01120000 	tsteq	r2, r0
    3070:	12310151 	eorsne	r0, r1, #1073741844	; 0x40000014
    3074:	08025001 	stmdaeq	r2, {r0, ip, lr}
    3078:	14130020 	ldrne	r0, [r3], #-32
    307c:	7f08000f 	svcvc	0x0008000f
    3080:	5e00000b 	cdppl	0, 0, cr0, cr0, cr11, {0}
    3084:	12000004 	andne	r0, r0, #4
    3088:	30015101 	andcc	r5, r1, r1, lsl #2
    308c:	02500112 	subseq	r0, r0, #-2147483644	; 0x80000004
    3090:	11002008 	tstne	r0, r8
    3094:	08000f1e 	stmdaeq	r0, {r1, r2, r3, r4, r8, r9, sl, fp}
    3098:	00000b68 	andeq	r0, r0, r8, ror #22
    309c:	00000478 	andeq	r0, r0, r8, ror r4
    30a0:	01510112 	cmpeq	r1, r2, lsl r1
    30a4:	50011231 	andpl	r1, r1, r1, lsr r2
    30a8:	244a4003 	strbcs	r4, [sl], #-3
    30ac:	0f2c1400 	svceq	0x002c1400
    30b0:	0b680800 	bleq	1a050b8 <_Min_Stack_Size+0x1a04cb8>
    30b4:	01120000 	tsteq	r2, r0
    30b8:	12300151 	eorsne	r0, r0, #1073741844	; 0x40000014
    30bc:	40035001 	andmi	r5, r3, r1
    30c0:	0000244a 	andeq	r2, r0, sl, asr #8
    30c4:	01e20415 	mvneq	r0, r5, lsl r4
    30c8:	3b0f0000 	blcc	3c30d0 <_Min_Stack_Size+0x3c2cd0>
    30cc:	01000000 	mrseq	r0, (UNDEF: 0)
    30d0:	000f4cf6 	strdeq	r4, [pc], -r6
    30d4:	0000c408 	andeq	ip, r0, r8, lsl #8
    30d8:	239c0100 	orrscs	r0, ip, #0, 2
    30dc:	10000005 	andne	r0, r0, r5
    30e0:	0000138c 	andeq	r1, r0, ip, lsl #7
    30e4:	048ff601 	streq	pc, [pc], #1537	; 30ec <_Min_Stack_Size+0x2cec>
    30e8:	152f0000 	strne	r0, [pc, #-0]!	; 30f0 <_Min_Stack_Size+0x2cf0>
    30ec:	5b100000 	blpl	4030f4 <_Min_Stack_Size+0x402cf4>
    30f0:	01000014 	tsteq	r0, r4, lsl r0
    30f4:	000523f6 	strdeq	r2, [r5], -r6
    30f8:	00155b00 	andseq	r5, r5, r0, lsl #22
    30fc:	0c521600 	mrrceq	6, 0, r1, r2, cr0
    3100:	f8010000 			; <UNDEFINED> instruction: 0xf8010000
    3104:	000000b8 	strheq	r0, [r0], -r8
    3108:	000015a0 	andeq	r1, r0, r0, lsr #11
    310c:	00124c16 	andseq	r4, r2, r6, lsl ip
    3110:	b8f80100 	ldmlt	r8!, {r8}^
    3114:	51000000 	mrspl	r0, (UNDEF: 0)
    3118:	16000016 			; <UNDEFINED> instruction: 0x16000016
    311c:	00001195 	muleq	r0, r5, r1
    3120:	00b8f901 	adcseq	pc, r8, r1, lsl #18
    3124:	16870000 	strne	r0, [r7], r0
    3128:	32160000 	andscc	r0, r6, #0
    312c:	01000014 	tsteq	r0, r4, lsl r0
    3130:	0000b8fa 	strdeq	fp, [r0], -sl
    3134:	0016b200 	andseq	fp, r6, r0, lsl #4
    3138:	146c1700 	strbtne	r1, [ip], #-1792	; 0x700
    313c:	fb010000 	blx	43146 <_Min_Stack_Size+0x42d46>
    3140:	00000227 	andeq	r0, r0, r7, lsr #4
    3144:	18589102 	ldmdane	r8, {r1, r8, ip, pc}^
    3148:	08000f92 	stmdaeq	r0, {r1, r4, r7, r8, r9, sl, fp}
    314c:	00000b96 	muleq	r0, r6, fp
    3150:	02500112 	subseq	r0, r0, #-2147483644	; 0x80000004
    3154:	0000007d 	andeq	r0, r0, sp, ror r0
    3158:	02830415 	addeq	r0, r3, #352321536	; 0x15000000
    315c:	b4190000 	ldrlt	r0, [r9], #-0
    3160:	01000014 	tsteq	r0, r4, lsl r0
    3164:	10100167 	andsne	r0, r0, r7, ror #2
    3168:	00160800 	andseq	r0, r6, r0, lsl #16
    316c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3170:	0000054e 	andeq	r0, r0, lr, asr #10
    3174:	00145b1a 	andseq	r5, r4, sl, lsl fp
    3178:	01670100 	cmneq	r7, r0, lsl #2
    317c:	00000523 	andeq	r0, r0, r3, lsr #10
    3180:	19005001 	stmdbne	r0, {r0, ip, lr}
    3184:	0000147d 	andeq	r1, r0, sp, ror r4
    3188:	28017b01 	stmdacs	r1, {r0, r8, r9, fp, ip, sp, lr}
    318c:	22080010 	andcs	r0, r8, #16
    3190:	01000000 	mrseq	r0, (UNDEF: 0)
    3194:	0005939c 	muleq	r5, ip, r3
    3198:	138c1a00 	orrne	r1, ip, #0, 20
    319c:	7b010000 	blvc	431a4 <_Min_Stack_Size+0x42da4>
    31a0:	00048f01 	andeq	r8, r4, r1, lsl #30
    31a4:	1b500100 	blne	14035ac <_Min_Stack_Size+0x14031ac>
    31a8:	000012b6 			; <UNDEFINED> instruction: 0x000012b6
    31ac:	93017b01 	movwls	r7, #6913	; 0x1b01
    31b0:	e8000005 	stmda	r0, {r0, r2}
    31b4:	1c000016 	stcne	0, cr0, [r0], {22}
    31b8:	00000c52 	andeq	r0, r0, r2, asr ip
    31bc:	b8017d01 	stmdalt	r1, {r0, r8, sl, fp, ip, sp, lr}
    31c0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    31c4:	00000017 	andeq	r0, r0, r7, lsl r0
    31c8:	02c70415 	sbceq	r0, r7, #352321536	; 0x15000000
    31cc:	0b190000 	bleq	6431d4 <_Min_Stack_Size+0x642dd4>
    31d0:	01000013 	tsteq	r0, r3, lsl r0
    31d4:	104c019a 	umaalne	r0, ip, sl, r1
    31d8:	000c0800 	andeq	r0, ip, r0, lsl #16
    31dc:	9c010000 	stcls	0, cr0, [r1], {-0}
    31e0:	000005be 			; <UNDEFINED> instruction: 0x000005be
    31e4:	0012b61a 	andseq	fp, r2, sl, lsl r6
    31e8:	019a0100 	orrseq	r0, sl, r0, lsl #2
    31ec:	00000593 	muleq	r0, r3, r5
    31f0:	19005001 	stmdbne	r0, {r0, ip, lr}
    31f4:	000000b7 	strheq	r0, [r0], -r7
    31f8:	5801ab01 	stmdapl	r1, {r0, r8, r9, fp, sp, pc}
    31fc:	1a080010 	bne	203244 <_Min_Stack_Size+0x202e44>
    3200:	01000000 	mrseq	r0, (UNDEF: 0)
    3204:	0005f19c 	muleq	r5, ip, r1
    3208:	138c1a00 	orrne	r1, ip, #0, 20
    320c:	ab010000 	blge	43214 <_Min_Stack_Size+0x42e14>
    3210:	00048f01 	andeq	r8, r4, r1, lsl #30
    3214:	1a500100 	bne	140361c <_Min_Stack_Size+0x140321c>
    3218:	0000084a 	andeq	r0, r0, sl, asr #16
    321c:	1801ab01 	stmdane	r1, {r0, r8, r9, fp, sp, pc}
    3220:	01000001 	tsteq	r0, r1
    3224:	c7190051 			; <UNDEFINED> instruction: 0xc7190051
    3228:	01000011 	tsteq	r0, r1, lsl r0
    322c:	107401c5 	rsbsne	r0, r4, r5, asr #3
    3230:	00120800 	andseq	r0, r2, r0, lsl #16
    3234:	9c010000 	stcls	0, cr0, [r1], {-0}
    3238:	00000626 	andeq	r0, r0, r6, lsr #12
    323c:	00138c1a 	andseq	r8, r3, sl, lsl ip
    3240:	01c50100 	biceq	r0, r5, r0, lsl #2
    3244:	0000048f 	andeq	r0, r0, pc, lsl #9
    3248:	c51b5001 	ldrgt	r5, [fp, #-1]
    324c:	01000014 	tsteq	r0, r4, lsl r0
    3250:	009701c5 	addseq	r0, r7, r5, asr #3
    3254:	17570000 	ldrbne	r0, [r7, -r0]
    3258:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    325c:	000013d1 	ldrdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    3260:	8801da01 	stmdahi	r1, {r0, r9, fp, ip, lr, pc}
    3264:	1a080010 	bne	2032ac <_Min_Stack_Size+0x202eac>
    3268:	01000000 	mrseq	r0, (UNDEF: 0)
    326c:	0006599c 	muleq	r6, ip, r9
    3270:	138c1a00 	orrne	r1, ip, #0, 20
    3274:	da010000 	ble	4327c <_Min_Stack_Size+0x42e7c>
    3278:	00048f01 	andeq	r8, r4, r1, lsl #30
    327c:	1a500100 	bne	1403684 <_Min_Stack_Size+0x1403284>
    3280:	0000084a 	andeq	r0, r0, sl, asr #16
    3284:	1801da01 	stmdane	r1, {r0, r9, fp, ip, lr, pc}
    3288:	01000001 	tsteq	r0, r1
    328c:	93190051 	tstls	r9, #81	; 0x51
    3290:	01000013 	tsteq	r0, r3, lsl r0
    3294:	10a401f4 	strdne	r0, [r4], r4	; <UNPREDICTABLE>
    3298:	001a0800 	andseq	r0, sl, r0, lsl #16
    329c:	9c010000 	stcls	0, cr0, [r1], {-0}
    32a0:	0000068c 	andeq	r0, r0, ip, lsl #13
    32a4:	00138c1a 	andseq	r8, r3, sl, lsl ip
    32a8:	01f40100 	mvnseq	r0, r0, lsl #2
    32ac:	0000048f 	andeq	r0, r0, pc, lsl #9
    32b0:	4a1a5001 	bmi	6972bc <_Min_Stack_Size+0x696ebc>
    32b4:	01000008 	tsteq	r0, r8
    32b8:	011801f4 			; <UNDEFINED> instruction: 0x011801f4
    32bc:	51010000 	mrspl	r0, (UNDEF: 1)
    32c0:	00c11900 	sbceq	r1, r1, r0, lsl #18
    32c4:	2d010000 	stccs	0, cr0, [r1, #-0]
    32c8:	0010c002 	andseq	ip, r0, r2
    32cc:	00000808 	andeq	r0, r0, r8, lsl #16
    32d0:	c19c0100 	orrsgt	r0, ip, r0, lsl #2
    32d4:	1a000006 	bne	32f4 <_Min_Stack_Size+0x2ef4>
    32d8:	0000138c 	andeq	r1, r0, ip, lsl #7
    32dc:	8f022d01 	svchi	0x00022d01
    32e0:	01000004 	tsteq	r0, r4
    32e4:	00cb1b50 	sbceq	r1, fp, r0, asr fp
    32e8:	2d010000 	stccs	0, cr0, [r1, #-0]
    32ec:	0000a202 	andeq	sl, r0, r2, lsl #4
    32f0:	00177800 	andseq	r7, r7, r0, lsl #16
    32f4:	e71d0000 	ldr	r0, [sp, -r0]
    32f8:	01000014 	tsteq	r0, r4, lsl r0
    32fc:	00a2023d 	adceq	r0, r2, sp, lsr r2
    3300:	10c80000 	sbcne	r0, r8, r0
    3304:	00080800 	andeq	r0, r8, r0, lsl #16
    3308:	9c010000 	stcls	0, cr0, [r1], {-0}
    330c:	000006ec 	andeq	r0, r0, ip, ror #13
    3310:	00138c1b 	andseq	r8, r3, fp, lsl ip
    3314:	023d0100 	eorseq	r0, sp, #0, 2
    3318:	0000048f 	andeq	r0, r0, pc, lsl #9
    331c:	00001799 	muleq	r0, r9, r7
    3320:	133c1900 	teqne	ip, #0, 18
    3324:	71010000 	mrsvc	r0, (UNDEF: 1)
    3328:	0010d002 	andseq	sp, r0, r2
    332c:	00001608 	andeq	r1, r0, r8, lsl #12
    3330:	219c0100 	orrscs	r0, ip, r0, lsl #2
    3334:	1a000007 	bne	3358 <_Min_Stack_Size+0x2f58>
    3338:	0000138c 	andeq	r1, r0, ip, lsl #7
    333c:	8f027101 	svchi	0x00027101
    3340:	01000004 	tsteq	r0, r4
    3344:	13bc1b50 			; <UNDEFINED> instruction: 0x13bc1b50
    3348:	71010000 	mrsvc	r0, (UNDEF: 1)
    334c:	00009702 	andeq	r9, r0, r2, lsl #14
    3350:	0017ba00 	andseq	fp, r7, r0, lsl #20
    3354:	af190000 	svcge	0x00190000
    3358:	01000011 	tsteq	r0, r1, lsl r0
    335c:	10e80285 	rscne	r0, r8, r5, lsl #5
    3360:	001a0800 	andseq	r0, sl, r0, lsl #16
    3364:	9c010000 	stcls	0, cr0, [r1], {-0}
    3368:	00000754 	andeq	r0, r0, r4, asr r7
    336c:	00138c1a 	andseq	r8, r3, sl, lsl ip
    3370:	02850100 	addeq	r0, r5, #0, 2
    3374:	0000048f 	andeq	r0, r0, pc, lsl #9
    3378:	4a1a5001 	bmi	697384 <_Min_Stack_Size+0x696f84>
    337c:	01000008 	tsteq	r0, r8
    3380:	01180285 	tsteq	r8, r5, lsl #5
    3384:	51010000 	mrspl	r0, (UNDEF: 1)
    3388:	148d1900 	strne	r1, [sp], #2304	; 0x900
    338c:	a0010000 	andge	r0, r1, r0
    3390:	00110402 	andseq	r0, r1, r2, lsl #8
    3394:	00001608 	andeq	r1, r0, r8, lsl #12
    3398:	899c0100 	ldmibhi	ip, {r8}
    339c:	1a000007 	bne	33c0 <_Min_Stack_Size+0x2fc0>
    33a0:	0000138c 	andeq	r1, r0, ip, lsl #7
    33a4:	8f02a001 	svchi	0x0002a001
    33a8:	01000004 	tsteq	r0, r4
    33ac:	12151b50 	andsne	r1, r5, #80, 22	; 0x14000
    33b0:	a0010000 	andge	r0, r1, r0
    33b4:	0000a202 	andeq	sl, r0, r2, lsl #4
    33b8:	0017db00 	andseq	sp, r7, r0, lsl #22
    33bc:	7d190000 	ldcvc	0, cr0, [r9, #-0]
    33c0:	01000012 	tsteq	r0, r2, lsl r0
    33c4:	111c02e5 	tstne	ip, r5, ror #5
    33c8:	00160800 	andseq	r0, r6, r0, lsl #16
    33cc:	9c010000 	stcls	0, cr0, [r1], {-0}
    33d0:	000007be 			; <UNDEFINED> instruction: 0x000007be
    33d4:	00138c1a 	andseq	r8, r3, sl, lsl ip
    33d8:	02e50100 	rsceq	r0, r5, #0, 2
    33dc:	0000048f 	andeq	r0, r0, pc, lsl #9
    33e0:	da1b5001 	ble	6d73ec <_Min_Stack_Size+0x6d6fec>
    33e4:	01000011 	tsteq	r0, r1, lsl r0
    33e8:	00a202e5 	adceq	r0, r2, r5, ror #5
    33ec:	17fc0000 	ldrbne	r0, [ip, r0]!
    33f0:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    33f4:	000013fa 	strdeq	r1, [r0], -sl
    33f8:	3402f701 	strcc	pc, [r2], #-1793	; 0x701
    33fc:	1a080011 	bne	203448 <_Min_Stack_Size+0x203048>
    3400:	01000000 	mrseq	r0, (UNDEF: 0)
    3404:	0007f19c 	muleq	r7, ip, r1
    3408:	138c1a00 	orrne	r1, ip, #0, 20
    340c:	f7010000 			; <UNDEFINED> instruction: 0xf7010000
    3410:	00048f02 	andeq	r8, r4, r2, lsl #30
    3414:	1a500100 	bne	140381c <_Min_Stack_Size+0x140341c>
    3418:	0000084a 	andeq	r0, r0, sl, asr #16
    341c:	1802f701 	stmdane	r2, {r0, r8, r9, sl, ip, sp, lr, pc}
    3420:	01000001 	tsteq	r0, r1
    3424:	60190051 	andsvs	r0, r9, r1, asr r0
    3428:	01000013 	tsteq	r0, r3, lsl r0
    342c:	1150030f 	cmpne	r0, pc, lsl #6
    3430:	000c0800 	andeq	r0, ip, r0, lsl #16
    3434:	9c010000 	stcls	0, cr0, [r1], {-0}
    3438:	00000816 	andeq	r0, r0, r6, lsl r8
    343c:	00138c1a 	andseq	r8, r3, sl, lsl ip
    3440:	030f0100 	movweq	r0, #61696	; 0xf100
    3444:	0000048f 	andeq	r0, r0, pc, lsl #9
    3448:	19005001 	stmdbne	r0, {r0, ip, lr}
    344c:	000014a0 	andeq	r1, r0, r0, lsr #9
    3450:	5c034401 	cfstrspl	mvf4, [r3], {1}
    3454:	1a080011 	bne	2034a0 <_Min_Stack_Size+0x2030a0>
    3458:	01000000 	mrseq	r0, (UNDEF: 0)
    345c:	0008499c 	muleq	r8, ip, r9
    3460:	138c1a00 	orrne	r1, ip, #0, 20
    3464:	44010000 	strmi	r0, [r1], #-0
    3468:	00048f03 	andeq	r8, r4, r3, lsl #30
    346c:	1a500100 	bne	1403874 <_Min_Stack_Size+0x1403474>
    3470:	0000084a 	andeq	r0, r0, sl, asr #16
    3474:	18034401 	stmdane	r3, {r0, sl, lr}
    3478:	01000001 	tsteq	r0, r1
    347c:	4d190051 	ldcmi	0, cr0, [r9, #-324]	; 0xfffffebc
    3480:	01000013 	tsteq	r0, r3, lsl r0
    3484:	11780398 			; <UNDEFINED> instruction: 0x11780398
    3488:	00120800 	andseq	r0, r2, r0, lsl #16
    348c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3490:	0000087e 	andeq	r0, r0, lr, ror r8
    3494:	00138c1a 	andseq	r8, r3, sl, lsl ip
    3498:	03980100 	orrseq	r0, r8, #0, 2
    349c:	0000048f 	andeq	r0, r0, pc, lsl #9
    34a0:	6d1b5001 	ldcvs	0, cr5, [fp, #-4]
    34a4:	01000012 	tsteq	r0, r2, lsl r0
    34a8:	00970398 	umullseq	r0, r7, r8, r3
    34ac:	181d0000 	ldmdane	sp, {}	; <UNPREDICTABLE>
    34b0:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    34b4:	000013a9 	andeq	r1, r0, r9, lsr #7
    34b8:	8c03ab01 	stchi	11, cr10, [r3], {1}
    34bc:	1a080011 	bne	203508 <_Min_Stack_Size+0x203108>
    34c0:	01000000 	mrseq	r0, (UNDEF: 0)
    34c4:	0008b19c 	muleq	r8, ip, r1
    34c8:	138c1a00 	orrne	r1, ip, #0, 20
    34cc:	ab010000 	blge	434d4 <_Min_Stack_Size+0x430d4>
    34d0:	00048f03 	andeq	r8, r4, r3, lsl #30
    34d4:	1a500100 	bne	14038dc <_Min_Stack_Size+0x14034dc>
    34d8:	0000084a 	andeq	r0, r0, sl, asr #16
    34dc:	1803ab01 	stmdane	r3, {r0, r8, r9, fp, sp, pc}
    34e0:	01000001 	tsteq	r0, r1
    34e4:	44190051 	ldrmi	r0, [r9], #-81	; 0x51
    34e8:	01000014 	tsteq	r0, r4, lsl r0
    34ec:	11a803c4 			; <UNDEFINED> instruction: 0x11a803c4
    34f0:	001a0800 	andseq	r0, sl, r0, lsl #16
    34f4:	9c010000 	stcls	0, cr0, [r1], {-0}
    34f8:	000008e4 	andeq	r0, r0, r4, ror #17
    34fc:	00138c1a 	andseq	r8, r3, sl, lsl ip
    3500:	03c40100 	biceq	r0, r4, #0, 2
    3504:	0000048f 	andeq	r0, r0, pc, lsl #9
    3508:	4a1a5001 	bmi	697514 <_Min_Stack_Size+0x697114>
    350c:	01000008 	tsteq	r0, r8
    3510:	011803c4 	tsteq	r8, r4, asr #7
    3514:	51010000 	mrspl	r0, (UNDEF: 1)
    3518:	14071900 	strne	r1, [r7], #-2304	; 0x900
    351c:	0b010000 	bleq	43524 <_Min_Stack_Size+0x43124>
    3520:	0011c404 	andseq	ip, r1, r4, lsl #8
    3524:	00001608 	andeq	r1, r0, r8, lsl #12
    3528:	199c0100 	ldmibne	ip, {r8}
    352c:	1a000009 	bne	3558 <_Min_Stack_Size+0x3158>
    3530:	0000138c 	andeq	r1, r0, ip, lsl #7
    3534:	8f040b01 	svchi	0x00040b01
    3538:	01000004 	tsteq	r0, r4
    353c:	123d1b50 	eorsne	r1, sp, #80, 22	; 0x14000
    3540:	0b010000 	bleq	43548 <_Min_Stack_Size+0x43148>
    3544:	0000a204 	andeq	sl, r0, r4, lsl #4
    3548:	00183e00 	andseq	r3, r8, r0, lsl #28
    354c:	24190000 	ldrcs	r0, [r9], #-0
    3550:	01000014 	tsteq	r0, r4, lsl r0
    3554:	11dc041d 	bicsne	r0, ip, sp, lsl r4
    3558:	001a0800 	andseq	r0, sl, r0, lsl #16
    355c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3560:	0000094c 	andeq	r0, r0, ip, asr #18
    3564:	00138c1a 	andseq	r8, r3, sl, lsl ip
    3568:	041d0100 	ldreq	r0, [sp], #-256	; 0x100
    356c:	0000048f 	andeq	r0, r0, pc, lsl #9
    3570:	4a1a5001 	bmi	69757c <_Min_Stack_Size+0x69717c>
    3574:	01000008 	tsteq	r0, r8
    3578:	0118041d 	tsteq	r8, sp, lsl r4
    357c:	51010000 	mrspl	r0, (UNDEF: 1)
    3580:	12221900 	eorne	r1, r2, #0, 18
    3584:	4b010000 	blmi	4358c <_Min_Stack_Size+0x4318c>
    3588:	0011f804 	andseq	pc, r1, r4, lsl #16
    358c:	00001408 	andeq	r1, r0, r8, lsl #8
    3590:	8f9c0100 	svchi	0x009c0100
    3594:	1a000009 	bne	35c0 <_Min_Stack_Size+0x31c0>
    3598:	0000138c 	andeq	r1, r0, ip, lsl #7
    359c:	8f044b01 	svchi	0x00044b01
    35a0:	01000004 	tsteq	r0, r4
    35a4:	137f1b50 	cmnne	pc, #80, 22	; 0x14000
    35a8:	4b010000 	blmi	435b0 <_Min_Stack_Size+0x431b0>
    35ac:	0000a204 	andeq	sl, r0, r4, lsl #4
    35b0:	00185f00 	andseq	r5, r8, r0, lsl #30
    35b4:	084a1a00 	stmdaeq	sl, {r9, fp, ip}^
    35b8:	4b010000 	blmi	435c0 <_Min_Stack_Size+0x431c0>
    35bc:	00011804 	andeq	r1, r1, r4, lsl #16
    35c0:	00520100 	subseq	r0, r2, r0, lsl #2
    35c4:	00137019 	andseq	r7, r3, r9, lsl r0
    35c8:	04cf0100 	strbeq	r0, [pc], #256	; 35d0 <_Min_Stack_Size+0x31d0>
    35cc:	0800120c 	stmdaeq	r0, {r2, r3, r9, ip}
    35d0:	0000003a 	andeq	r0, r0, sl, lsr r0
    35d4:	0a129c01 	beq	4aa5e0 <_Min_Stack_Size+0x4aa1e0>
    35d8:	8c1b0000 	ldchi	0, cr0, [fp], {-0}
    35dc:	01000013 	tsteq	r0, r3, lsl r0
    35e0:	048f04cf 	streq	r0, [pc], #1231	; 35e8 <_Min_Stack_Size+0x31e8>
    35e4:	18990000 	ldmne	r9, {}	; <UNPREDICTABLE>
    35e8:	0c1b0000 	ldceq	0, cr0, [fp], {-0}
    35ec:	01000012 	tsteq	r0, r2, lsl r0
    35f0:	00a204cf 	adceq	r0, r2, pc, asr #9
    35f4:	18d20000 	ldmne	r2, {}^	; <UNPREDICTABLE>
    35f8:	4a1a0000 	bmi	683600 <_Min_Stack_Size+0x683200>
    35fc:	01000008 	tsteq	r0, r8
    3600:	011804cf 	tsteq	r8, pc, asr #9
    3604:	52010000 	andpl	r0, r1, #0
    3608:	0014f91c 	andseq	pc, r4, ip, lsl r9	; <UNPREDICTABLE>
    360c:	04d10100 	ldrbeq	r0, [r1], #256	; 0x100
    3610:	000000b8 	strheq	r0, [r0], -r8
    3614:	000018f3 	strdeq	r1, [r0], -r3
    3618:	0013cb1c 	andseq	ip, r3, ip, lsl fp
    361c:	04d10100 	ldrbeq	r0, [r1], #256	; 0x100
    3620:	000000b8 	strheq	r0, [r0], -r8
    3624:	00001912 	andeq	r1, r0, r2, lsl r9
    3628:	0014e01c 	andseq	lr, r4, ip, lsl r0
    362c:	04d10100 	ldrbeq	r0, [r1], #256	; 0x100
    3630:	000000b8 	strheq	r0, [r0], -r8
    3634:	00001926 	andeq	r1, r0, r6, lsr #18
    3638:	0013211e 	andseq	r2, r3, lr, lsl r1
    363c:	04d20100 	ldrbeq	r0, [r2], #256	; 0x100
    3640:	000000b8 	strheq	r0, [r0], -r8
    3644:	1d005001 	stcne	0, cr5, [r0, #-4]
    3648:	00000486 	andeq	r0, r0, r6, lsl #9
    364c:	ea050f01 	b	147258 <_Min_Stack_Size+0x146e58>
    3650:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    3654:	0c080012 	stceq	0, cr0, [r8], {18}
    3658:	01000000 	mrseq	r0, (UNDEF: 0)
    365c:	000a5b9c 	muleq	sl, ip, fp
    3660:	138c1b00 	orrne	r1, ip, #0, 22
    3664:	0f010000 	svceq	0x00010000
    3668:	00048f05 	andeq	r8, r4, r5, lsl #30
    366c:	00195b00 	andseq	r5, r9, r0, lsl #22
    3670:	129e1a00 	addsne	r1, lr, #0, 20
    3674:	0f010000 	svceq	0x00010000
    3678:	0000a205 	andeq	sl, r0, r5, lsl #4
    367c:	1c510100 	ldfnee	f0, [r1], {-0}
    3680:	00000a42 	andeq	r0, r0, r2, asr #20
    3684:	ea051101 	b	147a90 <_Min_Stack_Size+0x147690>
    3688:	7c000000 	stcvc	0, cr0, [r0], {-0}
    368c:	00000019 	andeq	r0, r0, r9, lsl r0
    3690:	00132c19 	andseq	r2, r3, r9, lsl ip
    3694:	05400100 	strbeq	r0, [r0, #-256]	; 0x100
    3698:	08001254 	stmdaeq	r0, {r2, r4, r6, r9, ip}
    369c:	00000008 	andeq	r0, r0, r8
    36a0:	0a909c01 	beq	fe42a6ac <_estack+0xde3fa6ac>
    36a4:	8c1a0000 	ldchi	0, cr0, [sl], {-0}
    36a8:	01000013 	tsteq	r0, r3, lsl r0
    36ac:	048f0540 	streq	r0, [pc], #1344	; 36b4 <_Min_Stack_Size+0x32b4>
    36b0:	50010000 	andpl	r0, r1, r0
    36b4:	00129e1b 	andseq	r9, r2, fp, lsl lr
    36b8:	05400100 	strbeq	r0, [r0, #-256]	; 0x100
    36bc:	000000a2 	andeq	r0, r0, r2, lsr #1
    36c0:	000019a4 	andeq	r1, r0, r4, lsr #19
    36c4:	13e81d00 	mvnne	r1, #0, 26
    36c8:	62010000 	andvs	r0, r1, #0
    36cc:	0000f605 	andeq	pc, r0, r5, lsl #12
    36d0:	00125c00 	andseq	r5, r2, r0, lsl #24
    36d4:	00004c08 	andeq	r4, r0, r8, lsl #24
    36d8:	0b9c0100 	bleq	fe703ae0 <_estack+0xde6d3ae0>
    36dc:	1b00000b 	blne	3710 <_Min_Stack_Size+0x3310>
    36e0:	0000138c 	andeq	r1, r0, ip, lsl #7
    36e4:	8f056201 	svchi	0x00056201
    36e8:	c5000004 	strgt	r0, [r0, #-4]
    36ec:	1b000019 	blne	3758 <_Min_Stack_Size+0x3358>
    36f0:	0000120c 	andeq	r1, r0, ip, lsl #4
    36f4:	a2056201 	andge	r6, r5, #268435456	; 0x10000000
    36f8:	0a000000 	beq	3700 <_Min_Stack_Size+0x3300>
    36fc:	1c00001a 	stcne	0, cr0, [r0], {26}
    3700:	000013ca 	andeq	r1, r0, sl, asr #7
    3704:	b8056401 	stmdalt	r5, {r0, sl, sp, lr}
    3708:	36000000 	strcc	r0, [r0], -r0
    370c:	1c00001a 	stcne	0, cr0, [r0], {26}
    3710:	000014e0 	andeq	r1, r0, r0, ror #9
    3714:	b8056401 	stmdalt	r5, {r0, sl, sp, lr}
    3718:	a3000000 	movwge	r0, #0
    371c:	1c00001a 	stcne	0, cr0, [r0], {26}
    3720:	000014f9 	strdeq	r1, [r0], -r9
    3724:	b8056401 	stmdalt	r5, {r0, sl, sp, lr}
    3728:	01000000 	mrseq	r0, (UNDEF: 0)
    372c:	1c00001b 	stcne	0, cr0, [r0], {27}
    3730:	00000a42 	andeq	r0, r0, r2, asr #20
    3734:	f6056501 			; <UNDEFINED> instruction: 0xf6056501
    3738:	61000000 	mrsvs	r0, (UNDEF: 0)
    373c:	0000001b 	andeq	r0, r0, fp, lsl r0
    3740:	00125519 	andseq	r5, r2, r9, lsl r5
    3744:	05ac0100 	streq	r0, [ip, #256]!	; 0x100
    3748:	080012a8 	stmdaeq	r0, {r3, r5, r7, r9, ip}
    374c:	00000010 	andeq	r0, r0, r0, lsl r0
    3750:	0b5c9c01 	bleq	172a75c <_Min_Stack_Size+0x172a35c>
    3754:	8c1a0000 	ldchi	0, cr0, [sl], {-0}
    3758:	01000013 	tsteq	r0, r3, lsl r0
    375c:	048f05ac 	streq	r0, [pc], #1452	; 3764 <_Min_Stack_Size+0x3364>
    3760:	50010000 	andpl	r0, r1, r0
    3764:	00120c1b 	andseq	r0, r2, fp, lsl ip
    3768:	05ac0100 	streq	r0, [ip, #256]!	; 0x100
    376c:	000000a2 	andeq	r0, r0, r2, lsr #1
    3770:	00001ba3 	andeq	r1, r0, r3, lsr #23
    3774:	0013ca1c 	andseq	ip, r3, ip, lsl sl
    3778:	05ae0100 	streq	r0, [lr, #256]!	; 0x100
    377c:	000000a2 	andeq	r0, r0, r2, lsr #1
    3780:	00001bc4 	andeq	r1, r0, r4, asr #23
    3784:	0014e01f 	andseq	lr, r4, pc, lsl r0
    3788:	05ae0100 	streq	r0, [lr, #256]!	; 0x100
    378c:	000000a2 	andeq	r0, r0, r2, lsr #1
    3790:	04682000 	strbteq	r2, [r8], #-0
    3794:	a7070000 	strge	r0, [r7, -r0]
    3798:	0000cf06 	andeq	ip, r0, r6, lsl #30
    379c:	0bab2100 	bleq	feacbba4 <_estack+0xdea9bba4>
    37a0:	49050000 	stmdbmi	r5, {}	; <UNPREDICTABLE>
    37a4:	000b7f02 	andeq	r7, fp, r2, lsl #30
    37a8:	00b82200 	adcseq	r2, r8, r0, lsl #4
    37ac:	18220000 	stmdane	r2!, {}	; <UNPREDICTABLE>
    37b0:	00000001 	andeq	r0, r0, r1
    37b4:	000ed521 	andeq	sp, lr, r1, lsr #10
    37b8:	024a0500 	subeq	r0, sl, #0, 10
    37bc:	00000b96 	muleq	r0, r6, fp
    37c0:	0000b822 	andeq	fp, r0, r2, lsr #16
    37c4:	01182200 	tsteq	r8, r0, lsl #4
    37c8:	21000000 	mrscs	r0, (UNDEF: 0)
    37cc:	00001020 	andeq	r1, r0, r0, lsr #32
    37d0:	a8023205 	stmdage	r2, {r0, r2, r9, ip, sp}
    37d4:	2200000b 	andcs	r0, r0, #11
    37d8:	00000ba8 	andeq	r0, r0, r8, lsr #23
    37dc:	27041500 	strcs	r1, [r4, -r0, lsl #10]
    37e0:	00000002 	andeq	r0, r0, r2
    37e4:	000002d8 	ldrdeq	r0, [r0], -r8
    37e8:	0b920004 	bleq	fe483800 <_estack+0xde453800>
    37ec:	01040000 	mrseq	r0, (UNDEF: 4)
    37f0:	000000f8 	strdeq	r0, [r0], -r8
    37f4:	0015f601 	andseq	pc, r5, r1, lsl #12
    37f8:	00051b00 	andeq	r1, r5, r0, lsl #22
    37fc:	00043800 	andeq	r3, r4, r0, lsl #16
    3800:	00000000 	andeq	r0, r0, r0
    3804:	0014b300 	andseq	fp, r4, r0, lsl #6
    3808:	06010200 	streq	r0, [r1], -r0, lsl #4
    380c:	000002d3 	ldrdeq	r0, [r0], -r3
    3810:	00029703 	andeq	r9, r2, r3, lsl #14
    3814:	371c0200 	ldrcc	r0, [ip, -r0, lsl #4]
    3818:	02000000 	andeq	r0, r0, #0
    381c:	02d10801 	sbcseq	r0, r1, #65536	; 0x10000
    3820:	02020000 	andeq	r0, r2, #0
    3824:	00009505 	andeq	r9, r0, r5, lsl #10
    3828:	07020200 	streq	r0, [r2, -r0, lsl #4]
    382c:	00000353 	andeq	r0, r0, r3, asr r3
    3830:	0004ad03 	andeq	sl, r4, r3, lsl #26
    3834:	57370200 	ldrpl	r0, [r7, -r0, lsl #4]!
    3838:	02000000 	andeq	r0, r0, #0
    383c:	023c0504 	eorseq	r0, ip, #4, 10	; 0x1000000
    3840:	62030000 	andvs	r0, r3, #0
    3844:	02000000 	andeq	r0, r0, #0
    3848:	00006938 	andeq	r6, r0, r8, lsr r9
    384c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    3850:	00000300 	andeq	r0, r0, r0, lsl #6
    3854:	37050802 	strcc	r0, [r5, -r2, lsl #16]
    3858:	02000002 	andeq	r0, r0, #2
    385c:	02fb0708 	rscseq	r0, fp, #8, 14	; 0x200000
    3860:	04040000 	streq	r0, [r4], #-0
    3864:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    3868:	07040200 	streq	r0, [r4, -r0, lsl #4]
    386c:	00000305 	andeq	r0, r0, r5, lsl #6
    3870:	00029903 	andeq	r9, r2, r3, lsl #18
    3874:	2c2a0300 	stccs	3, cr0, [sl], #-0
    3878:	03000000 	movweq	r0, #0
    387c:	000004af 	andeq	r0, r0, pc, lsr #9
    3880:	004c4103 	subeq	r4, ip, r3, lsl #2
    3884:	64030000 	strvs	r0, [r3], #-0
    3888:	03000000 	movweq	r0, #0
    388c:	00005e42 	andeq	r5, r0, r2, asr #28
    3890:	07040200 	streq	r0, [r4, -r0, lsl #4]
    3894:	00000046 	andeq	r0, r0, r6, asr #32
    3898:	0000a205 	andeq	sl, r0, r5, lsl #4
    389c:	00a20600 	adceq	r0, r2, r0, lsl #12
    38a0:	00c90000 	sbceq	r0, r9, r0
    38a4:	ad070000 	stcge	0, cr0, [r7, #-0]
    38a8:	01000000 	mrseq	r0, (UNDEF: 0)
    38ac:	00a20600 	adceq	r0, r2, r0, lsl #12
    38b0:	00d90000 	sbcseq	r0, r9, r0
    38b4:	ad070000 	stcge	0, cr0, [r7, #-0]
    38b8:	03000000 	movweq	r0, #0
    38bc:	00970500 	addseq	r0, r7, r0, lsl #10
    38c0:	01080000 	mrseq	r0, (UNDEF: 8)
    38c4:	f401f704 	vst1.8	{d15}, [r1], r4
    38c8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    38cc:	000009f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    38d0:	45530a00 	ldrbmi	r0, [r3, #-2560]	; 0xa00
    38d4:	00010054 	andeq	r0, r1, r4, asr r0
    38d8:	000f130b 	andeq	r1, pc, fp, lsl #6
    38dc:	01f70400 	mvnseq	r0, r0, lsl #8
    38e0:	000000de 	ldrdeq	r0, [r0], -lr
    38e4:	f9040108 			; <UNDEFINED> instruction: 0xf9040108
    38e8:	00011601 	andeq	r1, r1, r1, lsl #12
    38ec:	03c70900 	biceq	r0, r7, #0, 18
    38f0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    38f4:	00000245 	andeq	r0, r0, r5, asr #4
    38f8:	000b0001 	andeq	r0, fp, r1
    38fc:	04000005 	streq	r0, [r0], #-5
    3900:	010001f9 	strdeq	r0, [r0, -r9]
    3904:	240c0000 	strcs	r0, [ip], #-0
    3908:	6d03e604 	stcvs	6, cr14, [r3, #-16]
    390c:	0d000001 	stceq	0, cr0, [r0, #-4]
    3910:	00001568 	andeq	r1, r0, r8, ror #10
    3914:	b403e804 	strlt	lr, [r3], #-2052	; 0x804
    3918:	00000000 	andeq	r0, r0, r0
    391c:	434d500e 	movtmi	r5, #53262	; 0xd00e
    3920:	03e90400 	mvneq	r0, #0, 8
    3924:	000000b4 	strheq	r0, [r0], -r4
    3928:	15ac0d04 	strne	r0, [ip, #3332]!	; 0xd04
    392c:	ea040000 	b	103934 <_Min_Stack_Size+0x103534>
    3930:	00016d03 	andeq	r6, r1, r3, lsl #26
    3934:	890d0800 	stmdbhi	sp, {fp}
    3938:	04000015 	streq	r0, [r0], #-21
    393c:	00b903eb 	adcseq	r0, r9, fp, ror #7
    3940:	0d180000 	ldceq	0, cr0, [r8, #-0]
    3944:	00001562 	andeq	r1, r0, r2, ror #10
    3948:	b403ec04 	strlt	lr, [r3], #-3076	; 0xc04
    394c:	20000000 	andcs	r0, r0, r0
    3950:	00c90500 	sbceq	r0, r9, r0, lsl #10
    3954:	360b0000 	strcc	r0, [fp], -r0
    3958:	04000016 	streq	r0, [r0], #-22
    395c:	012203ed 	smulwteq	r2, sp, r3
    3960:	3e0f0000 	cdpcc	0, 0, cr0, cr15, cr0, {0}
    3964:	01000015 	tsteq	r0, r5, lsl r0
    3968:	0012b864 	andseq	fp, r2, r4, ror #16
    396c:	00001a08 	andeq	r1, r0, r8, lsl #20
    3970:	c49c0100 	ldrgt	r0, [ip], #256	; 0x100
    3974:	10000001 	andne	r0, r0, r1
    3978:	080012c4 	stmdaeq	r0, {r2, r6, r7, r9, ip}
    397c:	000002c8 	andeq	r0, r0, r8, asr #5
    3980:	000001ad 	andeq	r0, r0, sp, lsr #3
    3984:	01510111 	cmpeq	r1, r1, lsl r1
    3988:	50011131 	andpl	r1, r1, r1, lsr r1
    398c:	40000a03 	andmi	r0, r0, r3, lsl #20
    3990:	12d21200 	sbcsne	r1, r2, #0, 4
    3994:	02c80800 	sbceq	r0, r8, #0, 16
    3998:	01110000 	tsteq	r1, r0
    399c:	11300151 	teqne	r0, r1, asr r1
    39a0:	0a035001 	beq	d79ac <_Min_Stack_Size+0xd75ac>
    39a4:	00004000 	andeq	r4, r0, r0
    39a8:	00165a0f 	andseq	r5, r6, pc, lsl #20
    39ac:	d4760100 	ldrbtle	r0, [r6], #-256	; 0x100
    39b0:	0c080012 	stceq	0, cr0, [r8], {18}
    39b4:	01000000 	mrseq	r0, (UNDEF: 0)
    39b8:	0001e79c 	muleq	r1, ip, r7
    39bc:	15e31300 	strbne	r1, [r3, #768]!	; 0x300
    39c0:	76010000 	strvc	r0, [r1], -r0
    39c4:	0000008c 	andeq	r0, r0, ip, lsl #1
    39c8:	0f005001 	svceq	0x00005001
    39cc:	00001592 	muleq	r0, r2, r5
    39d0:	12e08b01 	rscne	r8, r0, #1024	; 0x400
    39d4:	000c0800 	andeq	r0, ip, r0, lsl #16
    39d8:	9c010000 	stcls	0, cr0, [r1], {-0}
    39dc:	0000020a 	andeq	r0, r0, sl, lsl #4
    39e0:	00084a13 	andeq	r4, r8, r3, lsl sl
    39e4:	168b0100 	strne	r0, [fp], r0, lsl #2
    39e8:	01000001 	tsteq	r0, r1
    39ec:	4c0f0050 	stcmi	0, cr0, [pc], {80}	; 0x50
    39f0:	01000015 	tsteq	r0, r5, lsl r0
    39f4:	0012eca2 	andseq	lr, r2, r2, lsr #25
    39f8:	00002e08 	andeq	r2, r0, r8, lsl #28
    39fc:	4d9c0100 	ldfmis	f0, [ip]
    3a00:	14000002 	strne	r0, [r0], #-2
    3a04:	00001645 	andeq	r1, r0, r5, asr #12
    3a08:	008ca201 	addeq	sl, ip, r1, lsl #4
    3a0c:	1beb0000 	blne	ffac3a14 <_estack+0xdfa93a14>
    3a10:	b3140000 	tstlt	r4, #0
    3a14:	01000015 	tsteq	r0, r5, lsl r0
    3a18:	00008ca2 	andeq	r8, r0, r2, lsr #25
    3a1c:	001c0c00 	andseq	r0, ip, r0, lsl #24
    3a20:	6d741500 	cfldr64vs	mvdx1, [r4, #-0]
    3a24:	a4010070 	strge	r0, [r1], #-112	; 0x70
    3a28:	000000a2 	andeq	r0, r0, r2, lsr #1
    3a2c:	00001c2d 	andeq	r1, r0, sp, lsr #24
    3a30:	15c30f00 	strbne	r0, [r3, #3840]	; 0xf00
    3a34:	b7010000 	strlt	r0, [r1, -r0]
    3a38:	0800131c 	stmdaeq	r0, {r2, r3, r4, r8, r9, ip}
    3a3c:	0000000c 	andeq	r0, r0, ip
    3a40:	02709c01 	rsbseq	r9, r0, #256	; 0x100
    3a44:	6f130000 	svcvs	0x00130000
    3a48:	01000015 	tsteq	r0, r5, lsl r0
    3a4c:	0000a2b7 			; <UNDEFINED> instruction: 0x0000a2b7
    3a50:	00500100 	subseq	r0, r0, r0, lsl #2
    3a54:	0015020f 	andseq	r0, r5, pc, lsl #4
    3a58:	28c80100 	stmiacs	r8, {r8}^
    3a5c:	0c080013 	stceq	0, cr0, [r8], {19}
    3a60:	01000000 	mrseq	r0, (UNDEF: 0)
    3a64:	0002939c 	muleq	r2, ip, r3
    3a68:	084a1300 	stmdaeq	sl, {r8, r9, ip}^
    3a6c:	c8010000 	stmdagt	r1, {}	; <UNPREDICTABLE>
    3a70:	00000116 	andeq	r0, r0, r6, lsl r1
    3a74:	16005001 	strne	r5, [r0], -r1
    3a78:	0000151d 	andeq	r1, r0, sp, lsl r5
    3a7c:	00f4d501 	rscseq	sp, r4, r1, lsl #10
    3a80:	13340000 	teqne	r4, #0
    3a84:	00100800 	andseq	r0, r0, r0, lsl #16
    3a88:	9c010000 	stcls	0, cr0, [r1], {-0}
    3a8c:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
    3a90:	000a4217 	andeq	r4, sl, r7, lsl r2
    3a94:	f4d70100 			; <UNDEFINED> instruction: 0xf4d70100
    3a98:	6a000000 	bvs	3aa0 <_Min_Stack_Size+0x36a0>
    3a9c:	0000001c 	andeq	r0, r0, ip, lsl r0
    3aa0:	00046818 	andeq	r6, r4, r8, lsl r8
    3aa4:	06a70500 	strteq	r0, [r7], r0, lsl #10
    3aa8:	000000d9 	ldrdeq	r0, [r0], -r9
    3aac:	000ed519 	andeq	sp, lr, r9, lsl r5
    3ab0:	024a0600 	subeq	r0, sl, #0, 12
    3ab4:	0000a21a 	andeq	sl, r0, sl, lsl r2
    3ab8:	01161a00 	tsteq	r6, r0, lsl #20
    3abc:	00000000 	andeq	r0, r0, r0

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0x101
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0024 	bleq	2c00ac <_Min_Stack_Size+0x2bfcac>
  18:	0e030b3e 	vmoveq.16	d3[0], r0
  1c:	16030000 	strne	r0, [r3], -r0
  20:	3a0e0300 	bcc	380c28 <_Min_Stack_Size+0x380828>
  24:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  28:	04000013 	streq	r0, [r0], #-19
  2c:	0b0b0024 	bleq	2c00c4 <_Min_Stack_Size+0x2bfcc4>
  30:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
  34:	35050000 	strcc	r0, [r5, #-0]
  38:	00134900 	andseq	r4, r3, r0, lsl #18
  3c:	01010600 	tsteq	r1, r0, lsl #12
  40:	13011349 	movwne	r1, #4937	; 0x1349
  44:	21070000 	mrscs	r0, (UNDEF: 7)
  48:	2f134900 	svccs	0x00134900
  4c:	0800000b 	stmdaeq	r0, {r0, r1, r3}
  50:	0b0b0104 	bleq	2c0468 <_Min_Stack_Size+0x2c0068>
  54:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
  58:	00001301 	andeq	r1, r0, r1, lsl #6
  5c:	03002809 	movweq	r2, #2057	; 0x809
  60:	000d1c0e 	andeq	r1, sp, lr, lsl #24
  64:	00280a00 	eoreq	r0, r8, r0, lsl #20
  68:	0d1c0803 	ldceq	8, cr0, [ip, #-12]
  6c:	160b0000 	strne	r0, [fp], -r0
  70:	3a0e0300 	bcc	380c78 <_Min_Stack_Size+0x380878>
  74:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  78:	0c000013 	stceq	0, cr0, [r0], {19}
  7c:	0b0b0113 	bleq	2c04d0 <_Min_Stack_Size+0x2c00d0>
  80:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
  84:	00001301 	andeq	r1, r0, r1, lsl #6
  88:	03000d0d 	movweq	r0, #3341	; 0xd0d
  8c:	3b0b3a0e 	blcc	2ce8cc <_Min_Stack_Size+0x2ce4cc>
  90:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
  94:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
  98:	0803000d 	stmdaeq	r3, {r0, r2, r3}
  9c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
  a0:	0b381349 	bleq	e04dcc <_Min_Stack_Size+0xe049cc>
  a4:	040f0000 	streq	r0, [pc], #-0	; ac <_Min_Heap_Size+0xac>
  a8:	3a0b0b01 	bcc	2c2cb4 <_Min_Stack_Size+0x2c28b4>
  ac:	010b3b0b 	tsteq	fp, fp, lsl #22
  b0:	10000013 	andne	r0, r0, r3, lsl r0
  b4:	0b0b0113 	bleq	2c0508 <_Min_Stack_Size+0x2c0108>
  b8:	0b3b0b3a 	bleq	ec2da8 <_Min_Stack_Size+0xec29a8>
  bc:	00001301 	andeq	r1, r0, r1, lsl #6
  c0:	03000d11 	movweq	r0, #3345	; 0xd11
  c4:	3b0b3a0e 	blcc	2ce904 <_Min_Stack_Size+0x2ce504>
  c8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  cc:	1200000b 	andne	r0, r0, #11
  d0:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
  d4:	0b3a0e03 	bleq	e838e8 <_Min_Stack_Size+0xe834e8>
  d8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
  dc:	00000b20 	andeq	r0, r0, r0, lsr #22
  e0:	3f012e13 	svccc	0x00012e13
  e4:	3a0e0319 	bcc	380d50 <_Min_Stack_Size+0x380950>
  e8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
  ec:	010b2019 	tsteq	fp, r9, lsl r0
  f0:	14000013 	strne	r0, [r0], #-19
  f4:	08030005 	stmdaeq	r3, {r0, r2}
  f8:	0b3b0b3a 	bleq	ec2de8 <_Min_Stack_Size+0xec29e8>
  fc:	00001349 	andeq	r1, r0, r9, asr #6
 100:	0b000f15 	bleq	3d5c <_Min_Stack_Size+0x395c>
 104:	0013490b 	andseq	r4, r3, fp, lsl #18
 108:	012e1600 	teqeq	lr, r0, lsl #12
 10c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 110:	0b3b0b3a 	bleq	ec2e00 <_Min_Stack_Size+0xec2a00>
 114:	01111927 	tsteq	r1, r7, lsr #18
 118:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 11c:	01194297 			; <UNDEFINED> instruction: 0x01194297
 120:	17000013 	smladne	r0, r3, r0, r0
 124:	01018289 	smlabbeq	r1, r9, r2, r8
 128:	13310111 	teqne	r1, #1073741828	; 0x40000004
 12c:	00001301 	andeq	r1, r0, r1, lsl #6
 130:	01828a18 	orreq	r8, r2, r8, lsl sl
 134:	91180200 	tstls	r8, r0, lsl #4
 138:	00001842 	andeq	r1, r0, r2, asr #16
 13c:	01828919 	orreq	r8, r2, r9, lsl r9
 140:	95011101 	strls	r1, [r1, #-257]	; 0x101
 144:	13311942 	teqne	r1, #1081344	; 0x108000
 148:	341a0000 	ldrcc	r0, [sl], #-0
 14c:	3a0e0300 	bcc	380d54 <_Min_Stack_Size+0x380954>
 150:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 154:	00180213 	andseq	r0, r8, r3, lsl r2
 158:	82891b00 	addhi	r1, r9, #0, 22
 15c:	01110101 	tsteq	r1, r1, lsl #2
 160:	00001331 	andeq	r1, r0, r1, lsr r3
 164:	31002e1c 	tstcc	r0, ip, lsl lr
 168:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 16c:	97184006 	ldrls	r4, [r8, -r6]
 170:	00001942 	andeq	r1, r0, r2, asr #18
 174:	31012e1d 	tstcc	r1, sp, lsl lr
 178:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 17c:	97184006 	ldrls	r4, [r8, -r6]
 180:	13011942 	movwne	r1, #6466	; 0x1942
 184:	051e0000 	ldreq	r0, [lr, #-0]
 188:	02133100 	andseq	r3, r3, #0, 2
 18c:	1f000017 	svcne	0x00000017
 190:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 194:	0b3a0e03 	bleq	e839a8 <_Min_Stack_Size+0xe835a8>
 198:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 19c:	01111349 	tsteq	r1, r9, asr #6
 1a0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1a4:	01194297 			; <UNDEFINED> instruction: 0x01194297
 1a8:	20000013 	andcs	r0, r0, r3, lsl r0
 1ac:	1331011d 	teqne	r1, #1073741831	; 0x40000007
 1b0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1b4:	0b590b58 	bleq	1642f1c <_Min_Stack_Size+0x1642b1c>
 1b8:	00001301 	andeq	r1, r0, r1, lsl #6
 1bc:	31001d21 	tstcc	r0, r1, lsr #26
 1c0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 1c4:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
 1c8:	2200000b 	andcs	r0, r0, #11
 1cc:	00018289 	andeq	r8, r1, r9, lsl #5
 1d0:	13310111 	teqne	r1, #1073741828	; 0x40000004
 1d4:	34230000 	strtcc	r0, [r3], #-0
 1d8:	3a0e0300 	bcc	380de0 <_Min_Stack_Size+0x3809e0>
 1dc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 1e0:	3c193f13 	ldccc	15, cr3, [r9], {19}
 1e4:	24000019 	strcs	r0, [r0], #-25
 1e8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 1ec:	0b3a0e03 	bleq	e83a00 <_Min_Stack_Size+0xe83600>
 1f0:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 1f4:	1301193c 	movwne	r1, #6460	; 0x193c
 1f8:	05250000 	streq	r0, [r5, #-0]!
 1fc:	00134900 	andseq	r4, r3, r0, lsl #18
 200:	012e2600 	teqeq	lr, r0, lsl #12
 204:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 208:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
 20c:	13491927 	movtne	r1, #39207	; 0x9927
 210:	1301193c 	movwne	r1, #6460	; 0x193c
 214:	2e270000 	cdpcs	0, 2, cr0, cr7, cr0, {0}
 218:	03193f01 	tsteq	r9, #1, 30
 21c:	3b0b3a0e 	blcc	2cea5c <_Min_Stack_Size+0x2ce65c>
 220:	3c192705 	ldccc	7, cr2, [r9], {5}
 224:	00000019 	andeq	r0, r0, r9, lsl r0
 228:	25011101 	strcs	r1, [r1, #-257]	; 0x101
 22c:	030b130e 	movweq	r1, #45838	; 0xb30e
 230:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
 234:	10011117 	andne	r1, r1, r7, lsl r1
 238:	02000017 	andeq	r0, r0, #23
 23c:	0b0b0024 	bleq	2c02d4 <_Min_Stack_Size+0x2bfed4>
 240:	0e030b3e 	vmoveq.16	d3[0], r0
 244:	16030000 	strne	r0, [r3], -r0
 248:	3a0e0300 	bcc	380e50 <_Min_Stack_Size+0x380a50>
 24c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 250:	04000013 	streq	r0, [r0], #-19
 254:	0b0b0024 	bleq	2c02ec <_Min_Stack_Size+0x2bfeec>
 258:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 25c:	35050000 	strcc	r0, [r5, #-0]
 260:	00134900 	andseq	r4, r3, r0, lsl #18
 264:	002e0600 	eoreq	r0, lr, r0, lsl #12
 268:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 26c:	0b3b0b3a 	bleq	ec2f5c <_Min_Stack_Size+0xec2b5c>
 270:	01111927 	tsteq	r1, r7, lsr #18
 274:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 278:	00194297 	mulseq	r9, r7, r2
 27c:	00340700 	eorseq	r0, r4, r0, lsl #14
 280:	0b3a0e03 	bleq	e83a94 <_Min_Stack_Size+0xe83694>
 284:	1349053b 	movtne	r0, #38203	; 0x953b
 288:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 28c:	01000000 	mrseq	r0, (UNDEF: 0)
 290:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 294:	0e030b13 	vmoveq.32	d3[0], r0
 298:	17550e1b 	smmlane	r5, fp, lr, r0
 29c:	17100111 			; <UNDEFINED> instruction: 0x17100111
 2a0:	24020000 	strcs	r0, [r2], #-0
 2a4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 2a8:	000e030b 	andeq	r0, lr, fp, lsl #6
 2ac:	00160300 	andseq	r0, r6, r0, lsl #6
 2b0:	0b3a0e03 	bleq	e83ac4 <_Min_Stack_Size+0xe836c4>
 2b4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 2b8:	24040000 	strcs	r0, [r4], #-0
 2bc:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 2c0:	0008030b 	andeq	r0, r8, fp, lsl #6
 2c4:	00350500 	eorseq	r0, r5, r0, lsl #10
 2c8:	00001349 	andeq	r1, r0, r9, asr #6
 2cc:	0b011306 	bleq	44eec <_Min_Stack_Size+0x44aec>
 2d0:	3b0b3a0b 	blcc	2ceb04 <_Min_Stack_Size+0x2ce704>
 2d4:	00130105 	andseq	r0, r3, r5, lsl #2
 2d8:	000d0700 	andeq	r0, sp, r0, lsl #14
 2dc:	0b3a0e03 	bleq	e83af0 <_Min_Stack_Size+0xe836f0>
 2e0:	1349053b 	movtne	r0, #38203	; 0x953b
 2e4:	00000b38 	andeq	r0, r0, r8, lsr fp
 2e8:	03000d08 	movweq	r0, #3336	; 0xd08
 2ec:	3b0b3a08 	blcc	2ceb14 <_Min_Stack_Size+0x2ce714>
 2f0:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
 2f4:	0900000b 	stmdbeq	r0, {r0, r1, r3}
 2f8:	13490026 	movtne	r0, #36902	; 0x9026
 2fc:	010a0000 	mrseq	r0, (UNDEF: 10)
 300:	01134901 	tsteq	r3, r1, lsl #18
 304:	0b000013 	bleq	358 <_Min_Heap_Size+0x358>
 308:	13490021 	movtne	r0, #36897	; 0x9021
 30c:	00000b2f 	andeq	r0, r0, pc, lsr #22
 310:	0300160c 	movweq	r1, #1548	; 0x60c
 314:	3b0b3a0e 	blcc	2ceb54 <_Min_Stack_Size+0x2ce754>
 318:	00134905 	andseq	r4, r3, r5, lsl #18
 31c:	01040d00 	tsteq	r4, r0, lsl #26
 320:	0b3a0b0b 	bleq	e82f54 <_Min_Stack_Size+0xe82b54>
 324:	1301053b 	movwne	r0, #5435	; 0x153b
 328:	280e0000 	stmdacs	lr, {}	; <UNPREDICTABLE>
 32c:	1c0e0300 	stcne	3, cr0, [lr], {-0}
 330:	0f00000d 	svceq	0x0000000d
 334:	08030028 	stmdaeq	r3, {r3, r5}
 338:	00000d1c 	andeq	r0, r0, ip, lsl sp
 33c:	03012e10 	movweq	r2, #7696	; 0x1e10
 340:	3b0b3a0e 	blcc	2ceb80 <_Min_Stack_Size+0x2ce780>
 344:	20192705 	andscs	r2, r9, r5, lsl #14
 348:	0013010b 	andseq	r0, r3, fp, lsl #2
 34c:	00341100 	eorseq	r1, r4, r0, lsl #2
 350:	0b3a0e03 	bleq	e83b64 <_Min_Stack_Size+0xe83764>
 354:	1349053b 	movtne	r0, #38203	; 0x953b
 358:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
 35c:	03193f01 	tsteq	r9, #1, 30
 360:	3b0b3a0e 	blcc	2ceba0 <_Min_Stack_Size+0x2ce7a0>
 364:	1119270b 	tstne	r9, fp, lsl #14
 368:	40061201 	andmi	r1, r6, r1, lsl #4
 36c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 370:	00001301 	andeq	r1, r0, r1, lsl #6
 374:	31011d13 	tstcc	r1, r3, lsl sp
 378:	55015213 	strpl	r5, [r1, #-531]	; 0x213
 37c:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
 380:	1400000b 	strne	r0, [r0], #-11
 384:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
 388:	34150000 	ldrcc	r0, [r5], #-0
 38c:	02133100 	andseq	r3, r3, #0, 2
 390:	16000018 			; <UNDEFINED> instruction: 0x16000018
 394:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 398:	0b3a0e03 	bleq	e83bac <_Min_Stack_Size+0xe837ac>
 39c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 3a0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 3a4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 3a8:	00130119 	andseq	r0, r3, r9, lsl r1
 3ac:	00341700 	eorseq	r1, r4, r0, lsl #14
 3b0:	0b3a0803 	bleq	e823c4 <_Min_Stack_Size+0xe81fc4>
 3b4:	1349053b 	movtne	r0, #38203	; 0x953b
 3b8:	00001702 	andeq	r1, r0, r2, lsl #14
 3bc:	03003418 	movweq	r3, #1048	; 0x418
 3c0:	3b0b3a0e 	blcc	2cec00 <_Min_Stack_Size+0x2ce800>
 3c4:	02134905 	andseq	r4, r3, #81920	; 0x14000
 3c8:	19000017 	stmdbne	r0, {r0, r1, r2, r4}
 3cc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 3d0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
 3d4:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 3d8:	0000193c 	andeq	r1, r0, ip, lsr r9
 3dc:	0300341a 	movweq	r3, #1050	; 0x41a
 3e0:	3b0b3a0e 	blcc	2cec20 <_Min_Stack_Size+0x2ce820>
 3e4:	3f13490b 	svccc	0x0013490b
 3e8:	00180219 	andseq	r0, r8, r9, lsl r2
 3ec:	11010000 	mrsne	r0, (UNDEF: 1)
 3f0:	55061000 	strpl	r1, [r6, #-0]
 3f4:	1b080306 	blne	201014 <_Min_Stack_Size+0x200c14>
 3f8:	13082508 	movwne	r2, #34056	; 0x8508
 3fc:	00000005 	andeq	r0, r0, r5
 400:	25011101 	strcs	r1, [r1, #-257]	; 0x101
 404:	030b130e 	movweq	r1, #45838	; 0xb30e
 408:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
 40c:	10011117 	andne	r1, r1, r7, lsl r1
 410:	02000017 	andeq	r0, r0, #23
 414:	0b0b0024 	bleq	2c04ac <_Min_Stack_Size+0x2c00ac>
 418:	0e030b3e 	vmoveq.16	d3[0], r0
 41c:	16030000 	strne	r0, [r3], -r0
 420:	3a0e0300 	bcc	381028 <_Min_Stack_Size+0x380c28>
 424:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 428:	04000013 	streq	r0, [r0], #-19
 42c:	0b0b0024 	bleq	2c04c4 <_Min_Stack_Size+0x2c00c4>
 430:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 434:	13050000 	movwne	r0, #20480	; 0x5000
 438:	3a050b01 	bcc	143044 <_Min_Stack_Size+0x142c44>
 43c:	01053b0b 	tsteq	r5, fp, lsl #22
 440:	06000013 			; <UNDEFINED> instruction: 0x06000013
 444:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 448:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
 44c:	0b381349 	bleq	e05178 <_Min_Stack_Size+0xe04d78>
 450:	0d070000 	stceq	0, cr0, [r7, #-0]
 454:	3a0e0300 	bcc	38105c <_Min_Stack_Size+0x380c5c>
 458:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 45c:	00053813 	andeq	r3, r5, r3, lsl r8
 460:	000d0800 	andeq	r0, sp, r0, lsl #16
 464:	0b3a0803 	bleq	e82478 <_Min_Stack_Size+0xe82078>
 468:	1349053b 	movtne	r0, #38203	; 0x953b
 46c:	00000538 	andeq	r0, r0, r8, lsr r5
 470:	49010109 	stmdbmi	r1, {r0, r3, r8}
 474:	00130113 	andseq	r0, r3, r3, lsl r1
 478:	00210a00 	eoreq	r0, r1, r0, lsl #20
 47c:	0b2f1349 	bleq	bc51a8 <_Min_Stack_Size+0xbc4da8>
 480:	350b0000 	strcc	r0, [fp, #-0]
 484:	00134900 	andseq	r4, r3, r0, lsl #18
 488:	00210c00 	eoreq	r0, r1, r0, lsl #24
 48c:	052f1349 	streq	r1, [pc, #-841]!	; 14b <_Min_Heap_Size+0x14b>
 490:	160d0000 	strne	r0, [sp], -r0
 494:	3a0e0300 	bcc	38109c <_Min_Stack_Size+0x380c9c>
 498:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 49c:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
 4a0:	0b0b0113 	bleq	2c08f4 <_Min_Stack_Size+0x2c04f4>
 4a4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
 4a8:	00001301 	andeq	r1, r0, r1, lsl #6
 4ac:	03000d0f 	movweq	r0, #3343	; 0xd0f
 4b0:	3b0b3a08 	blcc	2cecd8 <_Min_Stack_Size+0x2ce8d8>
 4b4:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
 4b8:	1000000b 	andne	r0, r0, fp
 4bc:	13490026 	movtne	r0, #36902	; 0x9026
 4c0:	04110000 	ldreq	r0, [r1], #-0
 4c4:	3a0b0b01 	bcc	2c30d0 <_Min_Stack_Size+0x2c2cd0>
 4c8:	01053b0b 	tsteq	r5, fp, lsl #22
 4cc:	12000013 	andne	r0, r0, #19
 4d0:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
 4d4:	00000d1c 	andeq	r0, r0, ip, lsl sp
 4d8:	0b011313 	bleq	4512c <_Min_Stack_Size+0x44d2c>
 4dc:	3b0b3a0b 	blcc	2ced10 <_Min_Stack_Size+0x2ce910>
 4e0:	0013010b 	andseq	r0, r3, fp, lsl #2
 4e4:	000d1400 	andeq	r1, sp, r0, lsl #8
 4e8:	0b3a0e03 	bleq	e83cfc <_Min_Stack_Size+0xe838fc>
 4ec:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 4f0:	00000b38 	andeq	r0, r0, r8, lsr fp
 4f4:	3f012e15 	svccc	0x00012e15
 4f8:	3a0e0319 	bcc	381164 <_Min_Stack_Size+0x380d64>
 4fc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 500:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 504:	97184006 	ldrls	r4, [r8, -r6]
 508:	13011942 	movwne	r1, #6466	; 0x1942
 50c:	05160000 	ldreq	r0, [r6, #-0]
 510:	3a0e0300 	bcc	381118 <_Min_Stack_Size+0x380d18>
 514:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 518:	00170213 	andseq	r0, r7, r3, lsl r2
 51c:	00341700 	eorseq	r1, r4, r0, lsl #14
 520:	0b3a0e03 	bleq	e83d34 <_Min_Stack_Size+0xe83934>
 524:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 528:	00001702 	andeq	r1, r0, r2, lsl #14
 52c:	0b000f18 	bleq	4194 <_Min_Stack_Size+0x3d94>
 530:	0013490b 	andseq	r4, r3, fp, lsl #18
 534:	00051900 	andeq	r1, r5, r0, lsl #18
 538:	0b3a0e03 	bleq	e83d4c <_Min_Stack_Size+0xe8394c>
 53c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 540:	00001802 	andeq	r1, r0, r2, lsl #16
 544:	0300341a 	movweq	r3, #1050	; 0x41a
 548:	3b0b3a0e 	blcc	2ced88 <_Min_Stack_Size+0x2ce988>
 54c:	3f134905 	svccc	0x00134905
 550:	00193c19 	andseq	r3, r9, r9, lsl ip
 554:	11010000 	mrsne	r0, (UNDEF: 1)
 558:	130e2501 	movwne	r2, #58625	; 0xe501
 55c:	1b0e030b 	blne	381190 <_Min_Stack_Size+0x380d90>
 560:	1117550e 	tstne	r7, lr, lsl #10
 564:	00171001 	andseq	r1, r7, r1
 568:	00240200 	eoreq	r0, r4, r0, lsl #4
 56c:	0b3e0b0b 	bleq	f831a0 <_Min_Stack_Size+0xf82da0>
 570:	00000e03 	andeq	r0, r0, r3, lsl #28
 574:	03001603 	movweq	r1, #1539	; 0x603
 578:	3b0b3a0e 	blcc	2cedb8 <_Min_Stack_Size+0x2ce9b8>
 57c:	0013490b 	andseq	r4, r3, fp, lsl #18
 580:	00240400 	eoreq	r0, r4, r0, lsl #8
 584:	0b3e0b0b 	bleq	f831b8 <_Min_Stack_Size+0xf82db8>
 588:	00000803 	andeq	r0, r0, r3, lsl #16
 58c:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
 590:	06000013 			; <UNDEFINED> instruction: 0x06000013
 594:	13490101 	movtne	r0, #37121	; 0x9101
 598:	00001301 	andeq	r1, r0, r1, lsl #6
 59c:	49002107 	stmdbmi	r0, {r0, r1, r2, r8, sp}
 5a0:	000b2f13 	andeq	r2, fp, r3, lsl pc
 5a4:	01040800 	tsteq	r4, r0, lsl #16
 5a8:	0b3a0b0b 	bleq	e831dc <_Min_Stack_Size+0xe82ddc>
 5ac:	1301053b 	movwne	r0, #5435	; 0x153b
 5b0:	28090000 	stmdacs	r9, {}	; <UNPREDICTABLE>
 5b4:	1c0e0300 	stcne	3, cr0, [lr], {-0}
 5b8:	0a00000d 	beq	5f4 <_Min_Stack_Size+0x1f4>
 5bc:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 5c0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
 5c4:	00001349 	andeq	r1, r0, r9, asr #6
 5c8:	0b01130b 	bleq	451fc <_Min_Stack_Size+0x44dfc>
 5cc:	3b0b3a0b 	blcc	2cee00 <_Min_Stack_Size+0x2cea00>
 5d0:	00130105 	andseq	r0, r3, r5, lsl #2
 5d4:	000d0c00 	andeq	r0, sp, r0, lsl #24
 5d8:	0b3a0e03 	bleq	e83dec <_Min_Stack_Size+0xe839ec>
 5dc:	1349053b 	movtne	r0, #38203	; 0x953b
 5e0:	00000b38 	andeq	r0, r0, r8, lsr fp
 5e4:	03000d0d 	movweq	r0, #3341	; 0xd0d
 5e8:	3b0b3a08 	blcc	2cee10 <_Min_Stack_Size+0x2cea10>
 5ec:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
 5f0:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
 5f4:	0b0b0104 	bleq	2c0a0c <_Min_Stack_Size+0x2c060c>
 5f8:	0b3b0b3a 	bleq	ec32e8 <_Min_Stack_Size+0xec2ee8>
 5fc:	00001301 	andeq	r1, r0, r1, lsl #6
 600:	0b01130f 	bleq	45244 <_Min_Stack_Size+0x44e44>
 604:	3b0b3a0b 	blcc	2cee38 <_Min_Stack_Size+0x2cea38>
 608:	0013010b 	andseq	r0, r3, fp, lsl #2
 60c:	000d1000 	andeq	r1, sp, r0
 610:	0b3a0e03 	bleq	e83e24 <_Min_Stack_Size+0xe83a24>
 614:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 618:	00000b38 	andeq	r0, r0, r8, lsr fp
 61c:	3f012e11 	svccc	0x00012e11
 620:	3a0e0319 	bcc	38128c <_Min_Stack_Size+0x380e8c>
 624:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 628:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 62c:	97184006 	ldrls	r4, [r8, -r6]
 630:	13011942 	movwne	r1, #6466	; 0x1942
 634:	05120000 	ldreq	r0, [r2, #-0]
 638:	3a0e0300 	bcc	381240 <_Min_Stack_Size+0x380e40>
 63c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 640:	00170213 	andseq	r0, r7, r3, lsl r2
 644:	82891300 	addhi	r1, r9, #0, 6
 648:	01110101 	tsteq	r1, r1, lsl #2
 64c:	13011331 	movwne	r1, #4913	; 0x1331
 650:	8a140000 	bhi	500658 <_Min_Stack_Size+0x500258>
 654:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
 658:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
 65c:	89150000 	ldmdbhi	r5, {}	; <UNPREDICTABLE>
 660:	11010182 	smlabbne	r1, r2, r1, r0
 664:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
 668:	13011331 	movwne	r1, #4913	; 0x1331
 66c:	89160000 	ldmdbhi	r6, {}	; <UNPREDICTABLE>
 670:	11010182 	smlabbne	r1, r2, r1, r0
 674:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
 678:	00001331 	andeq	r1, r0, r1, lsr r3
 67c:	0b000f17 	bleq	42e0 <_Min_Stack_Size+0x3ee0>
 680:	0013490b 	andseq	r4, r3, fp, lsl #18
 684:	00051800 	andeq	r1, r5, r0, lsl #16
 688:	0b3a0e03 	bleq	e83e9c <_Min_Stack_Size+0xe83a9c>
 68c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 690:	00001802 	andeq	r1, r0, r2, lsl #16
 694:	03003419 	movweq	r3, #1049	; 0x419
 698:	3b0b3a0e 	blcc	2ceed8 <_Min_Stack_Size+0x2cead8>
 69c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 6a0:	1a000017 	bne	704 <_Min_Stack_Size+0x304>
 6a4:	08030034 	stmdaeq	r3, {r2, r4, r5}
 6a8:	0b3b0b3a 	bleq	ec3398 <_Min_Stack_Size+0xec2f98>
 6ac:	17021349 	strne	r1, [r2, -r9, asr #6]
 6b0:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
 6b4:	03193f01 	tsteq	r9, #1, 30
 6b8:	3b0b3a0e 	blcc	2ceef8 <_Min_Stack_Size+0x2ceaf8>
 6bc:	11192705 	tstne	r9, r5, lsl #14
 6c0:	40061201 	andmi	r1, r6, r1, lsl #4
 6c4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 6c8:	00001301 	andeq	r1, r0, r1, lsl #6
 6cc:	0300051c 	movweq	r0, #1308	; 0x51c
 6d0:	3b0b3a0e 	blcc	2cef10 <_Min_Stack_Size+0x2ceb10>
 6d4:	02134905 	andseq	r4, r3, #81920	; 0x14000
 6d8:	1d000018 	stcne	0, cr0, [r0, #-96]	; 0xffffffa0
 6dc:	08030034 	stmdaeq	r3, {r2, r4, r5}
 6e0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
 6e4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 6e8:	2e1e0000 	cdpcs	0, 1, cr0, cr14, cr0, {0}
 6ec:	03193f01 	tsteq	r9, #1, 30
 6f0:	3b0b3a0e 	blcc	2cef30 <_Min_Stack_Size+0x2ceb30>
 6f4:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
 6f8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 6fc:	97184006 	ldrls	r4, [r8, -r6]
 700:	13011942 	movwne	r1, #6466	; 0x1942
 704:	051f0000 	ldreq	r0, [pc, #-0]	; 70c <_Min_Stack_Size+0x30c>
 708:	3a0e0300 	bcc	381310 <_Min_Stack_Size+0x380f10>
 70c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 710:	00170213 	andseq	r0, r7, r3, lsl r2
 714:	00342000 	eorseq	r2, r4, r0
 718:	0b3a0e03 	bleq	e83f2c <_Min_Stack_Size+0xe83b2c>
 71c:	1349053b 	movtne	r0, #38203	; 0x953b
 720:	00001702 	andeq	r1, r0, r2, lsl #14
 724:	03003421 	movweq	r3, #1057	; 0x421
 728:	3b0b3a0e 	blcc	2cef68 <_Min_Stack_Size+0x2ceb68>
 72c:	3f134905 	svccc	0x00134905
 730:	00193c19 	andseq	r3, r9, r9, lsl ip
 734:	012e2200 	teqeq	lr, r0, lsl #4
 738:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 73c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
 740:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
 744:	05230000 	streq	r0, [r3, #-0]!
 748:	00134900 	andseq	r4, r3, r0, lsl #18
 74c:	11010000 	mrsne	r0, (UNDEF: 1)
 750:	130e2501 	movwne	r2, #58625	; 0xe501
 754:	1b0e030b 	blne	381388 <_Min_Stack_Size+0x380f88>
 758:	1117550e 	tstne	r7, lr, lsl #10
 75c:	00171001 	andseq	r1, r7, r1
 760:	00240200 	eoreq	r0, r4, r0, lsl #4
 764:	0b3e0b0b 	bleq	f83398 <_Min_Stack_Size+0xf82f98>
 768:	00000e03 	andeq	r0, r0, r3, lsl #28
 76c:	03001603 	movweq	r1, #1539	; 0x603
 770:	3b0b3a0e 	blcc	2cefb0 <_Min_Stack_Size+0x2cebb0>
 774:	0013490b 	andseq	r4, r3, fp, lsl #18
 778:	00240400 	eoreq	r0, r4, r0, lsl #8
 77c:	0b3e0b0b 	bleq	f833b0 <_Min_Stack_Size+0xf82fb0>
 780:	00000803 	andeq	r0, r0, r3, lsl #16
 784:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
 788:	06000013 			; <UNDEFINED> instruction: 0x06000013
 78c:	13490101 	movtne	r0, #37121	; 0x9101
 790:	00001301 	andeq	r1, r0, r1, lsl #6
 794:	49002107 	stmdbmi	r0, {r0, r1, r2, r8, sp}
 798:	000b2f13 	andeq	r2, fp, r3, lsl pc
 79c:	01040800 	tsteq	r4, r0, lsl #16
 7a0:	0b3a0b0b 	bleq	e833d4 <_Min_Stack_Size+0xe82fd4>
 7a4:	1301053b 	movwne	r0, #5435	; 0x153b
 7a8:	28090000 	stmdacs	r9, {}	; <UNPREDICTABLE>
 7ac:	1c0e0300 	stcne	3, cr0, [lr], {-0}
 7b0:	0a00000d 	beq	7ec <_Min_Stack_Size+0x3ec>
 7b4:	08030028 	stmdaeq	r3, {r3, r5}
 7b8:	00000d1c 	andeq	r0, r0, ip, lsl sp
 7bc:	0300160b 	movweq	r1, #1547	; 0x60b
 7c0:	3b0b3a0e 	blcc	2cf000 <_Min_Stack_Size+0x2cec00>
 7c4:	00134905 	andseq	r4, r3, r5, lsl #18
 7c8:	01130c00 	tsteq	r3, r0, lsl #24
 7cc:	0b3a0b0b 	bleq	e83400 <_Min_Stack_Size+0xe83000>
 7d0:	1301053b 	movwne	r0, #5435	; 0x153b
 7d4:	0d0d0000 	stceq	0, cr0, [sp, #-0]
 7d8:	3a080300 	bcc	2013e0 <_Min_Stack_Size+0x200fe0>
 7dc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 7e0:	000b3813 	andeq	r3, fp, r3, lsl r8
 7e4:	000d0e00 	andeq	r0, sp, r0, lsl #28
 7e8:	0b3a0e03 	bleq	e83ffc <_Min_Stack_Size+0xe83bfc>
 7ec:	1349053b 	movtne	r0, #38203	; 0x953b
 7f0:	00000b38 	andeq	r0, r0, r8, lsr fp
 7f4:	0b01130f 	bleq	45438 <_Min_Stack_Size+0x45038>
 7f8:	3b0b3a0b 	blcc	2cf02c <_Min_Stack_Size+0x2cec2c>
 7fc:	0013010b 	andseq	r0, r3, fp, lsl #2
 800:	000d1000 	andeq	r1, sp, r0
 804:	0b3a0e03 	bleq	e84018 <_Min_Stack_Size+0xe83c18>
 808:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 80c:	00000b38 	andeq	r0, r0, r8, lsr fp
 810:	3f012e11 	svccc	0x00012e11
 814:	3a0e0319 	bcc	381480 <_Min_Stack_Size+0x381080>
 818:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 81c:	20134919 	andscs	r4, r3, r9, lsl r9
 820:	0013010b 	andseq	r0, r3, fp, lsl #2
 824:	00051200 	andeq	r1, r5, r0, lsl #4
 828:	0b3a0e03 	bleq	e8403c <_Min_Stack_Size+0xe83c3c>
 82c:	1349053b 	movtne	r0, #38203	; 0x953b
 830:	34130000 	ldrcc	r0, [r3], #-0
 834:	3a080300 	bcc	20143c <_Min_Stack_Size+0x20103c>
 838:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 83c:	14000013 	strne	r0, [r0], #-19
 840:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 844:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
 848:	00001349 	andeq	r1, r0, r9, asr #6
 84c:	3f002e15 	svccc	0x00002e15
 850:	3a0e0319 	bcc	3814bc <_Min_Stack_Size+0x3810bc>
 854:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 858:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 85c:	97184006 	ldrls	r4, [r8, -r6]
 860:	00001942 	andeq	r1, r0, r2, asr #18
 864:	3f012e16 	svccc	0x00012e16
 868:	3a0e0319 	bcc	3814d4 <_Min_Stack_Size+0x3810d4>
 86c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 870:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 874:	97184006 	ldrls	r4, [r8, -r6]
 878:	13011942 	movwne	r1, #6466	; 0x1942
 87c:	05170000 	ldreq	r0, [r7, #-0]
 880:	3a0e0300 	bcc	381488 <_Min_Stack_Size+0x381088>
 884:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 888:	00180213 	andseq	r0, r8, r3, lsl r2
 88c:	012e1800 	teqeq	lr, r0, lsl #16
 890:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 894:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
 898:	13491927 	movtne	r1, #39207	; 0x9927
 89c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 8a0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 8a4:	00130119 	andseq	r0, r3, r9, lsl r1
 8a8:	00341900 	eorseq	r1, r4, r0, lsl #18
 8ac:	0b3a0e03 	bleq	e840c0 <_Min_Stack_Size+0xe83cc0>
 8b0:	1349053b 	movtne	r0, #38203	; 0x953b
 8b4:	00001802 	andeq	r1, r0, r2, lsl #16
 8b8:	0300341a 	movweq	r3, #1050	; 0x41a
 8bc:	3b0b3a0e 	blcc	2cf0fc <_Min_Stack_Size+0x2cecfc>
 8c0:	02134905 	andseq	r4, r3, #81920	; 0x14000
 8c4:	1b000017 	blne	928 <_Min_Stack_Size+0x528>
 8c8:	1331011d 	teqne	r1, #1073741831	; 0x40000007
 8cc:	17550152 			; <UNDEFINED> instruction: 0x17550152
 8d0:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xb58
 8d4:	00001301 	andeq	r1, r0, r1, lsl #6
 8d8:	3100051c 	tstcc	r0, ip, lsl r5
 8dc:	000b1c13 	andeq	r1, fp, r3, lsl ip
 8e0:	010b1d00 	tsteq	fp, r0, lsl #26
 8e4:	00001755 	andeq	r1, r0, r5, asr r7
 8e8:	3100341e 	tstcc	r0, lr, lsl r4
 8ec:	00170213 	andseq	r0, r7, r3, lsl r2
 8f0:	011d1f00 	tsteq	sp, r0, lsl #30
 8f4:	01111331 	tsteq	r1, r1, lsr r3
 8f8:	0b580612 	bleq	1602148 <_Min_Stack_Size+0x1601d48>
 8fc:	00000559 	andeq	r0, r0, r9, asr r5
 900:	31000520 	tstcc	r0, r0, lsr #10
 904:	00170213 	andseq	r0, r7, r3, lsl r2
 908:	010b2100 	mrseq	r2, (UNDEF: 27)
 90c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 910:	05220000 	streq	r0, [r2, #-0]!
 914:	3a0e0300 	bcc	38151c <_Min_Stack_Size+0x38111c>
 918:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 91c:	00170213 	andseq	r0, r7, r3, lsl r2
 920:	002e2300 	eoreq	r2, lr, r0, lsl #6
 924:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 928:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
 92c:	13491927 	movtne	r1, #39207	; 0x9927
 930:	06120111 			; <UNDEFINED> instruction: 0x06120111
 934:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 938:	24000019 	strcs	r0, [r0], #-25
 93c:	08030034 	stmdaeq	r3, {r2, r4, r5}
 940:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
 944:	17021349 	strne	r1, [r2, -r9, asr #6]
 948:	0f250000 	svceq	0x00250000
 94c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 950:	26000013 			; <UNDEFINED> instruction: 0x26000013
 954:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
 958:	06120111 			; <UNDEFINED> instruction: 0x06120111
 95c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 960:	00130119 	andseq	r0, r3, r9, lsl r1
 964:	002e2700 	eoreq	r2, lr, r0, lsl #14
 968:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 96c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
 970:	01111927 	tsteq	r1, r7, lsr #18
 974:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 978:	00194297 	mulseq	r9, r7, r2
 97c:	00342800 	eorseq	r2, r4, r0, lsl #16
 980:	0b3a0e03 	bleq	e84194 <_Min_Stack_Size+0xe83d94>
 984:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 988:	00001802 	andeq	r1, r0, r2, lsl #16
 98c:	49002629 	stmdbmi	r0, {r0, r3, r5, r9, sl, sp}
 990:	2a000013 	bcs	9e4 <_Min_Stack_Size+0x5e4>
 994:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 998:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
 99c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 9a0:	0000193c 	andeq	r1, r0, ip, lsr r9
 9a4:	01110100 	tsteq	r1, r0, lsl #2
 9a8:	0b130e25 	bleq	4c4244 <_Min_Stack_Size+0x4c3e44>
 9ac:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 9b0:	01111755 	tsteq	r1, r5, asr r7
 9b4:	00001710 	andeq	r1, r0, r0, lsl r7
 9b8:	0b002402 	bleq	99c8 <_Min_Stack_Size+0x95c8>
 9bc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 9c0:	0300000e 	movweq	r0, #14
 9c4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 9c8:	0b3b0b3a 	bleq	ec36b8 <_Min_Stack_Size+0xec32b8>
 9cc:	00001349 	andeq	r1, r0, r9, asr #6
 9d0:	0b002404 	bleq	99e8 <_Min_Stack_Size+0x95e8>
 9d4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 9d8:	05000008 	streq	r0, [r0, #-8]
 9dc:	13490035 	movtne	r0, #36917	; 0x9035
 9e0:	04060000 	streq	r0, [r6], #-0
 9e4:	3a0b0b01 	bcc	2c35f0 <_Min_Stack_Size+0x2c31f0>
 9e8:	01053b0b 	tsteq	r5, fp, lsl #22
 9ec:	07000013 	smladeq	r0, r3, r0, r0
 9f0:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
 9f4:	00000d1c 	andeq	r0, r0, ip, lsl sp
 9f8:	03002808 	movweq	r2, #2056	; 0x808
 9fc:	000d1c08 	andeq	r1, sp, r8, lsl #24
 a00:	00160900 	andseq	r0, r6, r0, lsl #18
 a04:	0b3a0e03 	bleq	e84218 <_Min_Stack_Size+0xe83e18>
 a08:	1349053b 	movtne	r0, #38203	; 0x953b
 a0c:	130a0000 	movwne	r0, #40960	; 0xa000
 a10:	3a0b0b01 	bcc	2c361c <_Min_Stack_Size+0x2c321c>
 a14:	01053b0b 	tsteq	r5, fp, lsl #22
 a18:	0b000013 	bleq	a6c <_Min_Stack_Size+0x66c>
 a1c:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 a20:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
 a24:	0b381349 	bleq	e05750 <_Min_Stack_Size+0xe05350>
 a28:	0d0c0000 	stceq	0, cr0, [ip, #-0]
 a2c:	3a0e0300 	bcc	381634 <_Min_Stack_Size+0x381234>
 a30:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 a34:	000b3813 	andeq	r3, fp, r3, lsl r8
 a38:	01130d00 	tsteq	r3, r0, lsl #26
 a3c:	0b3a0b0b 	bleq	e83670 <_Min_Stack_Size+0xe83270>
 a40:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 a44:	0d0e0000 	stceq	0, cr0, [lr, #-0]
 a48:	3a0e0300 	bcc	381650 <_Min_Stack_Size+0x381250>
 a4c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 a50:	000b3813 	andeq	r3, fp, r3, lsl r8
 a54:	012e0f00 	teqeq	lr, r0, lsl #30
 a58:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
 a5c:	0b3b0b3a 	bleq	ec374c <_Min_Stack_Size+0xec334c>
 a60:	01111927 	tsteq	r1, r7, lsr #18
 a64:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 a68:	01194297 			; <UNDEFINED> instruction: 0x01194297
 a6c:	10000013 	andne	r0, r0, r3, lsl r0
 a70:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 a74:	0b3b0b3a 	bleq	ec3764 <_Min_Stack_Size+0xec3364>
 a78:	17021349 	strne	r1, [r2, -r9, asr #6]
 a7c:	89110000 	ldmdbhi	r1, {}	; <UNPREDICTABLE>
 a80:	11010182 	smlabbne	r1, r2, r1, r0
 a84:	01133101 	tsteq	r3, r1, lsl #2
 a88:	12000013 	andne	r0, r0, #19
 a8c:	0001828a 	andeq	r8, r1, sl, lsl #5
 a90:	42911802 	addsmi	r1, r1, #131072	; 0x20000
 a94:	13000018 	movwne	r0, #24
 a98:	01018289 	smlabbeq	r1, r9, r2, r8
 a9c:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
 aa0:	01133119 	tsteq	r3, r9, lsl r1
 aa4:	14000013 	strne	r0, [r0], #-19
 aa8:	01018289 	smlabbeq	r1, r9, r2, r8
 aac:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
 ab0:	00133119 	andseq	r3, r3, r9, lsl r1
 ab4:	000f1500 	andeq	r1, pc, r0, lsl #10
 ab8:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 abc:	34160000 	ldrcc	r0, [r6], #-0
 ac0:	3a0e0300 	bcc	3816c8 <_Min_Stack_Size+0x3812c8>
 ac4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 ac8:	00170213 	andseq	r0, r7, r3, lsl r2
 acc:	00341700 	eorseq	r1, r4, r0, lsl #14
 ad0:	0b3a0e03 	bleq	e842e4 <_Min_Stack_Size+0xe83ee4>
 ad4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 ad8:	00001802 	andeq	r1, r0, r2, lsl #16
 adc:	01828918 	orreq	r8, r2, r8, lsl r9
 ae0:	31011101 	tstcc	r1, r1, lsl #2
 ae4:	19000013 	stmdbne	r0, {r0, r1, r4}
 ae8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 aec:	0b3a0e03 	bleq	e84300 <_Min_Stack_Size+0xe83f00>
 af0:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 af4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 af8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 afc:	00130119 	andseq	r0, r3, r9, lsl r1
 b00:	00051a00 	andeq	r1, r5, r0, lsl #20
 b04:	0b3a0e03 	bleq	e84318 <_Min_Stack_Size+0xe83f18>
 b08:	1349053b 	movtne	r0, #38203	; 0x953b
 b0c:	00001802 	andeq	r1, r0, r2, lsl #16
 b10:	0300051b 	movweq	r0, #1307	; 0x51b
 b14:	3b0b3a0e 	blcc	2cf354 <_Min_Stack_Size+0x2cef54>
 b18:	02134905 	andseq	r4, r3, #81920	; 0x14000
 b1c:	1c000017 	stcne	0, cr0, [r0], {23}
 b20:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 b24:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
 b28:	17021349 	strne	r1, [r2, -r9, asr #6]
 b2c:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
 b30:	03193f01 	tsteq	r9, #1, 30
 b34:	3b0b3a0e 	blcc	2cf374 <_Min_Stack_Size+0x2cef74>
 b38:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
 b3c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 b40:	97184006 	ldrls	r4, [r8, -r6]
 b44:	13011942 	movwne	r1, #6466	; 0x1942
 b48:	341e0000 	ldrcc	r0, [lr], #-0
 b4c:	3a0e0300 	bcc	381754 <_Min_Stack_Size+0x381354>
 b50:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 b54:	00180213 	andseq	r0, r8, r3, lsl r2
 b58:	00341f00 	eorseq	r1, r4, r0, lsl #30
 b5c:	0b3a0e03 	bleq	e84370 <_Min_Stack_Size+0xe83f70>
 b60:	1349053b 	movtne	r0, #38203	; 0x953b
 b64:	34200000 	strtcc	r0, [r0], #-0
 b68:	3a0e0300 	bcc	381770 <_Min_Stack_Size+0x381370>
 b6c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 b70:	3c193f13 	ldccc	15, cr3, [r9], {19}
 b74:	21000019 	tstcs	r0, r9, lsl r0
 b78:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 b7c:	0b3a0e03 	bleq	e84390 <_Min_Stack_Size+0xe83f90>
 b80:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 b84:	1301193c 	movwne	r1, #6460	; 0x193c
 b88:	05220000 	streq	r0, [r2, #-0]!
 b8c:	00134900 	andseq	r4, r3, r0, lsl #18
 b90:	11010000 	mrsne	r0, (UNDEF: 1)
 b94:	130e2501 	movwne	r2, #58625	; 0xe501
 b98:	1b0e030b 	blne	3817cc <_Min_Stack_Size+0x3813cc>
 b9c:	1117550e 	tstne	r7, lr, lsl #10
 ba0:	00171001 	andseq	r1, r7, r1
 ba4:	00240200 	eoreq	r0, r4, r0, lsl #4
 ba8:	0b3e0b0b 	bleq	f837dc <_Min_Stack_Size+0xf833dc>
 bac:	00000e03 	andeq	r0, r0, r3, lsl #28
 bb0:	03001603 	movweq	r1, #1539	; 0x603
 bb4:	3b0b3a0e 	blcc	2cf3f4 <_Min_Stack_Size+0x2ceff4>
 bb8:	0013490b 	andseq	r4, r3, fp, lsl #18
 bbc:	00240400 	eoreq	r0, r4, r0, lsl #8
 bc0:	0b3e0b0b 	bleq	f837f4 <_Min_Stack_Size+0xf833f4>
 bc4:	00000803 	andeq	r0, r0, r3, lsl #16
 bc8:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
 bcc:	06000013 			; <UNDEFINED> instruction: 0x06000013
 bd0:	13490101 	movtne	r0, #37121	; 0x9101
 bd4:	00001301 	andeq	r1, r0, r1, lsl #6
 bd8:	49002107 	stmdbmi	r0, {r0, r1, r2, r8, sp}
 bdc:	000b2f13 	andeq	r2, fp, r3, lsl pc
 be0:	01040800 	tsteq	r4, r0, lsl #16
 be4:	0b3a0b0b 	bleq	e83818 <_Min_Stack_Size+0xe83418>
 be8:	1301053b 	movwne	r0, #5435	; 0x153b
 bec:	28090000 	stmdacs	r9, {}	; <UNPREDICTABLE>
 bf0:	1c0e0300 	stcne	3, cr0, [lr], {-0}
 bf4:	0a00000d 	beq	c30 <_Min_Stack_Size+0x830>
 bf8:	08030028 	stmdaeq	r3, {r3, r5}
 bfc:	00000d1c 	andeq	r0, r0, ip, lsl sp
 c00:	0300160b 	movweq	r1, #1547	; 0x60b
 c04:	3b0b3a0e 	blcc	2cf444 <_Min_Stack_Size+0x2cf044>
 c08:	00134905 	andseq	r4, r3, r5, lsl #18
 c0c:	01130c00 	tsteq	r3, r0, lsl #24
 c10:	0b3a0b0b 	bleq	e83844 <_Min_Stack_Size+0xe83444>
 c14:	1301053b 	movwne	r0, #5435	; 0x153b
 c18:	0d0d0000 	stceq	0, cr0, [sp, #-0]
 c1c:	3a0e0300 	bcc	381824 <_Min_Stack_Size+0x381424>
 c20:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 c24:	000b3813 	andeq	r3, fp, r3, lsl r8
 c28:	000d0e00 	andeq	r0, sp, r0, lsl #28
 c2c:	0b3a0803 	bleq	e82c40 <_Min_Stack_Size+0xe82840>
 c30:	1349053b 	movtne	r0, #38203	; 0x953b
 c34:	00000b38 	andeq	r0, r0, r8, lsr fp
 c38:	3f012e0f 	svccc	0x00012e0f
 c3c:	3a0e0319 	bcc	3818a8 <_Min_Stack_Size+0x3814a8>
 c40:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 c44:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 c48:	97184006 	ldrls	r4, [r8, -r6]
 c4c:	13011942 	movwne	r1, #6466	; 0x1942
 c50:	89100000 	ldmdbhi	r0, {}	; <UNPREDICTABLE>
 c54:	11010182 	smlabbne	r1, r2, r1, r0
 c58:	01133101 	tsteq	r3, r1, lsl #2
 c5c:	11000013 	tstne	r0, r3, lsl r0
 c60:	0001828a 	andeq	r8, r1, sl, lsl #5
 c64:	42911802 	addsmi	r1, r1, #131072	; 0x20000
 c68:	12000018 	andne	r0, r0, #24
 c6c:	01018289 	smlabbeq	r1, r9, r2, r8
 c70:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
 c74:	00133119 	andseq	r3, r3, r9, lsl r1
 c78:	00051300 	andeq	r1, r5, r0, lsl #6
 c7c:	0b3a0e03 	bleq	e84490 <_Min_Stack_Size+0xe84090>
 c80:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 c84:	00001802 	andeq	r1, r0, r2, lsl #16
 c88:	03000514 	movweq	r0, #1300	; 0x514
 c8c:	3b0b3a0e 	blcc	2cf4cc <_Min_Stack_Size+0x2cf0cc>
 c90:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 c94:	15000017 	strne	r0, [r0, #-23]
 c98:	08030034 	stmdaeq	r3, {r2, r4, r5}
 c9c:	0b3b0b3a 	bleq	ec398c <_Min_Stack_Size+0xec358c>
 ca0:	17021349 	strne	r1, [r2, -r9, asr #6]
 ca4:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
 ca8:	03193f01 	tsteq	r9, #1, 30
 cac:	3b0b3a0e 	blcc	2cf4ec <_Min_Stack_Size+0x2cf0ec>
 cb0:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 cb4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 cb8:	97184006 	ldrls	r4, [r8, -r6]
 cbc:	13011942 	movwne	r1, #6466	; 0x1942
 cc0:	34170000 	ldrcc	r0, [r7], #-0
 cc4:	3a0e0300 	bcc	3818cc <_Min_Stack_Size+0x3814cc>
 cc8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 ccc:	00170213 	andseq	r0, r7, r3, lsl r2
 cd0:	00341800 	eorseq	r1, r4, r0, lsl #16
 cd4:	0b3a0e03 	bleq	e844e8 <_Min_Stack_Size+0xe840e8>
 cd8:	1349053b 	movtne	r0, #38203	; 0x953b
 cdc:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 ce0:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
 ce4:	03193f01 	tsteq	r9, #1, 30
 ce8:	3b0b3a0e 	blcc	2cf528 <_Min_Stack_Size+0x2cf128>
 cec:	3c192705 	ldccc	7, cr2, [r9], {5}
 cf0:	1a000019 	bne	d5c <_Min_Stack_Size+0x95c>
 cf4:	13490005 	movtne	r0, #36869	; 0x9005
 cf8:	Address 0x0000000000000cf8 is out of bounds.


Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	080002a0 	stmdaeq	r0, {r5, r7, r9}
       4:	080002a8 	stmdaeq	r0, {r3, r5, r7, r9}
       8:	be500001 	cdplt	0, 5, cr0, cr0, cr1, {0}
       c:	c4080002 	strgt	r0, [r8], #-2
      10:	03080002 	movweq	r0, #32770	; 0x8002
      14:	9f017400 	svcls	0x00017400
	...
      20:	080002de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r9}
      24:	080002e2 	stmdaeq	r0, {r1, r5, r6, r7, r9}
      28:	44030006 	strmi	r0, [r3], #-6
      2c:	9f080013 	svcls	0x00080013
      30:	080002f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r9}
      34:	080002fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r9}
      38:	01750003 	cmneq	r5, r3
      3c:	0002fa9f 	muleq	r2, pc, sl	; <UNPREDICTABLE>
      40:	00030008 	andeq	r0, r3, r8
      44:	55000108 	strpl	r0, [r0, #-264]	; 0x108
	...
      50:	08000316 	stmdaeq	r0, {r1, r2, r4, r8, r9}
      54:	0800031a 	stmdaeq	r0, {r1, r3, r4, r8, r9}
      58:	01750003 	cmneq	r5, r3
      5c:	00031a9f 	muleq	r3, pc, sl	; <UNPREDICTABLE>
      60:	00032008 	andeq	r2, r3, r8
      64:	55000108 	strpl	r0, [r0, #-264]	; 0x108
	...
      70:	0800032a 	stmdaeq	r0, {r1, r3, r5, r8, r9}
      74:	0800032c 	stmdaeq	r0, {r2, r3, r5, r8, r9}
      78:	44030006 	strmi	r0, [r3], #-6
      7c:	9f080013 	svcls	0x00080013
      80:	08000340 	stmdaeq	r0, {r6, r8, r9}
      84:	08000344 	stmdaeq	r0, {r2, r6, r8, r9}
      88:	01750003 	cmneq	r5, r3
      8c:	0003449f 	muleq	r3, pc, r4	; <UNPREDICTABLE>
      90:	00034a08 	andeq	r4, r3, r8, lsl #20
      94:	55000108 	strpl	r0, [r0, #-264]	; 0x108
	...
      a0:	08000360 	stmdaeq	r0, {r5, r6, r8, r9}
      a4:	08000364 	stmdaeq	r0, {r2, r5, r6, r8, r9}
      a8:	01750003 	cmneq	r5, r3
      ac:	0003649f 	muleq	r3, pc, r4	; <UNPREDICTABLE>
      b0:	00037c08 	andeq	r7, r3, r8, lsl #24
      b4:	55000108 	strpl	r0, [r0, #-264]	; 0x108
	...
      c0:	080004b0 	stmdaeq	r0, {r4, r5, r7, sl}
      c4:	080004b4 	stmdaeq	r0, {r2, r4, r5, r7, sl}
      c8:	9f300002 	svcls	0x00300002
      cc:	080004b4 	stmdaeq	r0, {r2, r4, r5, r7, sl}
      d0:	080004b8 	stmdaeq	r0, {r3, r4, r5, r7, sl}
      d4:	00720005 	rsbseq	r0, r2, r5
      d8:	b89f1a3c 	ldmlt	pc, {r2, r3, r4, r5, r9, fp, ip}	; <UNPREDICTABLE>
      dc:	c2080004 	andgt	r0, r8, #4
      e0:	01080004 	tsteq	r8, r4
      e4:	04d05200 	ldrbeq	r5, [r0], #512	; 0x200
      e8:	04d60800 	ldrbeq	r0, [r6], #2048	; 0x800
      ec:	00060800 	andeq	r0, r6, r0, lsl #16
      f0:	ff080071 			; <UNDEFINED> instruction: 0xff080071
      f4:	04d69f1a 	ldrbeq	r9, [r6], #3866	; 0xf1a
      f8:	04de0800 	ldrbeq	r0, [lr], #2048	; 0x800
      fc:	00010800 	andeq	r0, r1, r0, lsl #16
     100:	00050652 	andeq	r0, r5, r2, asr r6
     104:	00050808 	andeq	r0, r5, r8, lsl #16
     108:	52000108 	andpl	r0, r0, #8, 2
	...
     114:	080004b0 	stmdaeq	r0, {r4, r5, r7, sl}
     118:	080004c2 	stmdaeq	r0, {r1, r6, r7, sl}
     11c:	9f300002 	svcls	0x00300002
     120:	080004d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, sl}
     124:	080004f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl}
     128:	9f300002 	svcls	0x00300002
     12c:	080004f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl}
     130:	08000504 	stmdaeq	r0, {r2, r8, sl}
     134:	06520001 	ldrbeq	r0, [r2], -r1
     138:	20080005 	andcs	r0, r8, r5
     13c:	02080005 	andeq	r0, r8, #5
     140:	009f3000 	addseq	r3, pc, r0
     144:	00000000 	andeq	r0, r0, r0
     148:	b0000000 	andlt	r0, r0, r0
     14c:	c2080004 	andgt	r0, r8, #4
     150:	02080004 	andeq	r0, r8, #4
     154:	d69f3200 	ldrle	r3, [pc], r0, lsl #4
     158:	f8080004 			; <UNDEFINED> instruction: 0xf8080004
     15c:	02080004 	andeq	r0, r8, #4
     160:	f89f3200 			; <UNDEFINED> instruction: 0xf89f3200
     164:	fc080004 	stc2	0, cr0, [r8], {4}
     168:	0d080004 	stceq	0, cr0, [r8, #-16]
     16c:	48007300 	stmdami	r0, {r8, r9, ip, sp, lr}
     170:	401a243d 	andsmi	r2, sl, sp, lsr r4
     174:	31012325 	tstcc	r1, r5, lsr #6
     178:	05069f24 	streq	r9, [r6, #-3876]	; 0xf24
     17c:	05200800 	streq	r0, [r0, #-2048]!	; 0x800
     180:	00020800 	andeq	r0, r2, r0, lsl #16
     184:	00009f32 	andeq	r9, r0, r2, lsr pc
     188:	00000000 	andeq	r0, r0, r0
     18c:	04b00000 	ldrteq	r0, [r0], #0
     190:	04c20800 	strbeq	r0, [r2], #2048	; 0x800
     194:	00020800 	andeq	r0, r2, r0, lsl #16
     198:	04d69f30 	ldrbeq	r9, [r6], #3888	; 0xf30
     19c:	04d80800 	ldrbeq	r0, [r8], #2048	; 0x800
     1a0:	00020800 	andeq	r0, r2, r0, lsl #16
     1a4:	04d89f30 	ldrbeq	r9, [r8], #3888	; 0xf30
     1a8:	05060800 	streq	r0, [r6, #-2048]	; 0x800
     1ac:	00090800 	andeq	r0, r9, r0, lsl #16
     1b0:	42400070 	submi	r0, r0, #112	; 0x70
     1b4:	25461a24 	strbcs	r1, [r6, #-2596]	; 0xa24
     1b8:	0005069f 	muleq	r5, pc, r6	; <UNPREDICTABLE>
     1bc:	00052008 	andeq	r2, r5, r8
     1c0:	30000208 	andcc	r0, r0, r8, lsl #4
     1c4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     1c8:	00000000 	andeq	r0, r0, r0
     1cc:	0004b000 	andeq	fp, r4, r0
     1d0:	0004c208 	andeq	ip, r4, r8, lsl #4
     1d4:	32000208 	andcc	r0, r0, #8, 4	; 0x80000000
     1d8:	0004d69f 	muleq	r4, pc, r6	; <UNPREDICTABLE>
     1dc:	0004e808 	andeq	lr, r4, r8, lsl #16
     1e0:	32000208 	andcc	r0, r0, #8, 4	; 0x80000000
     1e4:	0004e89f 	muleq	r4, pc, r8	; <UNPREDICTABLE>
     1e8:	00050608 	andeq	r0, r5, r8, lsl #12
     1ec:	51000108 	tstpl	r0, r8, lsl #2
     1f0:	08000506 	stmdaeq	r0, {r1, r2, r8, sl}
     1f4:	08000520 	stmdaeq	r0, {r5, r8, sl}
     1f8:	9f320002 	svcls	0x00320002
	...
     204:	08000570 	stmdaeq	r0, {r4, r5, r6, r8, sl}
     208:	08000574 	stmdaeq	r0, {r2, r4, r5, r6, r8, sl}
     20c:	74500001 	ldrbvc	r0, [r0], #-1
     210:	84080005 	strhi	r0, [r8], #-5
     214:	04080005 	streq	r0, [r8], #-5
     218:	5001f300 	andpl	pc, r1, r0, lsl #6
     21c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     220:	00000000 	andeq	r0, r0, r0
     224:	00058400 	andeq	r8, r5, r0, lsl #8
     228:	00059808 	andeq	r9, r5, r8, lsl #16
     22c:	50000108 	andpl	r0, r0, r8, lsl #2
     230:	08000598 	stmdaeq	r0, {r3, r4, r7, r8, sl}
     234:	080005a4 	stmdaeq	r0, {r2, r5, r7, r8, sl}
     238:	01f30004 	mvnseq	r0, r4
     23c:	05a49f50 	streq	r9, [r4, #3920]!	; 0xf50
     240:	05e00800 	strbeq	r0, [r0, #2048]!	; 0x800
     244:	00010800 	andeq	r0, r1, r0, lsl #16
     248:	0005e050 	andeq	lr, r5, r0, asr r0
     24c:	0005fc08 	andeq	pc, r5, r8, lsl #24
     250:	f3000408 	vshl.u8	d0, d8, d0
     254:	009f5001 	addseq	r5, pc, r1
     258:	00000000 	andeq	r0, r0, r0
     25c:	84000000 	strhi	r0, [r0], #-0
     260:	b6080005 	strlt	r0, [r8], -r5
     264:	02080005 	andeq	r0, r8, #5
     268:	b69f3000 	ldrlt	r3, [pc], r0
     26c:	c6080005 	strgt	r0, [r8], -r5
     270:	01080005 	tsteq	r8, r5
     274:	05c85200 	strbeq	r5, [r8, #512]	; 0x200
     278:	05cc0800 	strbeq	r0, [ip, #2048]	; 0x800
     27c:	00010800 	andeq	r0, r1, r0, lsl #16
     280:	0005cc54 	andeq	ip, r5, r4, asr ip
     284:	0005d608 	andeq	sp, r5, r8, lsl #12
     288:	52000108 	andpl	r0, r0, #8, 2
     28c:	080005d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl}
     290:	080005e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl}
     294:	00520001 	subseq	r0, r2, r1
     298:	00000000 	andeq	r0, r0, r0
     29c:	84000000 	strhi	r0, [r0], #-0
     2a0:	b6080005 	strlt	r0, [r8], -r5
     2a4:	02080005 	andeq	r0, r8, #5
     2a8:	b69f3000 	ldrlt	r3, [pc], r0
     2ac:	c6080005 	strgt	r0, [r8], -r5
     2b0:	05080005 	streq	r0, [r8, #-5]
     2b4:	00723400 	rsbseq	r3, r2, r0, lsl #8
     2b8:	00009f1c 	andeq	r9, r0, ip, lsl pc
     2bc:	00000000 	andeq	r0, r0, r0
     2c0:	05840000 	streq	r0, [r4]
     2c4:	05b60800 	ldreq	r0, [r6, #2048]!	; 0x800
     2c8:	00020800 	andeq	r0, r2, r0, lsl #16
     2cc:	05b69f3f 	ldreq	r9, [r6, #3903]!	; 0xf3f
     2d0:	05c60800 	strbeq	r0, [r6, #2048]	; 0x800
     2d4:	00050800 	andeq	r0, r5, r0, lsl #16
     2d8:	2600723f 			; <UNDEFINED> instruction: 0x2600723f
     2dc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     2e0:	00000000 	andeq	r0, r0, r0
     2e4:	0005fc00 	andeq	pc, r5, r0, lsl #24
     2e8:	00060808 	andeq	r0, r6, r8, lsl #16
     2ec:	50000108 	andpl	r0, r0, r8, lsl #2
     2f0:	08000608 	stmdaeq	r0, {r3, r9, sl}
     2f4:	08000610 	stmdaeq	r0, {r4, r9, sl}
     2f8:	01f30004 	mvnseq	r0, r4
     2fc:	00009f50 	andeq	r9, r0, r0, asr pc
     300:	00000000 	andeq	r0, r0, r0
     304:	05fc0000 	ldrbeq	r0, [ip, #0]!
     308:	06000800 	streq	r0, [r0], -r0, lsl #16
     30c:	00010800 	andeq	r0, r1, r0, lsl #16
     310:	00060051 	andeq	r0, r6, r1, asr r0
     314:	00061008 	andeq	r1, r6, r8
     318:	f3000408 	vshl.u8	d0, d8, d0
     31c:	009f5101 	addseq	r5, pc, r1, lsl #2
     320:	00000000 	andeq	r0, r0, r0
     324:	10000000 	andne	r0, r0, r0
     328:	1a080006 	bne	200348 <_Min_Stack_Size+0x1fff48>
     32c:	01080006 	tsteq	r8, r6
     330:	061a5000 	ldreq	r5, [sl], -r0
     334:	061e0800 	ldreq	r0, [lr], -r0, lsl #16
     338:	00040800 	andeq	r0, r4, r0, lsl #16
     33c:	9f5001f3 	svcls	0x005001f3
     340:	0800061e 	stmdaeq	r0, {r1, r2, r3, r4, r9, sl}
     344:	08000620 	stmdaeq	r0, {r5, r9, sl}
     348:	20500001 	subscs	r0, r0, r1
     34c:	28080006 	stmdacs	r8, {r1, r2}
     350:	04080006 	streq	r0, [r8], #-6
     354:	5001f300 	andpl	pc, r1, r0, lsl #6
     358:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     35c:	00000000 	andeq	r0, r0, r0
     360:	00064000 	andeq	r4, r6, r0
     364:	00068a08 	andeq	r8, r6, r8, lsl #20
     368:	50000108 	andpl	r0, r0, r8, lsl #2
     36c:	0800068a 	stmdaeq	r0, {r1, r3, r7, r9, sl}
     370:	0800069e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r9, sl}
     374:	01f30004 	mvnseq	r0, r4
     378:	069e9f50 			; <UNDEFINED> instruction: 0x069e9f50
     37c:	06a00800 	strteq	r0, [r0], r0, lsl #16
     380:	00010800 	andeq	r0, r1, r0, lsl #16
     384:	0006a050 	andeq	sl, r6, r0, asr r0
     388:	0006b208 	andeq	fp, r6, r8, lsl #4
     38c:	f3000408 	vshl.u8	d0, d8, d0
     390:	b29f5001 	addslt	r5, pc, #1
     394:	b4080006 	strlt	r0, [r8], #-6
     398:	01080006 	tsteq	r8, r6
     39c:	06b45000 	ldrteq	r5, [r4], r0
     3a0:	06c60800 	strbeq	r0, [r6], r0, lsl #16
     3a4:	00040800 	andeq	r0, r4, r0, lsl #16
     3a8:	9f5001f3 	svcls	0x005001f3
     3ac:	080006c6 	stmdaeq	r0, {r1, r2, r6, r7, r9, sl}
     3b0:	080006c8 	stmdaeq	r0, {r3, r6, r7, r9, sl}
     3b4:	c8500001 	ldmdagt	r0, {r0}^
     3b8:	da080006 	ble	2003d8 <_Min_Stack_Size+0x1fffd8>
     3bc:	04080006 	streq	r0, [r8], #-6
     3c0:	5001f300 	andpl	pc, r1, r0, lsl #6
     3c4:	0006da9f 	muleq	r6, pc, sl	; <UNPREDICTABLE>
     3c8:	0006dc08 	andeq	sp, r6, r8, lsl #24
     3cc:	50000108 	andpl	r0, r0, r8, lsl #2
     3d0:	080006dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sl}
     3d4:	080006ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r9, sl}
     3d8:	01f30004 	mvnseq	r0, r4
     3dc:	06ee9f50 	usateq	r9, #14, r0, asr #30
     3e0:	06f00800 	ldrbteq	r0, [r0], r0, lsl #16
     3e4:	00010800 	andeq	r0, r1, r0, lsl #16
     3e8:	0006f050 	andeq	pc, r6, r0, asr r0	; <UNPREDICTABLE>
     3ec:	00070208 	andeq	r0, r7, r8, lsl #4
     3f0:	f3000408 	vshl.u8	d0, d8, d0
     3f4:	029f5001 	addseq	r5, pc, #1
     3f8:	04080007 	streq	r0, [r8], #-7
     3fc:	01080007 	tsteq	r8, r7
     400:	07045000 	streq	r5, [r4, -r0]
     404:	07160800 	ldreq	r0, [r6, -r0, lsl #16]
     408:	00040800 	andeq	r0, r4, r0, lsl #16
     40c:	9f5001f3 	svcls	0x005001f3
     410:	08000716 	stmdaeq	r0, {r1, r2, r4, r8, r9, sl}
     414:	08000718 	stmdaeq	r0, {r3, r4, r8, r9, sl}
     418:	18500001 	ldmdane	r0, {r0}^
     41c:	2a080007 	bcs	200440 <_Min_Stack_Size+0x200040>
     420:	04080007 	streq	r0, [r8], #-7
     424:	5001f300 	andpl	pc, r1, r0, lsl #6
     428:	00072a9f 	muleq	r7, pc, sl	; <UNPREDICTABLE>
     42c:	00072c08 	andeq	r2, r7, r8, lsl #24
     430:	50000108 	andpl	r0, r0, r8, lsl #2
     434:	0800072c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl}
     438:	0800073e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, r9, sl}
     43c:	01f30004 	mvnseq	r0, r4
     440:	073e9f50 			; <UNDEFINED> instruction: 0x073e9f50
     444:	07420800 	strbeq	r0, [r2, -r0, lsl #16]
     448:	00010800 	andeq	r0, r1, r0, lsl #16
     44c:	00074250 	andeq	r4, r7, r0, asr r2
     450:	00075608 	andeq	r5, r7, r8, lsl #12
     454:	f3000408 	vshl.u8	d0, d8, d0
     458:	569f5001 	ldrpl	r5, [pc], r1
     45c:	5a080007 	bpl	200480 <_Min_Stack_Size+0x200080>
     460:	01080007 	tsteq	r8, r7
     464:	075a5000 	ldrbeq	r5, [sl, -r0]
     468:	079c0800 	ldreq	r0, [ip, r0, lsl #16]
     46c:	00040800 	andeq	r0, r4, r0, lsl #16
     470:	9f5001f3 	svcls	0x005001f3
	...
     47c:	0800079c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl}
     480:	080007ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, r9, sl}
     484:	9f300002 	svcls	0x00300002
     488:	080007ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, r9, sl}
     48c:	08000858 	stmdaeq	r0, {r3, r4, r6, fp}
     490:	00530001 	subseq	r0, r3, r1
     494:	00000000 	andeq	r0, r0, r0
     498:	9c000000 	stcls	0, cr0, [r0], {-0}
     49c:	ae080007 	cdpge	0, 0, cr0, cr8, cr7, {0}
     4a0:	02080007 	andeq	r0, r8, #7
     4a4:	ae9f3000 	cdpge	0, 9, cr3, cr15, cr0, {0}
     4a8:	b8080007 	stmdalt	r8, {r0, r1, r2}
     4ac:	01080007 	tsteq	r8, r7
     4b0:	07bc5400 	ldreq	r5, [ip, r0, lsl #8]!
     4b4:	07d00800 	ldrbeq	r0, [r0, r0, lsl #16]
     4b8:	00010800 	andeq	r0, r1, r0, lsl #16
     4bc:	0007d054 	andeq	sp, r7, r4, asr r0
     4c0:	00080608 	andeq	r0, r8, r8, lsl #12
     4c4:	77000608 	strvc	r0, [r0, -r8, lsl #12]
     4c8:	24007300 	strcs	r7, [r0], #-768	; 0x300
     4cc:	0008069f 	muleq	r8, pc, r6	; <UNPREDICTABLE>
     4d0:	00081208 	andeq	r1, r8, r8, lsl #4
     4d4:	77000608 	strvc	r0, [r0, -r8, lsl #12]
     4d8:	247f7300 	ldrbtcs	r7, [pc], #-768	; 4e0 <_Min_Stack_Size+0xe0>
     4dc:	0008189f 	muleq	r8, pc, r8	; <UNPREDICTABLE>
     4e0:	00085808 	andeq	r5, r8, r8, lsl #16
     4e4:	77000608 	strvc	r0, [r0, -r8, lsl #12]
     4e8:	24007300 	strcs	r7, [r0], #-768	; 0x300
     4ec:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     4f0:	00000000 	andeq	r0, r0, r0
     4f4:	00079c00 	andeq	r9, r7, r0, lsl #24
     4f8:	0007ae08 	andeq	sl, r7, r8, lsl #28
     4fc:	30000208 	andcc	r0, r0, r8, lsl #4
     500:	0007ae9f 	muleq	r7, pc, lr	; <UNPREDICTABLE>
     504:	0007b808 	andeq	fp, r7, r8, lsl #16
     508:	55000108 	strpl	r0, [r0, #-264]	; 0x108
     50c:	080007c0 	stmdaeq	r0, {r6, r7, r8, r9, sl}
     510:	080007f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sl}
     514:	f4550001 			; <UNDEFINED> instruction: 0xf4550001
     518:	06080007 	streq	r0, [r8], -r7
     51c:	09080008 	stmdbeq	r8, {r3}
     520:	73007700 	movwvc	r7, #1792	; 0x700
     524:	00762400 	rsbseq	r2, r6, r0, lsl #8
     528:	08069f1a 	stmdaeq	r6, {r1, r3, r4, r8, r9, sl, fp, ip, pc}
     52c:	08120800 	ldmdaeq	r2, {fp}
     530:	00090800 	andeq	r0, r9, r0, lsl #16
     534:	7f730077 	svcvc	0x00730077
     538:	1a007624 	bne	1ddd0 <_Min_Stack_Size+0x1d9d0>
     53c:	0008189f 	muleq	r8, pc, r8	; <UNPREDICTABLE>
     540:	00084408 	andeq	r4, r8, r8, lsl #8
     544:	55000108 	strpl	r0, [r0, #-264]	; 0x108
     548:	08000844 	stmdaeq	r0, {r2, r6, fp}
     54c:	08000858 	stmdaeq	r0, {r3, r4, r6, fp}
     550:	00770009 	rsbseq	r0, r7, r9
     554:	76240073 			; <UNDEFINED> instruction: 0x76240073
     558:	009f1a00 	addseq	r1, pc, r0, lsl #20
     55c:	00000000 	andeq	r0, r0, r0
     560:	90000000 	andls	r0, r0, r0
     564:	9a080008 	bls	20058c <_Min_Stack_Size+0x20018c>
     568:	01080008 	tsteq	r8, r8
     56c:	089a5000 	ldmeq	sl, {ip, lr}
     570:	089c0800 	ldmeq	ip, {fp}
     574:	00040800 	andeq	r0, r4, r0, lsl #16
     578:	9f5001f3 	svcls	0x005001f3
	...
     584:	08000890 	stmdaeq	r0, {r4, r7, fp}
     588:	08000892 	stmdaeq	r0, {r1, r4, r7, fp}
     58c:	9f300002 	svcls	0x00300002
     590:	08000892 	stmdaeq	r0, {r1, r4, r7, fp}
     594:	0800089c 	stmdaeq	r0, {r2, r3, r4, r7, fp}
     598:	0071000c 	rsbseq	r0, r1, ip
     59c:	1affff0a 	bne	1cc <_Min_Heap_Size+0x1cc>
     5a0:	301a0073 	andscc	r0, sl, r3, ror r0
     5a4:	00009f2e 	andeq	r9, r0, lr, lsr #30
     5a8:	00000000 	andeq	r0, r0, r0
     5ac:	089c0000 	ldmeq	ip, {}	; <UNPREDICTABLE>
     5b0:	089e0800 	ldmeq	lr, {fp}
     5b4:	00010800 	andeq	r0, r1, r0, lsl #16
     5b8:	00089e50 	andeq	r9, r8, r0, asr lr
     5bc:	0008a208 	andeq	sl, r8, r8, lsl #4
     5c0:	f3000408 	vshl.u8	d0, d8, d0
     5c4:	009f5001 	addseq	r5, pc, r1
     5c8:	00000000 	andeq	r0, r0, r0
     5cc:	a4000000 	strge	r0, [r0], #-0
     5d0:	ae080008 	cdpge	0, 0, cr0, cr8, cr8, {0}
     5d4:	01080008 	tsteq	r8, r8
     5d8:	08ae5000 	stmiaeq	lr!, {ip, lr}
     5dc:	08b00800 	ldmeq	r0!, {fp}
     5e0:	00040800 	andeq	r0, r4, r0, lsl #16
     5e4:	9f5001f3 	svcls	0x005001f3
	...
     5f0:	080008a4 	stmdaeq	r0, {r2, r5, r7, fp}
     5f4:	080008a6 	stmdaeq	r0, {r1, r2, r5, r7, fp}
     5f8:	9f300002 	svcls	0x00300002
     5fc:	080008a6 	stmdaeq	r0, {r1, r2, r5, r7, fp}
     600:	080008b0 	stmdaeq	r0, {r4, r5, r7, fp}
     604:	0071000c 	rsbseq	r0, r1, ip
     608:	1affff0a 	bne	238 <_Min_Heap_Size+0x238>
     60c:	301a0073 	andscc	r0, sl, r3, ror r0
     610:	00009f2e 	andeq	r9, r0, lr, lsr #30
     614:	00000000 	andeq	r0, r0, r0
     618:	08b00000 	ldmeq	r0!, {}	; <UNPREDICTABLE>
     61c:	08b20800 	ldmeq	r2!, {fp}
     620:	00010800 	andeq	r0, r1, r0, lsl #16
     624:	0008b250 	andeq	fp, r8, r0, asr r2
     628:	0008b608 	andeq	fp, r8, r8, lsl #12
     62c:	f3000408 	vshl.u8	d0, d8, d0
     630:	009f5001 	addseq	r5, pc, r1
     634:	00000000 	andeq	r0, r0, r0
     638:	d0000000 	andle	r0, r0, r0
     63c:	d4080008 	strle	r0, [r8], #-8
     640:	01080008 	tsteq	r8, r8
     644:	08d45100 	ldmeq	r4, {r8, ip, lr}^
     648:	08d80800 	ldmeq	r8, {fp}^
     64c:	00040800 	andeq	r0, r4, r0, lsl #16
     650:	9f5101f3 	svcls	0x005101f3
	...
     65c:	080008d8 	stmdaeq	r0, {r3, r4, r6, r7, fp}
     660:	080008de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, fp}
     664:	de500001 	cdple	0, 5, cr0, cr0, cr1, {0}
     668:	00080008 	andeq	r0, r8, r8
     66c:	04080009 	streq	r0, [r8], #-9
     670:	5001f300 	andpl	pc, r1, r0, lsl #6
     674:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     678:	00000000 	andeq	r0, r0, r0
     67c:	0008d800 	andeq	sp, r8, r0, lsl #16
     680:	0008e208 	andeq	lr, r8, r8, lsl #4
     684:	51000108 	tstpl	r0, r8, lsl #2
     688:	080008e2 	stmdaeq	r0, {r1, r5, r6, r7, fp}
     68c:	08000900 	stmdaeq	r0, {r8, fp}
     690:	01f30004 	mvnseq	r0, r4
     694:	00009f51 	andeq	r9, r0, r1, asr pc
     698:	00000000 	andeq	r0, r0, r0
     69c:	08d80000 	ldmeq	r8, {}^	; <UNPREDICTABLE>
     6a0:	08fa0800 	ldmeq	sl!, {fp}^
     6a4:	00010800 	andeq	r0, r1, r0, lsl #16
     6a8:	0008fa52 	andeq	pc, r8, r2, asr sl	; <UNPREDICTABLE>
     6ac:	00090008 	andeq	r0, r9, r8
     6b0:	f3000408 	vshl.u8	d0, d8, d0
     6b4:	009f5201 	addseq	r5, pc, r1, lsl #4
     6b8:	00000000 	andeq	r0, r0, r0
     6bc:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
     6c0:	e6080008 	str	r0, [r8], -r8
     6c4:	02080008 	andeq	r0, r8, #8
     6c8:	e69f3000 	ldr	r3, [pc], r0
     6cc:	fa080008 	blx	2006f4 <_Min_Stack_Size+0x2002f4>
     6d0:	09080008 	stmdbeq	r8, {r3}
     6d4:	08007200 	stmdaeq	r0, {r9, ip, sp, lr}
     6d8:	00711aff 	ldrshteq	r1, [r1], #-175	; 0xffffff51
     6dc:	08fa9f24 	ldmeq	sl!, {r2, r5, r8, r9, sl, fp, ip, pc}^
     6e0:	09000800 	stmdbeq	r0, {fp}
     6e4:	000a0800 	andeq	r0, sl, r0, lsl #16
     6e8:	085201f3 	ldmdaeq	r2, {r0, r1, r4, r5, r6, r7, r8}^
     6ec:	00711aff 	ldrshteq	r1, [r1], #-175	; 0xffffff51
     6f0:	00009f24 	andeq	r9, r0, r4, lsr #30
     6f4:	00000000 	andeq	r0, r0, r0
     6f8:	08d80000 	ldmeq	r8, {}^	; <UNPREDICTABLE>
     6fc:	08fc0800 	ldmeq	ip!, {fp}^
     700:	00020800 	andeq	r0, r2, r0, lsl #16
     704:	08fc9f30 	ldmeq	ip!, {r4, r5, r8, r9, sl, fp, ip, pc}^
     708:	09000800 	stmdbeq	r0, {fp}
     70c:	00010800 	andeq	r0, r1, r0, lsl #16
     710:	00000053 	andeq	r0, r0, r3, asr r0
     714:	00000000 	andeq	r0, r0, r0
     718:	00096800 	andeq	r6, r9, r0, lsl #16
     71c:	00098008 	andeq	r8, r9, r8
     720:	30000208 	andcc	r0, r0, r8, lsl #4
     724:	0009809f 	muleq	r9, pc, r0	; <UNPREDICTABLE>
     728:	00098408 	andeq	r8, r9, r8, lsl #8
     72c:	70000708 	andvc	r0, r0, r8, lsl #14
     730:	31254100 	teqcc	r5, r0, lsl #2
     734:	09889f1a 	stmibeq	r8, {r1, r3, r4, r8, r9, sl, fp, ip, pc}
     738:	09980800 	ldmibeq	r8, {fp}
     73c:	00020800 	andeq	r0, r2, r0, lsl #16
     740:	00009f30 	andeq	r9, r0, r0, lsr pc
     744:	00000000 	andeq	r0, r0, r0
     748:	09680000 	stmdbeq	r8!, {}^	; <UNPREDICTABLE>
     74c:	096a0800 	stmdbeq	sl!, {fp}^
     750:	00020800 	andeq	r0, r2, r0, lsl #16
     754:	096a9f31 	stmdbeq	sl!, {r0, r4, r5, r8, r9, sl, fp, ip, pc}^
     758:	09980800 	ldmibeq	r8, {fp}
     75c:	00020800 	andeq	r0, r2, r0, lsl #16
     760:	00009f41 	andeq	r9, r0, r1, asr #30
     764:	00000000 	andeq	r0, r0, r0
     768:	09680000 	stmdbeq	r8!, {}^	; <UNPREDICTABLE>
     76c:	096a0800 	stmdbeq	sl!, {fp}^
     770:	00020800 	andeq	r0, r2, r0, lsl #16
     774:	096a9f30 	stmdbeq	sl!, {r4, r5, r8, r9, sl, fp, ip, pc}^
     778:	096c0800 	stmdbeq	ip!, {fp}^
     77c:	00010800 	andeq	r0, r1, r0, lsl #16
     780:	00000053 	andeq	r0, r0, r3, asr r0
     784:	00000000 	andeq	r0, r0, r0
     788:	00096800 	andeq	r6, r9, r0, lsl #16
     78c:	00097c08 	andeq	r7, r9, r8, lsl #24
     790:	30000208 	andcc	r0, r0, r8, lsl #4
     794:	0009889f 	muleq	r9, pc, r8	; <UNPREDICTABLE>
     798:	00099808 	andeq	r9, r9, r8, lsl #16
     79c:	31000208 	tstcc	r0, r8, lsl #4
     7a0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     7a4:	00000000 	andeq	r0, r0, r0
     7a8:	00097c00 	andeq	r7, r9, r0, lsl #24
     7ac:	00098808 	andeq	r8, r9, r8, lsl #16
     7b0:	08000308 	stmdaeq	r0, {r3, r8, r9}
     7b4:	00009f31 	andeq	r9, r0, r1, lsr pc
     7b8:	00000000 	andeq	r0, r0, r0
     7bc:	097c0000 	ldmdbeq	ip!, {}^	; <UNPREDICTABLE>
     7c0:	09800800 	stmibeq	r0, {fp}
     7c4:	00020800 	andeq	r0, r2, r0, lsl #16
     7c8:	09809f31 	stmibeq	r0, {r0, r4, r5, r8, r9, sl, fp, ip, pc}
     7cc:	09880800 	stmibeq	r8, {fp}
     7d0:	00020800 	andeq	r0, r2, r0, lsl #16
     7d4:	00009f41 	andeq	r9, r0, r1, asr #30
     7d8:	00000000 	andeq	r0, r0, r0
     7dc:	097c0000 	ldmdbeq	ip!, {}^	; <UNPREDICTABLE>
     7e0:	09800800 	stmibeq	r0, {fp}
     7e4:	00020800 	andeq	r0, r2, r0, lsl #16
     7e8:	09809f30 	stmibeq	r0, {r4, r5, r8, r9, sl, fp, ip, pc}
     7ec:	09840800 	stmibeq	r4, {fp}
     7f0:	00010800 	andeq	r0, r1, r0, lsl #16
     7f4:	00000050 	andeq	r0, r0, r0, asr r0
     7f8:	00000000 	andeq	r0, r0, r0
     7fc:	00097c00 	andeq	r7, r9, r0, lsl #24
     800:	00098808 	andeq	r8, r9, r8, lsl #16
     804:	30000208 	andcc	r0, r0, r8, lsl #4
     808:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     80c:	00000000 	andeq	r0, r0, r0
     810:	00099800 	andeq	r9, r9, r0, lsl #16
     814:	0009a408 	andeq	sl, r9, r8, lsl #8
     818:	50000108 	andpl	r0, r0, r8, lsl #2
     81c:	080009a4 	stmdaeq	r0, {r2, r5, r7, r8, fp}
     820:	080009ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, fp}
     824:	01f30004 	mvnseq	r0, r4
     828:	00009f50 	andeq	r9, r0, r0, asr pc
     82c:	00000000 	andeq	r0, r0, r0
     830:	09980000 	ldmibeq	r8, {}	; <UNPREDICTABLE>
     834:	099c0800 	ldmibeq	ip, {fp}
     838:	00020800 	andeq	r0, r2, r0, lsl #16
     83c:	099c9f30 	ldmibeq	ip, {r4, r5, r8, r9, sl, fp, ip, pc}
     840:	09a40800 	stmibeq	r4!, {fp}
     844:	00010800 	andeq	r0, r1, r0, lsl #16
     848:	0009a452 	andeq	sl, r9, r2, asr r4
     84c:	0009ac08 	andeq	sl, r9, r8, lsl #24
     850:	50000108 	andpl	r0, r0, r8, lsl #2
	...
     85c:	080009e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, fp}
     860:	080009ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, fp}
     864:	ee500001 	cdp	0, 5, cr0, cr0, cr1, {0}
     868:	08080009 	stmdaeq	r8, {r0, r3}
     86c:	0408000a 	streq	r0, [r8], #-10
     870:	5001f300 	andpl	pc, r1, r0, lsl #6
     874:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     878:	00000000 	andeq	r0, r0, r0
     87c:	0009e400 	andeq	lr, r9, r0, lsl #8
     880:	0009f208 	andeq	pc, r9, r8, lsl #4
     884:	51000108 	tstpl	r0, r8, lsl #2
     888:	080009f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, fp}
     88c:	08000a08 	stmdaeq	r0, {r3, r9, fp}
     890:	01f30004 	mvnseq	r0, r4
     894:	00009f51 	andeq	r9, r0, r1, asr pc
     898:	00000000 	andeq	r0, r0, r0
     89c:	09e40000 	stmibeq	r4!, {}^	; <UNPREDICTABLE>
     8a0:	09f80800 	ldmibeq	r8!, {fp}^
     8a4:	00010800 	andeq	r0, r1, r0, lsl #16
     8a8:	0009f852 	andeq	pc, r9, r2, asr r8	; <UNPREDICTABLE>
     8ac:	000a0808 	andeq	r0, sl, r8, lsl #16
     8b0:	f3000408 	vshl.u8	d0, d8, d0
     8b4:	009f5201 	addseq	r5, pc, r1, lsl #4
     8b8:	00000000 	andeq	r0, r0, r0
     8bc:	e4000000 	str	r0, [r0], #-0
     8c0:	f0080009 			; <UNDEFINED> instruction: 0xf0080009
     8c4:	01080009 	tsteq	r8, r9
     8c8:	09f05300 	ldmibeq	r0!, {r8, r9, ip, lr}^
     8cc:	0a080800 	beq	2028d4 <_Min_Stack_Size+0x2024d4>
     8d0:	00040800 	andeq	r0, r4, r0, lsl #16
     8d4:	9f5301f3 	svcls	0x005301f3
	...
     8e0:	080009e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, fp}
     8e4:	080009fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, fp}
     8e8:	00910002 	addseq	r0, r1, r2
	...
     8f4:	08000a14 	stmdaeq	r0, {r2, r4, r9, fp}
     8f8:	08000a20 	stmdaeq	r0, {r5, r9, fp}
     8fc:	20500001 	subscs	r0, r0, r1
     900:	2c08000a 	stccs	0, cr0, [r8], {10}
     904:	0408000a 	streq	r0, [r8], #-10
     908:	5001f300 	andpl	pc, r1, r0, lsl #6
     90c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     910:	00000000 	andeq	r0, r0, r0
     914:	000a1400 	andeq	r1, sl, r0, lsl #8
     918:	000a1a08 	andeq	r1, sl, r8, lsl #20
     91c:	51000108 	tstpl	r0, r8, lsl #2
     920:	08000a1a 	stmdaeq	r0, {r1, r3, r4, r9, fp}
     924:	08000a2c 	stmdaeq	r0, {r2, r3, r5, r9, fp}
     928:	01f30004 	mvnseq	r0, r4
     92c:	00009f51 	andeq	r9, r0, r1, asr pc
     930:	00000000 	andeq	r0, r0, r0
     934:	0a140000 	beq	50093c <_Min_Stack_Size+0x50053c>
     938:	0a160800 	beq	582940 <_Min_Stack_Size+0x582540>
     93c:	00010800 	andeq	r0, r1, r0, lsl #16
     940:	000a1652 	andeq	r1, sl, r2, asr r6
     944:	000a2c08 	andeq	r2, sl, r8, lsl #24
     948:	f3000408 	vshl.u8	d0, d8, d0
     94c:	009f5201 	addseq	r5, pc, r1, lsl #4
     950:	00000000 	andeq	r0, r0, r0
     954:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
     958:	4408000a 	strmi	r0, [r8], #-10
     95c:	0108000a 	tsteq	r8, sl
     960:	0a445000 	beq	1114968 <_Min_Stack_Size+0x1114568>
     964:	0a500800 	beq	140296c <_Min_Stack_Size+0x140256c>
     968:	00040800 	andeq	r0, r4, r0, lsl #16
     96c:	9f5001f3 	svcls	0x005001f3
	...
     978:	08000a38 	stmdaeq	r0, {r3, r4, r5, r9, fp}
     97c:	08000a3e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r9, fp}
     980:	3e510001 	cdpcc	0, 5, cr0, cr1, cr1, {0}
     984:	5008000a 	andpl	r0, r8, sl
     988:	0408000a 	streq	r0, [r8], #-10
     98c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     990:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     994:	00000000 	andeq	r0, r0, r0
     998:	000a3800 	andeq	r3, sl, r0, lsl #16
     99c:	000a3a08 	andeq	r3, sl, r8, lsl #20
     9a0:	52000108 	andpl	r0, r0, #8, 2
     9a4:	08000a3a 	stmdaeq	r0, {r1, r3, r4, r5, r9, fp}
     9a8:	08000a50 	stmdaeq	r0, {r4, r6, r9, fp}
     9ac:	01f30004 	mvnseq	r0, r4
     9b0:	00009f52 	andeq	r9, r0, r2, asr pc
     9b4:	00000000 	andeq	r0, r0, r0
     9b8:	0a680000 	beq	1a009c0 <_Min_Stack_Size+0x1a005c0>
     9bc:	0a740800 	beq	1d029c4 <_Min_Stack_Size+0x1d025c4>
     9c0:	00010800 	andeq	r0, r1, r0, lsl #16
     9c4:	000a7450 	andeq	r7, sl, r0, asr r4
     9c8:	000a7c08 	andeq	r7, sl, r8, lsl #24
     9cc:	f3000408 	vshl.u8	d0, d8, d0
     9d0:	009f5001 	addseq	r5, pc, r1
     9d4:	00000000 	andeq	r0, r0, r0
     9d8:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
     9dc:	7208000a 	andvc	r0, r8, #10
     9e0:	0108000a 	tsteq	r8, sl
     9e4:	0a725100 	beq	1c94dec <_Min_Stack_Size+0x1c949ec>
     9e8:	0a7c0800 	beq	1f029f0 <_Min_Stack_Size+0x1f025f0>
     9ec:	00040800 	andeq	r0, r4, r0, lsl #16
     9f0:	9f5101f3 	svcls	0x005101f3
	...
     9fc:	08000a68 	stmdaeq	r0, {r3, r5, r6, r9, fp}
     a00:	08000a6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, fp}
     a04:	9f300002 	svcls	0x00300002
     a08:	08000a6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, fp}
     a0c:	08000a70 	stmdaeq	r0, {r4, r5, r6, r9, fp}
     a10:	00720009 	rsbseq	r0, r2, r9
     a14:	ffffff11 			; <UNDEFINED> instruction: 0xffffff11
     a18:	709f1a44 	addsvc	r1, pc, r4, asr #20
     a1c:	7408000a 	strvc	r0, [r8], #-10
     a20:	0108000a 	tsteq	r8, sl
     a24:	0a745200 	beq	1d1522c <_Min_Stack_Size+0x1d14e2c>
     a28:	0a7c0800 	beq	1f02a30 <_Min_Stack_Size+0x1f02630>
     a2c:	00010800 	andeq	r0, r1, r0, lsl #16
     a30:	00000050 	andeq	r0, r0, r0, asr r0
     a34:	00000000 	andeq	r0, r0, r0
     a38:	000a7c00 	andeq	r7, sl, r0, lsl #24
     a3c:	000a8808 	andeq	r8, sl, r8, lsl #16
     a40:	50000108 	andpl	r0, r0, r8, lsl #2
     a44:	08000a88 	stmdaeq	r0, {r3, r7, r9, fp}
     a48:	08000a90 	stmdaeq	r0, {r4, r7, r9, fp}
     a4c:	01f30004 	mvnseq	r0, r4
     a50:	00009f50 	andeq	r9, r0, r0, asr pc
     a54:	00000000 	andeq	r0, r0, r0
     a58:	0a7c0000 	beq	1f00a60 <_Min_Stack_Size+0x1f00660>
     a5c:	0a860800 	beq	fe182a64 <_estack+0xde152a64>
     a60:	00010800 	andeq	r0, r1, r0, lsl #16
     a64:	000a8651 	andeq	r8, sl, r1, asr r6
     a68:	000a9008 	andeq	r9, sl, r8
     a6c:	f3000408 	vshl.u8	d0, d8, d0
     a70:	009f5101 	addseq	r5, pc, r1, lsl #2
     a74:	00000000 	andeq	r0, r0, r0
     a78:	7c000000 	stcvc	0, cr0, [r0], {-0}
     a7c:	8008000a 	andhi	r0, r8, sl
     a80:	0208000a 	andeq	r0, r8, #10
     a84:	809f3000 	addshi	r3, pc, r0
     a88:	8408000a 	strhi	r0, [r8], #-10
     a8c:	0908000a 	stmdbeq	r8, {r1, r3}
     a90:	0c007200 	sfmeq	f7, 4, [r0], {-0}
     a94:	07ffffff 			; <UNDEFINED> instruction: 0x07ffffff
     a98:	0a849f1a 	beq	fe128708 <_estack+0xde0f8708>
     a9c:	0a880800 	beq	fe202aa4 <_estack+0xde1d2aa4>
     aa0:	00010800 	andeq	r0, r1, r0, lsl #16
     aa4:	000a8852 	andeq	r8, sl, r2, asr r8
     aa8:	000a9008 	andeq	r9, sl, r8
     aac:	50000108 	andpl	r0, r0, r8, lsl #2
	...
     ab8:	08000a90 	stmdaeq	r0, {r4, r7, r9, fp}
     abc:	08000a9a 	stmdaeq	r0, {r1, r3, r4, r7, r9, fp}
     ac0:	9a500001 	bls	1400acc <_Min_Stack_Size+0x14006cc>
     ac4:	a408000a 	strge	r0, [r8], #-10
     ac8:	0408000a 	streq	r0, [r8], #-10
     acc:	5001f300 	andpl	pc, r1, r0, lsl #6
     ad0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     ad4:	00000000 	andeq	r0, r0, r0
     ad8:	000a9000 	andeq	r9, sl, r0
     adc:	000a9408 	andeq	r9, sl, r8, lsl #8
     ae0:	30000208 	andcc	r0, r0, r8, lsl #4
     ae4:	000a949f 	muleq	sl, pc, r4	; <UNPREDICTABLE>
     ae8:	000a9a08 	andeq	r9, sl, r8, lsl #20
     aec:	52000108 	andpl	r0, r0, #8, 2
     af0:	08000a9a 	stmdaeq	r0, {r1, r3, r4, r7, r9, fp}
     af4:	08000aa4 	stmdaeq	r0, {r2, r5, r7, r9, fp}
     af8:	00500001 	subseq	r0, r0, r1
     afc:	00000000 	andeq	r0, r0, r0
     b00:	b4000000 	strlt	r0, [r0], #-0
     b04:	be08000a 	cdplt	0, 0, cr0, cr8, cr10, {0}
     b08:	0108000a 	tsteq	r8, sl
     b0c:	0abe5000 	beq	fef94b14 <_estack+0xdef64b14>
     b10:	0ac80800 	beq	ff202b18 <_estack+0xdf1d2b18>
     b14:	00040800 	andeq	r0, r4, r0, lsl #16
     b18:	9f5001f3 	svcls	0x005001f3
	...
     b24:	08000ab4 	stmdaeq	r0, {r2, r4, r5, r7, r9, fp}
     b28:	08000ab8 	stmdaeq	r0, {r3, r4, r5, r7, r9, fp}
     b2c:	9f300002 	svcls	0x00300002
     b30:	08000ab8 	stmdaeq	r0, {r3, r4, r5, r7, r9, fp}
     b34:	08000abe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r9, fp}
     b38:	be520001 	cdplt	0, 5, cr0, cr2, cr1, {0}
     b3c:	c808000a 	stmdagt	r8, {r1, r3}
     b40:	0108000a 	tsteq	r8, sl
     b44:	00005000 	andeq	r5, r0, r0
     b48:	00000000 	andeq	r0, r0, r0
     b4c:	0ac80000 	beq	ff200b54 <_estack+0xdf1d0b54>
     b50:	0ad20800 	beq	ff482b58 <_estack+0xdf452b58>
     b54:	00010800 	andeq	r0, r1, r0, lsl #16
     b58:	000ad250 	andeq	sp, sl, r0, asr r2
     b5c:	000adc08 	andeq	sp, sl, r8, lsl #24
     b60:	f3000408 	vshl.u8	d0, d8, d0
     b64:	009f5001 	addseq	r5, pc, r1
     b68:	00000000 	andeq	r0, r0, r0
     b6c:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
     b70:	cc08000a 	stcgt	0, cr0, [r8], {10}
     b74:	0208000a 	andeq	r0, r8, #10
     b78:	cc9f3000 	ldcgt	0, cr3, [pc], {0}
     b7c:	d208000a 	andle	r0, r8, #10
     b80:	0108000a 	tsteq	r8, sl
     b84:	0ad25200 	beq	ff49538c <_estack+0xdf46538c>
     b88:	0adc0800 	beq	ff702b90 <_estack+0xdf6d2b90>
     b8c:	00010800 	andeq	r0, r1, r0, lsl #16
     b90:	00000050 	andeq	r0, r0, r0, asr r0
     b94:	00000000 	andeq	r0, r0, r0
     b98:	000adc00 	andeq	sp, sl, r0, lsl #24
     b9c:	000ae808 	andeq	lr, sl, r8, lsl #16
     ba0:	50000108 	andpl	r0, r0, r8, lsl #2
     ba4:	08000ae8 	stmdaeq	r0, {r3, r5, r6, r7, r9, fp}
     ba8:	08000af0 	stmdaeq	r0, {r4, r5, r6, r7, r9, fp}
     bac:	01f30004 	mvnseq	r0, r4
     bb0:	00009f50 	andeq	r9, r0, r0, asr pc
     bb4:	00000000 	andeq	r0, r0, r0
     bb8:	0adc0000 	beq	ff700bc0 <_estack+0xdf6d0bc0>
     bbc:	0ae00800 	beq	ff802bc4 <_estack+0xdf7d2bc4>
     bc0:	00020800 	andeq	r0, r2, r0, lsl #16
     bc4:	0ae09f30 	beq	ff82888c <_estack+0xdf7f888c>
     bc8:	0ae80800 	beq	ffa02bd0 <_estack+0xdf9d2bd0>
     bcc:	00010800 	andeq	r0, r1, r0, lsl #16
     bd0:	000ae852 	andeq	lr, sl, r2, asr r8
     bd4:	000af008 	andeq	pc, sl, r8
     bd8:	50000108 	andpl	r0, r0, r8, lsl #2
	...
     be4:	08000af0 	stmdaeq	r0, {r4, r5, r6, r7, r9, fp}
     be8:	08000af4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, fp}
     bec:	9f300002 	svcls	0x00300002
     bf0:	08000af4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, fp}
     bf4:	08000af8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, fp}
     bf8:	00730005 	rsbseq	r0, r3, r5
     bfc:	f89f1a3c 			; <UNDEFINED> instruction: 0xf89f1a3c
     c00:	0408000a 	streq	r0, [r8], #-10
     c04:	0108000b 	tsteq	r8, fp
     c08:	0b0c5300 	bleq	315810 <_Min_Stack_Size+0x315410>
     c0c:	0b100800 	bleq	402c14 <_Min_Stack_Size+0x402814>
     c10:	00060800 	andeq	r0, r6, r0, lsl #16
     c14:	f0080074 			; <UNDEFINED> instruction: 0xf0080074
     c18:	0b109f1a 	bleq	428888 <_Min_Stack_Size+0x428488>
     c1c:	0b120800 	bleq	482c24 <_Min_Stack_Size+0x482824>
     c20:	00010800 	andeq	r0, r1, r0, lsl #16
     c24:	000b1854 	andeq	r1, fp, r4, asr r8
     c28:	000b1c08 	andeq	r1, fp, r8, lsl #24
     c2c:	74000708 	strvc	r0, [r0], #-1800	; 0x708
     c30:	1c000a00 	stcne	10, cr0, [r0], {-0}
     c34:	0b1c9f1a 	bleq	7288a4 <_Min_Stack_Size+0x7284a4>
     c38:	0b1e0800 	bleq	782c40 <_Min_Stack_Size+0x782840>
     c3c:	00010800 	andeq	r0, r1, r0, lsl #16
     c40:	000b2654 	andeq	r2, fp, r4, asr r6
     c44:	000b2e08 	andeq	r2, fp, r8, lsl #28
     c48:	71000708 	tstvc	r0, r8, lsl #14
     c4c:	e0000a00 	and	r0, r0, r0, lsl #20
     c50:	0b2e9f1a 	bleq	ba88c0 <_Min_Stack_Size+0xba84c0>
     c54:	0b360800 	bleq	d82c5c <_Min_Stack_Size+0xd8285c>
     c58:	00010800 	andeq	r0, r1, r0, lsl #16
     c5c:	000b3651 	andeq	r3, fp, r1, asr r6
     c60:	000b3808 	andeq	r3, fp, r8, lsl #16
     c64:	53000108 	movwpl	r0, #264	; 0x108
     c68:	08000b3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, fp}
     c6c:	08000b44 	stmdaeq	r0, {r2, r6, r8, r9, fp}
     c70:	00530001 	subseq	r0, r3, r1
     c74:	00000000 	andeq	r0, r0, r0
     c78:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
     c7c:	1208000a 	andne	r0, r8, #10
     c80:	0208000b 	andeq	r0, r8, #11
     c84:	129f3000 	addsne	r3, pc, #0
     c88:	1808000b 	stmdane	r8, {r0, r1, r3}
     c8c:	0608000b 	streq	r0, [r8], -fp
     c90:	08007400 	stmdaeq	r0, {sl, ip, sp, lr}
     c94:	1e9f1aff 	mrcne	10, 4, r1, cr15, cr15, {7}
     c98:	2208000b 	andcs	r0, r8, #11
     c9c:	0608000b 	streq	r0, [r8], -fp
     ca0:	08007400 	stmdaeq	r0, {sl, ip, sp, lr}
     ca4:	309f1aff 			; <UNDEFINED> instruction: 0x309f1aff
     ca8:	3608000b 	strcc	r0, [r8], -fp
     cac:	0608000b 	streq	r0, [r8], -fp
     cb0:	08007200 	stmdaeq	r0, {r9, ip, sp, lr}
     cb4:	369f1aff 			; <UNDEFINED> instruction: 0x369f1aff
     cb8:	8008000b 	andhi	r0, r8, fp
     cbc:	0208000b 	andeq	r0, r8, #11
     cc0:	009f3000 	addseq	r3, pc, r0
     cc4:	00000000 	andeq	r0, r0, r0
     cc8:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
     ccc:	0608000a 	streq	r0, [r8], -sl
     cd0:	0208000b 	andeq	r0, r8, #11
     cd4:	369f3000 	ldrcc	r3, [pc], r0
     cd8:	5a08000b 	bpl	200d0c <_Min_Stack_Size+0x20090c>
     cdc:	0208000b 	andeq	r0, r8, #11
     ce0:	5a9f3000 	bpl	fe7ccce8 <_estack+0xde79cce8>
     ce4:	6a08000b 	bvs	200d18 <_Min_Stack_Size+0x200918>
     ce8:	0108000b 	tsteq	r8, fp
     cec:	00005300 	andeq	r5, r0, r0, lsl #6
     cf0:	00000000 	andeq	r0, r0, r0
     cf4:	0af00000 	beq	ffc00cfc <_estack+0xdfbd0cfc>
     cf8:	0b060800 	bleq	182d00 <_Min_Stack_Size+0x182900>
     cfc:	00020800 	andeq	r0, r2, r0, lsl #16
     d00:	0b369f32 	bleq	da89d0 <_Min_Stack_Size+0xda85d0>
     d04:	0b5e0800 	bleq	1782d0c <_Min_Stack_Size+0x178290c>
     d08:	00020800 	andeq	r0, r2, r0, lsl #16
     d0c:	0b5e9f32 	bleq	17a89dc <_Min_Stack_Size+0x17a85dc>
     d10:	0b620800 	bleq	1882d18 <_Min_Stack_Size+0x1882918>
     d14:	000d0800 	andeq	r0, sp, r0, lsl #16
     d18:	3d480072 	stclcc	0, cr0, [r8, #-456]	; 0xfffffe38
     d1c:	25401a24 	strbcs	r1, [r0, #-2596]	; 0xa24
     d20:	24310123 	ldrtcs	r0, [r1], #-291	; 0x123
     d24:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     d28:	00000000 	andeq	r0, r0, r0
     d2c:	000af000 	andeq	pc, sl, r0
     d30:	000b0608 	andeq	r0, fp, r8, lsl #12
     d34:	30000208 	andcc	r0, r0, r8, lsl #4
     d38:	000b369f 	muleq	fp, pc, r6	; <UNPREDICTABLE>
     d3c:	000b3e08 	andeq	r3, fp, r8, lsl #28
     d40:	30000208 	andcc	r0, r0, r8, lsl #4
     d44:	000b3e9f 	muleq	fp, pc, lr	; <UNPREDICTABLE>
     d48:	000b8008 	andeq	r8, fp, r8
     d4c:	74000908 	strvc	r0, [r0], #-2312	; 0x908
     d50:	24424000 	strbcs	r4, [r2], #-0
     d54:	9f25461a 	svcls	0x0025461a
	...
     d60:	08000af0 	stmdaeq	r0, {r4, r5, r6, r7, r9, fp}
     d64:	08000b06 	stmdaeq	r0, {r1, r2, r8, r9, fp}
     d68:	9f320002 	svcls	0x00320002
     d6c:	08000b36 	stmdaeq	r0, {r1, r2, r4, r5, r8, r9, fp}
     d70:	08000b4e 	stmdaeq	r0, {r1, r2, r3, r6, r8, r9, fp}
     d74:	9f320002 	svcls	0x00320002
     d78:	08000b4e 	stmdaeq	r0, {r1, r2, r3, r6, r8, r9, fp}
     d7c:	08000b80 	stmdaeq	r0, {r7, r8, r9, fp}
     d80:	00510001 	subseq	r0, r1, r1
     d84:	00000000 	andeq	r0, r0, r0
     d88:	80000000 	andhi	r0, r0, r0
     d8c:	a608000b 	strge	r0, [r8], -fp
     d90:	0108000b 	tsteq	r8, fp
     d94:	0ba65000 	bleq	fe994d9c <_estack+0xde964d9c>
     d98:	0bb00800 	bleq	fec02da0 <_estack+0xdebd2da0>
     d9c:	00040800 	andeq	r0, r4, r0, lsl #16
     da0:	9f5001f3 	svcls	0x005001f3
	...
     dac:	08000b80 	stmdaeq	r0, {r7, r8, r9, fp}
     db0:	08000b8e 	stmdaeq	r0, {r1, r2, r3, r7, r8, r9, fp}
     db4:	9f300002 	svcls	0x00300002
     db8:	08000b8e 	stmdaeq	r0, {r1, r2, r3, r7, r8, r9, fp}
     dbc:	08000b9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, fp}
     dc0:	9c510001 	mrrcls	0, 0, r0, r1, cr1
     dc4:	9e08000b 	cdpls	0, 0, cr0, cr8, cr11, {0}
     dc8:	0108000b 	tsteq	r8, fp
     dcc:	00005300 	andeq	r5, r0, r0, lsl #6
     dd0:	00000000 	andeq	r0, r0, r0
     dd4:	0bd40000 	bleq	ff500ddc <_estack+0xdf4d0ddc>
     dd8:	0bdc0800 	bleq	ff702de0 <_estack+0xdf6d2de0>
     ddc:	00010800 	andeq	r0, r1, r0, lsl #16
     de0:	000bdc50 	andeq	sp, fp, r0, asr ip
     de4:	000bec08 	andeq	lr, fp, r8, lsl #24
     de8:	70000308 	andvc	r0, r0, r8, lsl #6
     dec:	00009f01 	andeq	r9, r0, r1, lsl #30
     df0:	00000000 	andeq	r0, r0, r0
     df4:	0bd40000 	bleq	ff500dfc <_estack+0xdf4d0dfc>
     df8:	0bda0800 	bleq	ff682e00 <_estack+0xdf652e00>
     dfc:	00020800 	andeq	r0, r2, r0, lsl #16
     e00:	0bda9f30 	bleq	ff6a8ac8 <_estack+0xdf678ac8>
     e04:	0bec0800 	bleq	ffb02e0c <_estack+0xdfad2e0c>
     e08:	00010800 	andeq	r0, r1, r0, lsl #16
     e0c:	00000052 	andeq	r0, r0, r2, asr r0
     e10:	00000000 	andeq	r0, r0, r0
     e14:	000bec00 	andeq	lr, fp, r0, lsl #24
     e18:	000bf408 	andeq	pc, fp, r8, lsl #8
     e1c:	50000108 	andpl	r0, r0, r8, lsl #2
     e20:	08000bf4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, fp}
     e24:	08000c08 	stmdaeq	r0, {r3, sl, fp}
     e28:	01700003 	cmneq	r0, r3
     e2c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     e30:	00000000 	andeq	r0, r0, r0
     e34:	000bec00 	andeq	lr, fp, r0, lsl #24
     e38:	000bf208 	andeq	pc, fp, r8, lsl #4
     e3c:	30000208 	andcc	r0, r0, r8, lsl #4
     e40:	000bf29f 	muleq	fp, pc, r2	; <UNPREDICTABLE>
     e44:	000c0808 	andeq	r0, ip, r8, lsl #16
     e48:	52000108 	andpl	r0, r0, #8, 2
	...
     e54:	08000c08 	stmdaeq	r0, {r3, sl, fp}
     e58:	08000c14 	stmdaeq	r0, {r2, r4, sl, fp}
     e5c:	14500001 	ldrbne	r0, [r0], #-1
     e60:	2008000c 	andcs	r0, r8, ip
     e64:	0408000c 	streq	r0, [r8], #-12
     e68:	5001f300 	andpl	pc, r1, r0, lsl #6
     e6c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     e70:	00000000 	andeq	r0, r0, r0
     e74:	000c0800 	andeq	r0, ip, r0, lsl #16
     e78:	000c0e08 	andeq	r0, ip, r8, lsl #28
     e7c:	30000208 	andcc	r0, r0, r8, lsl #4
     e80:	000c0e9f 	muleq	ip, pc, lr	; <UNPREDICTABLE>
     e84:	000c1408 	andeq	r1, ip, r8, lsl #8
     e88:	52000108 	andpl	r0, r0, #8, 2
     e8c:	08000c14 	stmdaeq	r0, {r2, r4, sl, fp}
     e90:	08000c20 	stmdaeq	r0, {r5, sl, fp}
     e94:	00500001 	subseq	r0, r0, r1
     e98:	00000000 	andeq	r0, r0, r0
     e9c:	20000000 	andcs	r0, r0, r0
     ea0:	2c08000c 	stccs	0, cr0, [r8], {12}
     ea4:	0108000c 	tsteq	r8, ip
     ea8:	0c2c5000 	stceq	0, cr5, [ip], #-0
     eac:	0c380800 	ldceq	8, cr0, [r8], #-0
     eb0:	00040800 	andeq	r0, r4, r0, lsl #16
     eb4:	9f5001f3 	svcls	0x005001f3
	...
     ec0:	08000c20 	stmdaeq	r0, {r5, sl, fp}
     ec4:	08000c26 	stmdaeq	r0, {r1, r2, r5, sl, fp}
     ec8:	9f300002 	svcls	0x00300002
     ecc:	08000c26 	stmdaeq	r0, {r1, r2, r5, sl, fp}
     ed0:	08000c2c 	stmdaeq	r0, {r2, r3, r5, sl, fp}
     ed4:	2c520001 	mrrccs	0, 0, r0, r2, cr1
     ed8:	3808000c 	stmdacc	r8, {r2, r3}
     edc:	0108000c 	tsteq	r8, ip
     ee0:	00005000 	andeq	r5, r0, r0
     ee4:	00000000 	andeq	r0, r0, r0
     ee8:	0c380000 	ldceq	0, cr0, [r8], #-0
     eec:	0c440800 	mcrreq	8, 0, r0, r4, cr0
     ef0:	00010800 	andeq	r0, r1, r0, lsl #16
     ef4:	000c4450 	andeq	r4, ip, r0, asr r4
     ef8:	000c5008 	andeq	r5, ip, r8
     efc:	f3000408 	vshl.u8	d0, d8, d0
     f00:	009f5001 	addseq	r5, pc, r1
     f04:	00000000 	andeq	r0, r0, r0
     f08:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
     f0c:	3e08000c 	cdpcc	0, 0, cr0, cr8, cr12, {0}
     f10:	0208000c 	andeq	r0, r8, #12
     f14:	3e9f3000 	cdpcc	0, 9, cr3, cr15, cr0, {0}
     f18:	4408000c 	strmi	r0, [r8], #-12
     f1c:	0108000c 	tsteq	r8, ip
     f20:	0c445200 	sfmeq	f5, 2, [r4], {-0}
     f24:	0c500800 	mrrceq	8, 0, r0, r0, cr0	; <UNPREDICTABLE>
     f28:	00010800 	andeq	r0, r1, r0, lsl #16
     f2c:	00000050 	andeq	r0, r0, r0, asr r0
     f30:	00000000 	andeq	r0, r0, r0
     f34:	000c5c00 	andeq	r5, ip, r0, lsl #24
     f38:	000c6608 	andeq	r6, ip, r8, lsl #12
     f3c:	50000108 	andpl	r0, r0, r8, lsl #2
     f40:	08000c66 	stmdaeq	r0, {r1, r2, r5, r6, sl, fp}
     f44:	08000c6a 	stmdaeq	r0, {r1, r3, r5, r6, sl, fp}
     f48:	01f30004 	mvnseq	r0, r4
     f4c:	0c6a9f50 	stcleq	15, cr9, [sl], #-320	; 0xfffffec0
     f50:	0c6c0800 	stcleq	8, cr0, [ip], #-0
     f54:	00010800 	andeq	r0, r1, r0, lsl #16
     f58:	000c6c50 	andeq	r6, ip, r0, asr ip
     f5c:	000c7408 	andeq	r7, ip, r8, lsl #8
     f60:	f3000408 	vshl.u8	d0, d8, d0
     f64:	009f5001 	addseq	r5, pc, r1
     f68:	00000000 	andeq	r0, r0, r0
     f6c:	74000000 	strvc	r0, [r0], #-0
     f70:	7e08000c 	cdpvc	0, 0, cr0, cr8, cr12, {0}
     f74:	0108000c 	tsteq	r8, ip
     f78:	0c7e5000 	ldcleq	0, cr5, [lr], #-0
     f7c:	0c820800 	stceq	8, cr0, [r2], {0}
     f80:	00040800 	andeq	r0, r4, r0, lsl #16
     f84:	9f5001f3 	svcls	0x005001f3
     f88:	08000c82 	stmdaeq	r0, {r1, r7, sl, fp}
     f8c:	08000c84 	stmdaeq	r0, {r2, r7, sl, fp}
     f90:	84500001 	ldrbhi	r0, [r0], #-1
     f94:	8c08000c 	stchi	0, cr0, [r8], {12}
     f98:	0408000c 	streq	r0, [r8], #-12
     f9c:	5001f300 	andpl	pc, r1, r0, lsl #6
     fa0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     fa4:	00000000 	andeq	r0, r0, r0
     fa8:	000c8c00 	andeq	r8, ip, r0, lsl #24
     fac:	000c9608 	andeq	r9, ip, r8, lsl #12
     fb0:	50000108 	andpl	r0, r0, r8, lsl #2
     fb4:	08000c96 	stmdaeq	r0, {r1, r2, r4, r7, sl, fp}
     fb8:	08000c9a 	stmdaeq	r0, {r1, r3, r4, r7, sl, fp}
     fbc:	01f30004 	mvnseq	r0, r4
     fc0:	0c9a9f50 	ldceq	15, cr9, [sl], {80}	; 0x50
     fc4:	0c9c0800 	ldceq	8, cr0, [ip], {0}
     fc8:	00010800 	andeq	r0, r1, r0, lsl #16
     fcc:	000c9c50 	andeq	r9, ip, r0, asr ip
     fd0:	000ca408 	andeq	sl, ip, r8, lsl #8
     fd4:	f3000408 	vshl.u8	d0, d8, d0
     fd8:	009f5001 	addseq	r5, pc, r1
     fdc:	00000000 	andeq	r0, r0, r0
     fe0:	a4000000 	strge	r0, [r0], #-0
     fe4:	ae08000c 	cdpge	0, 0, cr0, cr8, cr12, {0}
     fe8:	0108000c 	tsteq	r8, ip
     fec:	0cae5000 	stceq	0, cr5, [lr]
     ff0:	0cb20800 	ldceq	8, cr0, [r2]
     ff4:	00040800 	andeq	r0, r4, r0, lsl #16
     ff8:	9f5001f3 	svcls	0x005001f3
     ffc:	08000cb2 	stmdaeq	r0, {r1, r4, r5, r7, sl, fp}
    1000:	08000cb4 	stmdaeq	r0, {r2, r4, r5, r7, sl, fp}
    1004:	b4500001 	ldrblt	r0, [r0], #-1
    1008:	bc08000c 	stclt	0, cr0, [r8], {12}
    100c:	0408000c 	streq	r0, [r8], #-12
    1010:	5001f300 	andpl	pc, r1, r0, lsl #6
    1014:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1018:	00000000 	andeq	r0, r0, r0
    101c:	000cbc00 	andeq	fp, ip, r0, lsl #24
    1020:	000cc608 	andeq	ip, ip, r8, lsl #12
    1024:	50000108 	andpl	r0, r0, r8, lsl #2
    1028:	08000cc6 	stmdaeq	r0, {r1, r2, r6, r7, sl, fp}
    102c:	08000cca 	stmdaeq	r0, {r1, r3, r6, r7, sl, fp}
    1030:	01f30004 	mvnseq	r0, r4
    1034:	0cca9f50 	stcleq	15, cr9, [sl], {80}	; 0x50
    1038:	0ccc0800 	stcleq	8, cr0, [ip], {0}
    103c:	00010800 	andeq	r0, r1, r0, lsl #16
    1040:	000ccc50 	andeq	ip, ip, r0, asr ip
    1044:	000cd408 	andeq	sp, ip, r8, lsl #8
    1048:	f3000408 	vshl.u8	d0, d8, d0
    104c:	009f5001 	addseq	r5, pc, r1
    1050:	00000000 	andeq	r0, r0, r0
    1054:	d4000000 	strle	r0, [r0], #-0
    1058:	de08000c 	cdple	0, 0, cr0, cr8, cr12, {0}
    105c:	0108000c 	tsteq	r8, ip
    1060:	0cde5000 	ldcleq	0, cr5, [lr], {0}
    1064:	0ce20800 	stcleq	8, cr0, [r2]
    1068:	00040800 	andeq	r0, r4, r0, lsl #16
    106c:	9f5001f3 	svcls	0x005001f3
    1070:	08000ce2 	stmdaeq	r0, {r1, r5, r6, r7, sl, fp}
    1074:	08000ce4 	stmdaeq	r0, {r2, r5, r6, r7, sl, fp}
    1078:	e4500001 	ldrb	r0, [r0], #-1
    107c:	ec08000c 	stc	0, cr0, [r8], {12}
    1080:	0408000c 	streq	r0, [r8], #-12
    1084:	5001f300 	andpl	pc, r1, r0, lsl #6
    1088:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    108c:	00000000 	andeq	r0, r0, r0
    1090:	000cec00 	andeq	lr, ip, r0, lsl #24
    1094:	000cf608 	andeq	pc, ip, r8, lsl #12
    1098:	50000108 	andpl	r0, r0, r8, lsl #2
    109c:	08000cf6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, sl, fp}
    10a0:	08000cfa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, sl, fp}
    10a4:	01f30004 	mvnseq	r0, r4
    10a8:	0cfa9f50 	ldcleq	15, cr9, [sl], #320	; 0x140
    10ac:	0cfc0800 	ldcleq	8, cr0, [ip]
    10b0:	00010800 	andeq	r0, r1, r0, lsl #16
    10b4:	000cfc50 	andeq	pc, ip, r0, asr ip	; <UNPREDICTABLE>
    10b8:	000d0408 	andeq	r0, sp, r8, lsl #8
    10bc:	f3000408 	vshl.u8	d0, d8, d0
    10c0:	009f5001 	addseq	r5, pc, r1
    10c4:	00000000 	andeq	r0, r0, r0
    10c8:	04000000 	streq	r0, [r0], #-0
    10cc:	0e08000d 	cdpeq	0, 0, cr0, cr8, cr13, {0}
    10d0:	0108000d 	tsteq	r8, sp
    10d4:	0d0e5000 	stceq	0, cr5, [lr, #-0]
    10d8:	0d120800 	ldceq	8, cr0, [r2, #-0]
    10dc:	00040800 	andeq	r0, r4, r0, lsl #16
    10e0:	9f5001f3 	svcls	0x005001f3
    10e4:	08000d12 	stmdaeq	r0, {r1, r4, r8, sl, fp}
    10e8:	08000d14 	stmdaeq	r0, {r2, r4, r8, sl, fp}
    10ec:	14500001 	ldrbne	r0, [r0], #-1
    10f0:	1c08000d 	stcne	0, cr0, [r8], {13}
    10f4:	0408000d 	streq	r0, [r8], #-13
    10f8:	5001f300 	andpl	pc, r1, r0, lsl #6
    10fc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1100:	00000000 	andeq	r0, r0, r0
    1104:	000d1c00 	andeq	r1, sp, r0, lsl #24
    1108:	000d2608 	andeq	r2, sp, r8, lsl #12
    110c:	50000108 	andpl	r0, r0, r8, lsl #2
    1110:	08000d26 	stmdaeq	r0, {r1, r2, r5, r8, sl, fp}
    1114:	08000d2a 	stmdaeq	r0, {r1, r3, r5, r8, sl, fp}
    1118:	01f30004 	mvnseq	r0, r4
    111c:	0d2a9f50 	stceq	15, cr9, [sl, #-320]!	; 0xfffffec0
    1120:	0d2c0800 	stceq	8, cr0, [ip, #-0]
    1124:	00010800 	andeq	r0, r1, r0, lsl #16
    1128:	000d2c50 	andeq	r2, sp, r0, asr ip
    112c:	000d3408 	andeq	r3, sp, r8, lsl #8
    1130:	f3000408 	vshl.u8	d0, d8, d0
    1134:	009f5001 	addseq	r5, pc, r1
    1138:	00000000 	andeq	r0, r0, r0
    113c:	34000000 	strcc	r0, [r0], #-0
    1140:	3e08000d 	cdpcc	0, 0, cr0, cr8, cr13, {0}
    1144:	0108000d 	tsteq	r8, sp
    1148:	0d3e5000 	ldceq	0, cr5, [lr, #-0]
    114c:	0d420800 	stcleq	8, cr0, [r2, #-0]
    1150:	00040800 	andeq	r0, r4, r0, lsl #16
    1154:	9f5001f3 	svcls	0x005001f3
    1158:	08000d42 	stmdaeq	r0, {r1, r6, r8, sl, fp}
    115c:	08000d44 	stmdaeq	r0, {r2, r6, r8, sl, fp}
    1160:	44500001 	ldrbmi	r0, [r0], #-1
    1164:	4c08000d 	stcmi	0, cr0, [r8], {13}
    1168:	0408000d 	streq	r0, [r8], #-13
    116c:	5001f300 	andpl	pc, r1, r0, lsl #6
    1170:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1174:	00000000 	andeq	r0, r0, r0
    1178:	000d4c00 	andeq	r4, sp, r0, lsl #24
    117c:	000d5608 	andeq	r5, sp, r8, lsl #12
    1180:	50000108 	andpl	r0, r0, r8, lsl #2
    1184:	08000d56 	stmdaeq	r0, {r1, r2, r4, r6, r8, sl, fp}
    1188:	08000d5a 	stmdaeq	r0, {r1, r3, r4, r6, r8, sl, fp}
    118c:	01f30004 	mvnseq	r0, r4
    1190:	0d5a9f50 	ldcleq	15, cr9, [sl, #-320]	; 0xfffffec0
    1194:	0d5c0800 	ldcleq	8, cr0, [ip, #-0]
    1198:	00010800 	andeq	r0, r1, r0, lsl #16
    119c:	000d5c50 	andeq	r5, sp, r0, asr ip
    11a0:	000d6408 	andeq	r6, sp, r8, lsl #8
    11a4:	f3000408 	vshl.u8	d0, d8, d0
    11a8:	009f5001 	addseq	r5, pc, r1
    11ac:	00000000 	andeq	r0, r0, r0
    11b0:	64000000 	strvs	r0, [r0], #-0
    11b4:	6e08000d 	cdpvs	0, 0, cr0, cr8, cr13, {0}
    11b8:	0108000d 	tsteq	r8, sp
    11bc:	0d6e5000 	stcleq	0, cr5, [lr, #-0]
    11c0:	0d720800 	ldcleq	8, cr0, [r2, #-0]
    11c4:	00040800 	andeq	r0, r4, r0, lsl #16
    11c8:	9f5001f3 	svcls	0x005001f3
    11cc:	08000d72 	stmdaeq	r0, {r1, r4, r5, r6, r8, sl, fp}
    11d0:	08000d74 	stmdaeq	r0, {r2, r4, r5, r6, r8, sl, fp}
    11d4:	74500001 	ldrbvc	r0, [r0], #-1
    11d8:	7c08000d 	stcvc	0, cr0, [r8], {13}
    11dc:	0408000d 	streq	r0, [r8], #-13
    11e0:	5001f300 	andpl	pc, r1, r0, lsl #6
    11e4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    11e8:	00000000 	andeq	r0, r0, r0
    11ec:	000d7c00 	andeq	r7, sp, r0, lsl #24
    11f0:	000d8608 	andeq	r8, sp, r8, lsl #12
    11f4:	50000108 	andpl	r0, r0, r8, lsl #2
    11f8:	08000d86 	stmdaeq	r0, {r1, r2, r7, r8, sl, fp}
    11fc:	08000d8a 	stmdaeq	r0, {r1, r3, r7, r8, sl, fp}
    1200:	01f30004 	mvnseq	r0, r4
    1204:	0d8a9f50 	stceq	15, cr9, [sl, #320]	; 0x140
    1208:	0d8c0800 	stceq	8, cr0, [ip]
    120c:	00010800 	andeq	r0, r1, r0, lsl #16
    1210:	000d8c50 	andeq	r8, sp, r0, asr ip
    1214:	000d9408 	andeq	r9, sp, r8, lsl #8
    1218:	f3000408 	vshl.u8	d0, d8, d0
    121c:	009f5001 	addseq	r5, pc, r1
    1220:	00000000 	andeq	r0, r0, r0
    1224:	94000000 	strls	r0, [r0], #-0
    1228:	9e08000d 	cdpls	0, 0, cr0, cr8, cr13, {0}
    122c:	0108000d 	tsteq	r8, sp
    1230:	0d9e5000 	ldceq	0, cr5, [lr]
    1234:	0da20800 	stceq	8, cr0, [r2]
    1238:	00040800 	andeq	r0, r4, r0, lsl #16
    123c:	9f5001f3 	svcls	0x005001f3
    1240:	08000da2 	stmdaeq	r0, {r1, r5, r7, r8, sl, fp}
    1244:	08000da4 	stmdaeq	r0, {r2, r5, r7, r8, sl, fp}
    1248:	a4500001 	ldrbge	r0, [r0], #-1
    124c:	ac08000d 	stcge	0, cr0, [r8], {13}
    1250:	0408000d 	streq	r0, [r8], #-13
    1254:	5001f300 	andpl	pc, r1, r0, lsl #6
    1258:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    125c:	00000000 	andeq	r0, r0, r0
    1260:	000dac00 	andeq	sl, sp, r0, lsl #24
    1264:	000db608 	andeq	fp, sp, r8, lsl #12
    1268:	50000108 	andpl	r0, r0, r8, lsl #2
    126c:	08000db6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, sl, fp}
    1270:	08000dba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, sl, fp}
    1274:	01f30004 	mvnseq	r0, r4
    1278:	0dba9f50 	ldceq	15, cr9, [sl, #320]!	; 0x140
    127c:	0dbc0800 	ldceq	8, cr0, [ip]
    1280:	00010800 	andeq	r0, r1, r0, lsl #16
    1284:	000dbc50 	andeq	fp, sp, r0, asr ip
    1288:	000dc408 	andeq	ip, sp, r8, lsl #8
    128c:	f3000408 	vshl.u8	d0, d8, d0
    1290:	009f5001 	addseq	r5, pc, r1
    1294:	00000000 	andeq	r0, r0, r0
    1298:	c4000000 	strgt	r0, [r0], #-0
    129c:	ce08000d 	cdpgt	0, 0, cr0, cr8, cr13, {0}
    12a0:	0108000d 	tsteq	r8, sp
    12a4:	0dce5000 	stcleq	0, cr5, [lr]
    12a8:	0dd20800 	ldcleq	8, cr0, [r2]
    12ac:	00040800 	andeq	r0, r4, r0, lsl #16
    12b0:	9f5001f3 	svcls	0x005001f3
    12b4:	08000dd2 	stmdaeq	r0, {r1, r4, r6, r7, r8, sl, fp}
    12b8:	08000dd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl, fp}
    12bc:	d4500001 	ldrble	r0, [r0], #-1
    12c0:	dc08000d 	stcle	0, cr0, [r8], {13}
    12c4:	0408000d 	streq	r0, [r8], #-13
    12c8:	5001f300 	andpl	pc, r1, r0, lsl #6
    12cc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    12d0:	00000000 	andeq	r0, r0, r0
    12d4:	000ddc00 	andeq	sp, sp, r0, lsl #24
    12d8:	000df008 	andeq	pc, sp, r8
    12dc:	50000108 	andpl	r0, r0, r8, lsl #2
    12e0:	08000df0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sl, fp}
    12e4:	08000dfa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, sl, fp}
    12e8:	01f30004 	mvnseq	r0, r4
    12ec:	0dfa9f50 	ldcleq	15, cr9, [sl, #320]!	; 0x140
    12f0:	0e020800 	cdpeq	8, 0, cr0, cr2, cr0, {0}
    12f4:	00010800 	andeq	r0, r1, r0, lsl #16
    12f8:	000e0250 	andeq	r0, lr, r0, asr r2
    12fc:	000e1008 	andeq	r1, lr, r8
    1300:	f3000408 	vshl.u8	d0, d8, d0
    1304:	009f5001 	addseq	r5, pc, r1
    1308:	00000000 	andeq	r0, r0, r0
    130c:	dc000000 	stcle	0, cr0, [r0], {-0}
    1310:	de08000d 	cdple	0, 0, cr0, cr8, cr13, {0}
    1314:	0208000d 	andeq	r0, r8, #13
    1318:	de9f3000 	cdple	0, 9, cr3, cr15, cr0, {0}
    131c:	e608000d 	str	r0, [r8], -sp
    1320:	0108000d 	tsteq	r8, sp
    1324:	0de65300 	stcleq	3, cr5, [r6]
    1328:	0dec0800 	stcleq	8, cr0, [ip]
    132c:	00050800 	andeq	r0, r5, r0, lsl #16
    1330:	25350070 	ldrcs	r0, [r5, #-112]!	; 0x70
    1334:	000dec9f 	muleq	sp, pc, ip	; <UNPREDICTABLE>
    1338:	000df008 	andeq	pc, sp, r8
    133c:	70000808 	andvc	r0, r0, r8, lsl #16
    1340:	081a4f00 	ldmdaeq	sl, {r8, r9, sl, fp, lr}
    1344:	fa9f1aff 	blx	fe7c7f48 <_estack+0xde797f48>
    1348:	fc08000d 	stc2	0, cr0, [r8], {13}
    134c:	0108000d 	tsteq	r8, sp
    1350:	0dfc5300 	ldcleq	3, cr5, [ip]
    1354:	0dfe0800 	ldcleq	8, cr0, [lr]
    1358:	00050800 	andeq	r0, r5, r0, lsl #16
    135c:	25350070 	ldrcs	r0, [r5, #-112]!	; 0x70
    1360:	000dfe9f 	muleq	sp, pc, lr	; <UNPREDICTABLE>
    1364:	000e0208 	andeq	r0, lr, r8, lsl #4
    1368:	70000808 	andvc	r0, r0, r8, lsl #16
    136c:	081a4f00 	ldmdaeq	sl, {r8, r9, sl, fp, lr}
    1370:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    1374:	00000000 	andeq	r0, r0, r0
    1378:	dc000000 	stcle	0, cr0, [r0], {-0}
    137c:	ea08000d 	b	2013b8 <_Min_Stack_Size+0x200fb8>
    1380:	0208000d 	andeq	r0, r8, #13
    1384:	ea9f3000 	b	fe7cd38c <_estack+0xde79d38c>
    1388:	fa08000d 	blx	2013c4 <_Min_Stack_Size+0x200fc4>
    138c:	0108000d 	tsteq	r8, sp
    1390:	0dfa5300 	ldcleq	3, cr5, [sl]
    1394:	0dfe0800 	ldcleq	8, cr0, [lr]
    1398:	00020800 	andeq	r0, r2, r0, lsl #16
    139c:	0dfe9f30 	ldcleq	15, cr9, [lr, #192]!	; 0xc0
    13a0:	0e100800 	cdpeq	8, 1, cr0, cr0, cr0, {0}
    13a4:	00010800 	andeq	r0, r1, r0, lsl #16
    13a8:	00000053 	andeq	r0, r0, r3, asr r0
    13ac:	00000000 	andeq	r0, r0, r0
    13b0:	000ddc00 	andeq	sp, sp, r0, lsl #24
    13b4:	000dec08 	andeq	lr, sp, r8, lsl #24
    13b8:	30000208 	andcc	r0, r0, r8, lsl #4
    13bc:	000dec9f 	muleq	sp, pc, ip	; <UNPREDICTABLE>
    13c0:	000df008 	andeq	pc, sp, r8
    13c4:	73000d08 	movwvc	r0, #3336	; 0xd08
    13c8:	4f007000 	svcmi	0x00007000
    13cc:	1aff081a 	bne	fffc343c <_estack+0xdff9343c>
    13d0:	9f1a3125 	svcls	0x001a3125
    13d4:	08000dfa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, sl, fp}
    13d8:	08000dfe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, sl, fp}
    13dc:	9f300002 	svcls	0x00300002
    13e0:	08000dfe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, sl, fp}
    13e4:	08000e02 	stmdaeq	r0, {r1, r9, sl, fp}
    13e8:	0073000d 	rsbseq	r0, r3, sp
    13ec:	1a4f0070 	bne	13c15b4 <_Min_Stack_Size+0x13c11b4>
    13f0:	251aff08 	ldrcs	pc, [sl, #-3848]	; 0xf08
    13f4:	009f1a31 	addseq	r1, pc, r1, lsr sl	; <UNPREDICTABLE>
    13f8:	00000000 	andeq	r0, r0, r0
    13fc:	20000000 	andcs	r0, r0, r0
    1400:	2c08000e 	stccs	0, cr0, [r8], {14}
    1404:	0108000e 	tsteq	r8, lr
    1408:	0e2c5000 	cdpeq	0, 2, cr5, cr12, cr0, {0}
    140c:	0e340800 	cdpeq	8, 3, cr0, cr4, cr0, {0}
    1410:	00040800 	andeq	r0, r4, r0, lsl #16
    1414:	9f5001f3 	svcls	0x005001f3
	...
    1420:	08000e20 	stmdaeq	r0, {r5, r9, sl, fp}
    1424:	08000e24 	stmdaeq	r0, {r2, r5, r9, sl, fp}
    1428:	9f300002 	svcls	0x00300002
    142c:	08000e24 	stmdaeq	r0, {r2, r5, r9, sl, fp}
    1430:	08000e2c 	stmdaeq	r0, {r2, r3, r5, r9, sl, fp}
    1434:	0070000b 	rsbseq	r0, r0, fp
    1438:	731aff08 	tstvc	sl, #8, 30
    143c:	2e301a00 	vaddcs.f32	s2, s0, s0
    1440:	000e2c9f 	muleq	lr, pc, ip	; <UNPREDICTABLE>
    1444:	000e3408 	andeq	r3, lr, r8, lsl #8
    1448:	f3000c08 			; <UNDEFINED> instruction: 0xf3000c08
    144c:	ff085001 			; <UNDEFINED> instruction: 0xff085001
    1450:	1a00731a 	bne	1e0c0 <_Min_Stack_Size+0x1dcc0>
    1454:	009f2e30 	addseq	r2, pc, r0, lsr lr	; <UNPREDICTABLE>
    1458:	00000000 	andeq	r0, r0, r0
    145c:	40000000 	andmi	r0, r0, r0
    1460:	7808000e 	stmdavc	r8, {r1, r2, r3}
    1464:	0108000e 	tsteq	r8, lr
    1468:	0e785000 	cdpeq	0, 7, cr5, cr8, cr0, {0}
    146c:	0e8c0800 	cdpeq	8, 8, cr0, cr12, cr0, {0}
    1470:	00040800 	andeq	r0, r4, r0, lsl #16
    1474:	9f5001f3 	svcls	0x005001f3
    1478:	08000e8c 	stmdaeq	r0, {r2, r3, r7, r9, sl, fp}
    147c:	08000e8e 	stmdaeq	r0, {r1, r2, r3, r7, r9, sl, fp}
    1480:	8e500001 	cdphi	0, 5, cr0, cr0, cr1, {0}
    1484:	a008000e 	andge	r0, r8, lr
    1488:	0408000e 	streq	r0, [r8], #-14
    148c:	5001f300 	andpl	pc, r1, r0, lsl #6
    1490:	000ea09f 	muleq	lr, pc, r0	; <UNPREDICTABLE>
    1494:	000ea408 	andeq	sl, lr, r8, lsl #8
    1498:	50000108 	andpl	r0, r0, r8, lsl #2
    149c:	08000ea4 	stmdaeq	r0, {r2, r5, r7, r9, sl, fp}
    14a0:	08000eb8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl, fp}
    14a4:	01f30004 	mvnseq	r0, r4
    14a8:	0eb89f50 	mrceq	15, 5, r9, cr8, cr0, {2}
    14ac:	0ebc0800 	cdpeq	8, 11, cr0, cr12, cr0, {0}
    14b0:	00010800 	andeq	r0, r1, r0, lsl #16
    14b4:	000ebc50 	andeq	fp, lr, r0, asr ip
    14b8:	000ed008 	andeq	sp, lr, r8
    14bc:	f3000408 	vshl.u8	d0, d8, d0
    14c0:	d09f5001 	addsle	r5, pc, r1
    14c4:	d408000e 	strle	r0, [r8], #-14
    14c8:	0108000e 	tsteq	r8, lr
    14cc:	0ed45000 	cdpeq	0, 13, cr5, cr4, cr0, {0}
    14d0:	0ee80800 	cdpeq	8, 14, cr0, cr8, cr0, {0}
    14d4:	00040800 	andeq	r0, r4, r0, lsl #16
    14d8:	9f5001f3 	svcls	0x005001f3
    14dc:	08000ee8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, fp}
    14e0:	08000eec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sl, fp}
    14e4:	ec500001 	mrrc	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    14e8:	0008000e 	andeq	r0, r8, lr
    14ec:	0408000f 	streq	r0, [r8], #-15
    14f0:	5001f300 	andpl	pc, r1, r0, lsl #6
    14f4:	000f009f 	muleq	pc, pc, r0	; <UNPREDICTABLE>
    14f8:	000f0208 	andeq	r0, pc, r8, lsl #4
    14fc:	50000108 	andpl	r0, r0, r8, lsl #2
    1500:	08000f02 	stmdaeq	r0, {r1, r8, r9, sl, fp}
    1504:	08000f14 	stmdaeq	r0, {r2, r4, r8, r9, sl, fp}
    1508:	01f30004 	mvnseq	r0, r4
    150c:	0f149f50 	svceq	0x00149f50
    1510:	0f180800 	svceq	0x00180800
    1514:	00010800 	andeq	r0, r1, r0, lsl #16
    1518:	000f1850 	andeq	r1, pc, r0, asr r8	; <UNPREDICTABLE>
    151c:	000f4c08 	andeq	r4, pc, r8, lsl #24
    1520:	f3000408 	vshl.u8	d0, d8, d0
    1524:	009f5001 	addseq	r5, pc, r1
    1528:	00000000 	andeq	r0, r0, r0
    152c:	4c000000 	stcmi	0, cr0, [r0], {-0}
    1530:	6608000f 	strvs	r0, [r8], -pc
    1534:	0108000f 	tsteq	r8, pc
    1538:	0f665000 	svceq	0x00665000
    153c:	10060800 	andne	r0, r6, r0, lsl #16
    1540:	00010800 	andeq	r0, r1, r0, lsl #16
    1544:	00100654 	andseq	r0, r0, r4, asr r6
    1548:	00101008 	andseq	r1, r0, r8
    154c:	f3000408 	vshl.u8	d0, d8, d0
    1550:	009f5001 	addseq	r5, pc, r1
    1554:	00000000 	andeq	r0, r0, r0
    1558:	4c000000 	stcmi	0, cr0, [r0], {-0}
    155c:	5208000f 	andpl	r0, r8, #15
    1560:	0108000f 	tsteq	r8, pc
    1564:	0f525100 	svceq	0x00525100
    1568:	0fc60800 	svceq	0x00c60800
    156c:	00010800 	andeq	r0, r1, r0, lsl #16
    1570:	000fc655 	andeq	ip, pc, r5, asr r6	; <UNPREDICTABLE>
    1574:	000fec08 	andeq	lr, pc, r8, lsl #24
    1578:	f3000408 	vshl.u8	d0, d8, d0
    157c:	ec9f5101 	ldfs	f5, [pc], {1}
    1580:	f008000f 			; <UNDEFINED> instruction: 0xf008000f
    1584:	0108000f 	tsteq	r8, pc
    1588:	0ff05500 	svceq	0x00f05500
    158c:	10100800 	andsne	r0, r0, r0, lsl #16
    1590:	00040800 	andeq	r0, r4, r0, lsl #16
    1594:	9f5101f3 	svcls	0x005101f3
	...
    15a0:	08000f4c 	stmdaeq	r0, {r2, r3, r6, r8, r9, sl, fp}
    15a4:	08000f5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sl, fp}
    15a8:	9f300002 	svcls	0x00300002
    15ac:	08000f5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sl, fp}
    15b0:	08000f62 	stmdaeq	r0, {r1, r5, r6, r8, r9, sl, fp}
    15b4:	62510001 	subsvs	r0, r1, #1
    15b8:	6408000f 	strvs	r0, [r8], #-15
    15bc:	0c08000f 	stceq	0, cr0, [r8], {15}
    15c0:	94067500 	strls	r7, [r6], #-1280	; 0x500
    15c4:	ffff0a02 			; <UNDEFINED> instruction: 0xffff0a02
    15c8:	2100711a 	tstcs	r0, sl, lsl r1
    15cc:	000f649f 	muleq	pc, pc, r4	; <UNPREDICTABLE>
    15d0:	000f6a08 	andeq	r6, pc, r8, lsl #20
    15d4:	51000108 	tstpl	r0, r8, lsl #2
    15d8:	08000f6e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, r9, sl, fp}
    15dc:	08000f74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, fp}
    15e0:	78510001 	ldmdavc	r1, {r0}^
    15e4:	7e08000f 	cdpvc	0, 0, cr0, cr8, cr15, {0}
    15e8:	1608000f 	strne	r0, [r8], -pc
    15ec:	94087500 	strls	r7, [r8], #-1280	; 0x500
    15f0:	94047502 	strls	r7, [r4], #-1282	; 0x502
    15f4:	0a752102 	beq	1d49a04 <_Min_Stack_Size+0x1d49604>
    15f8:	0a210294 	beq	842050 <_Min_Stack_Size+0x841c50>
    15fc:	711affff 			; <UNDEFINED> instruction: 0x711affff
    1600:	829f2100 	addshi	r2, pc, #0, 2
    1604:	8608000f 	strhi	r0, [r8], -pc
    1608:	0108000f 	tsteq	r8, pc
    160c:	0f865300 	svceq	0x00865300
    1610:	0f880800 	svceq	0x00880800
    1614:	000c0800 	andeq	r0, ip, r0, lsl #16
    1618:	02940c75 	addseq	r0, r4, #29952	; 0x7500
    161c:	1affff0a 	bne	124c <_Min_Stack_Size+0xe4c>
    1620:	9f210073 	svcls	0x00210073
    1624:	08000fc8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl, fp}
    1628:	08000fd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, fp}
    162c:	00730005 	rsbseq	r0, r3, r5
    1630:	d49f2434 	ldrle	r2, [pc], #1076	; 1638 <_Min_Stack_Size+0x1238>
    1634:	e608000f 	str	r0, [r8], -pc
    1638:	0108000f 	tsteq	r8, pc
    163c:	0ff05300 	svceq	0x00f05300
    1640:	10000800 	andne	r0, r0, r0, lsl #16
    1644:	00010800 	andeq	r0, r1, r0, lsl #16
    1648:	00000053 	andeq	r0, r0, r3, asr r0
    164c:	00000000 	andeq	r0, r0, r0
    1650:	000f4c00 	andeq	r4, pc, r0, lsl #24
    1654:	000fa208 	andeq	sl, pc, r8, lsl #4
    1658:	30000208 	andcc	r0, r0, r8, lsl #4
    165c:	000fa29f 	muleq	pc, pc, r2	; <UNPREDICTABLE>
    1660:	000fb008 	andeq	fp, pc, r8
    1664:	53000108 	movwpl	r0, #264	; 0x108
    1668:	08000fec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, fp}
    166c:	08000fee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, r9, sl, fp}
    1670:	9f300002 	svcls	0x00300002
    1674:	08000fee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, r9, sl, fp}
    1678:	08000ff0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
    167c:	00530001 	subseq	r0, r3, r1
    1680:	00000000 	andeq	r0, r0, r0
    1684:	4c000000 	stcmi	0, cr0, [r0], {-0}
    1688:	be08000f 	cdplt	0, 0, cr0, cr8, cr15, {0}
    168c:	0208000f 	andeq	r0, r8, #15
    1690:	be9f3000 	cdplt	0, 9, cr3, cr15, cr0, {0}
    1694:	d008000f 	andle	r0, r8, pc
    1698:	0108000f 	tsteq	r8, pc
    169c:	0fec5200 	svceq	0x00ec5200
    16a0:	0ff00800 	svceq	0x00f00800
    16a4:	00020800 	andeq	r0, r2, r0, lsl #16
    16a8:	00009f30 	andeq	r9, r0, r0, lsr pc
    16ac:	00000000 	andeq	r0, r0, r0
    16b0:	0f4c0000 	svceq	0x004c0000
    16b4:	0fd00800 	svceq	0x00d00800
    16b8:	00020800 	andeq	r0, r2, r0, lsl #16
    16bc:	0fd09f30 	svceq	0x00d09f30
    16c0:	0fd80800 	svceq	0x00d80800
    16c4:	00010800 	andeq	r0, r1, r0, lsl #16
    16c8:	000fec52 	andeq	lr, pc, r2, asr ip	; <UNPREDICTABLE>
    16cc:	000ff008 	andeq	pc, pc, r8
    16d0:	30000208 	andcc	r0, r0, r8, lsl #4
    16d4:	000ff09f 	muleq	pc, pc, r0	; <UNPREDICTABLE>
    16d8:	000ff208 	andeq	pc, pc, r8, lsl #4
    16dc:	52000108 	andpl	r0, r0, #8, 2
	...
    16e8:	08001028 	stmdaeq	r0, {r3, r5, ip}
    16ec:	08001034 	stmdaeq	r0, {r2, r4, r5, ip}
    16f0:	34510001 	ldrbcc	r0, [r1], #-1
    16f4:	4a080010 	bmi	20173c <_Min_Stack_Size+0x20133c>
    16f8:	04080010 	streq	r0, [r8], #-16
    16fc:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1700:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1704:	00000000 	andeq	r0, r0, r0
    1708:	00102800 	andseq	r2, r0, r0, lsl #16
    170c:	00103c08 	andseq	r3, r0, r8, lsl #24
    1710:	30000208 	andcc	r0, r0, r8, lsl #4
    1714:	00103c9f 	mulseq	r0, pc, ip	; <UNPREDICTABLE>
    1718:	00104208 	andseq	r4, r0, r8, lsl #4
    171c:	53000108 	movwpl	r0, #264	; 0x108
    1720:	08001042 	stmdaeq	r0, {r1, r6, ip}
    1724:	08001044 	stmdaeq	r0, {r2, r6, ip}
    1728:	01f30025 	mvnseq	r0, r5, lsr #32
    172c:	94022351 	strls	r2, [r2], #-849	; 0x351
    1730:	5101f302 	tstpl	r1, r2, lsl #6
    1734:	f3210294 	vqsub.u32	d0, d17, d4
    1738:	04235101 	strteq	r5, [r3], #-257	; 0x101
    173c:	f3210294 	vqsub.u32	d0, d17, d4
    1740:	06235101 	strteq	r5, [r3], -r1, lsl #2
    1744:	0a210294 	beq	84219c <_Min_Stack_Size+0x841d9c>
    1748:	731affff 	tstvc	sl, #1020	; 0x3fc
    174c:	009f2100 	addseq	r2, pc, r0, lsl #2
    1750:	00000000 	andeq	r0, r0, r0
    1754:	74000000 	strvc	r0, [r0], #-0
    1758:	82080010 	andhi	r0, r8, #16
    175c:	01080010 	tsteq	r8, r0, lsl r0
    1760:	10825100 	addne	r5, r2, r0, lsl #2
    1764:	10860800 	addne	r0, r6, r0, lsl #16
    1768:	00040800 	andeq	r0, r4, r0, lsl #16
    176c:	9f5101f3 	svcls	0x005101f3
	...
    1778:	080010c0 	stmdaeq	r0, {r6, r7, ip}
    177c:	080010c4 	stmdaeq	r0, {r2, r6, r7, ip}
    1780:	c4510001 	ldrbgt	r0, [r1], #-1
    1784:	c8080010 	stmdagt	r8, {r4}
    1788:	04080010 	streq	r0, [r8], #-16
    178c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1790:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1794:	00000000 	andeq	r0, r0, r0
    1798:	0010c800 	andseq	ip, r0, r0, lsl #16
    179c:	0010ca08 	andseq	ip, r0, r8, lsl #20
    17a0:	50000108 	andpl	r0, r0, r8, lsl #2
    17a4:	080010ca 	stmdaeq	r0, {r1, r3, r6, r7, ip}
    17a8:	080010d0 	stmdaeq	r0, {r4, r6, r7, ip}
    17ac:	01f30004 	mvnseq	r0, r4
    17b0:	00009f50 	andeq	r9, r0, r0, asr pc
    17b4:	00000000 	andeq	r0, r0, r0
    17b8:	10d00000 	sbcsne	r0, r0, r0
    17bc:	10e20800 	rscne	r0, r2, r0, lsl #16
    17c0:	00010800 	andeq	r0, r1, r0, lsl #16
    17c4:	0010e251 	andseq	lr, r0, r1, asr r2
    17c8:	0010e608 	andseq	lr, r0, r8, lsl #12
    17cc:	f3000408 	vshl.u8	d0, d8, d0
    17d0:	009f5101 	addseq	r5, pc, r1, lsl #2
    17d4:	00000000 	andeq	r0, r0, r0
    17d8:	04000000 	streq	r0, [r0], #-0
    17dc:	16080011 			; <UNDEFINED> instruction: 0x16080011
    17e0:	01080011 	tsteq	r8, r1, lsl r0
    17e4:	11165100 	tstne	r6, r0, lsl #2
    17e8:	111a0800 	tstne	sl, r0, lsl #16
    17ec:	00040800 	andeq	r0, r4, r0, lsl #16
    17f0:	9f5101f3 	svcls	0x005101f3
	...
    17fc:	0800111c 	stmdaeq	r0, {r2, r3, r4, r8, ip}
    1800:	0800112e 	stmdaeq	r0, {r1, r2, r3, r5, r8, ip}
    1804:	2e510001 	cdpcs	0, 5, cr0, cr1, cr1, {0}
    1808:	32080011 	andcc	r0, r8, #17
    180c:	04080011 	streq	r0, [r8], #-17
    1810:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1814:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1818:	00000000 	andeq	r0, r0, r0
    181c:	00117800 	andseq	r7, r1, r0, lsl #16
    1820:	00118608 	andseq	r8, r1, r8, lsl #12
    1824:	51000108 	tstpl	r0, r8, lsl #2
    1828:	08001186 	stmdaeq	r0, {r1, r2, r7, r8, ip}
    182c:	0800118a 	stmdaeq	r0, {r1, r3, r7, r8, ip}
    1830:	01f30004 	mvnseq	r0, r4
    1834:	00009f51 	andeq	r9, r0, r1, asr pc
    1838:	00000000 	andeq	r0, r0, r0
    183c:	11c40000 	bicne	r0, r4, r0
    1840:	11d60800 	bicsne	r0, r6, r0, lsl #16
    1844:	00010800 	andeq	r0, r1, r0, lsl #16
    1848:	0011d651 	andseq	sp, r1, r1, asr r6
    184c:	0011da08 	andseq	sp, r1, r8, lsl #20
    1850:	f3000408 	vshl.u8	d0, d8, d0
    1854:	009f5101 	addseq	r5, pc, r1, lsl #2
    1858:	00000000 	andeq	r0, r0, r0
    185c:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    1860:	02080011 	andeq	r0, r8, #17
    1864:	01080012 	tsteq	r8, r2, lsl r0
    1868:	12025100 	andne	r5, r2, #0, 2
    186c:	12060800 	andne	r0, r6, #0, 16
    1870:	00040800 	andeq	r0, r4, r0, lsl #16
    1874:	9f5101f3 	svcls	0x005101f3
    1878:	08001206 	stmdaeq	r0, {r1, r2, r9, ip}
    187c:	08001208 	stmdaeq	r0, {r3, r9, ip}
    1880:	08510001 	ldmdaeq	r1, {r0}^
    1884:	0c080012 	stceq	0, cr0, [r8], {18}
    1888:	04080012 	streq	r0, [r8], #-18
    188c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1890:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1894:	00000000 	andeq	r0, r0, r0
    1898:	00120c00 	andseq	r0, r2, r0, lsl #24
    189c:	00122608 	andseq	r2, r2, r8, lsl #12
    18a0:	50000108 	andpl	r0, r0, r8, lsl #2
    18a4:	08001226 	stmdaeq	r0, {r1, r2, r5, r9, ip}
    18a8:	08001242 	stmdaeq	r0, {r1, r6, r9, ip}
    18ac:	01f30004 	mvnseq	r0, r4
    18b0:	12429f50 	subne	r9, r2, #80, 30	; 0x140
    18b4:	12440800 	subne	r0, r4, #0, 16
    18b8:	00010800 	andeq	r0, r1, r0, lsl #16
    18bc:	00124450 	andseq	r4, r2, r0, asr r4
    18c0:	00124608 	andseq	r4, r2, r8, lsl #12
    18c4:	70000308 	andvc	r0, r0, r8, lsl #6
    18c8:	00009f74 	andeq	r9, r0, r4, ror pc
    18cc:	00000000 	andeq	r0, r0, r0
    18d0:	120c0000 	andne	r0, ip, #0
    18d4:	12160800 	andsne	r0, r6, #0, 16
    18d8:	00010800 	andeq	r0, r1, r0, lsl #16
    18dc:	00121651 	andseq	r1, r2, r1, asr r6
    18e0:	00124608 	andseq	r4, r2, r8, lsl #12
    18e4:	f3000408 	vshl.u8	d0, d8, d0
    18e8:	009f5101 	addseq	r5, pc, r1, lsl #2
    18ec:	00000000 	andeq	r0, r0, r0
    18f0:	0c000000 	stceq	0, cr0, [r0], {-0}
    18f4:	18080012 	stmdane	r8, {r1, r4}
    18f8:	02080012 	andeq	r0, r8, #18
    18fc:	189f3000 	ldmne	pc, {ip, sp}	; <UNPREDICTABLE>
    1900:	46080012 			; <UNDEFINED> instruction: 0x46080012
    1904:	01080012 	tsteq	r8, r2, lsl r0
    1908:	00005100 	andeq	r5, r0, r0, lsl #2
    190c:	00000000 	andeq	r0, r0, r0
    1910:	120c0000 	andne	r0, ip, #0
    1914:	12180800 	andsne	r0, r8, #0, 16
    1918:	00020800 	andeq	r0, r2, r0, lsl #16
    191c:	00009f30 	andeq	r9, r0, r0, lsr pc
    1920:	00000000 	andeq	r0, r0, r0
    1924:	120c0000 	andne	r0, ip, #0
    1928:	121e0800 	andsne	r0, lr, #0, 16
    192c:	00020800 	andeq	r0, r2, r0, lsl #16
    1930:	121e9f30 	andsne	r9, lr, #48, 30	; 0xc0
    1934:	12300800 	eorsne	r0, r0, #0, 16
    1938:	00010800 	andeq	r0, r1, r0, lsl #16
    193c:	00123853 	andseq	r3, r2, r3, asr r8
    1940:	00123a08 	andseq	r3, r2, r8, lsl #20
    1944:	53000108 	movwpl	r0, #264	; 0x108
    1948:	08001242 	stmdaeq	r0, {r1, r6, r9, ip}
    194c:	08001246 	stmdaeq	r0, {r1, r2, r6, r9, ip}
    1950:	00530001 	subseq	r0, r3, r1
    1954:	00000000 	andeq	r0, r0, r0
    1958:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    195c:	52080012 	andpl	r0, r8, #18
    1960:	01080012 	tsteq	r8, r2, lsl r0
    1964:	12525000 	subsne	r5, r2, #0
    1968:	12540800 	subsne	r0, r4, #0, 16
    196c:	00040800 	andeq	r0, r4, r0, lsl #16
    1970:	9f5001f3 	svcls	0x005001f3
	...
    197c:	08001248 	stmdaeq	r0, {r3, r6, r9, ip}
    1980:	0800124a 	stmdaeq	r0, {r1, r3, r6, r9, ip}
    1984:	9f300002 	svcls	0x00300002
    1988:	0800124a 	stmdaeq	r0, {r1, r3, r6, r9, ip}
    198c:	08001254 	stmdaeq	r0, {r2, r4, r6, r9, ip}
    1990:	0071000a 	rsbseq	r0, r1, sl
    1994:	401a0073 	andsmi	r0, sl, r3, ror r0
    1998:	9f2e3024 	svcls	0x002e3024
	...
    19a4:	08001254 	stmdaeq	r0, {r2, r4, r6, r9, ip}
    19a8:	08001256 	stmdaeq	r0, {r1, r2, r4, r6, r9, ip}
    19ac:	56510001 	ldrbpl	r0, [r1], -r1
    19b0:	5c080012 	stcpl	0, cr0, [r8], {18}
    19b4:	04080012 	streq	r0, [r8], #-18
    19b8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    19bc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    19c0:	00000000 	andeq	r0, r0, r0
    19c4:	00125c00 	andseq	r5, r2, r0, lsl #24
    19c8:	00129208 	andseq	r9, r2, r8, lsl #4
    19cc:	50000108 	andpl	r0, r0, r8, lsl #2
    19d0:	08001292 	stmdaeq	r0, {r1, r4, r7, r9, ip}
    19d4:	08001298 	stmdaeq	r0, {r3, r4, r7, r9, ip}
    19d8:	01f30004 	mvnseq	r0, r4
    19dc:	12989f50 	addsne	r9, r8, #80, 30	; 0x140
    19e0:	129a0800 	addsne	r0, sl, #0, 16
    19e4:	00010800 	andeq	r0, r1, r0, lsl #16
    19e8:	00129a50 	andseq	r9, r2, r0, asr sl
    19ec:	0012a008 	andseq	sl, r2, r8
    19f0:	f3000408 	vshl.u8	d0, d8, d0
    19f4:	a09f5001 	addsge	r5, pc, r1
    19f8:	a8080012 	stmdage	r8, {r1, r4}
    19fc:	01080012 	tsteq	r8, r2, lsl r0
    1a00:	00005000 	andeq	r5, r0, r0
    1a04:	00000000 	andeq	r0, r0, r0
    1a08:	125c0000 	subsne	r0, ip, #0
    1a0c:	12840800 	addne	r0, r4, #0, 16
    1a10:	00010800 	andeq	r0, r1, r0, lsl #16
    1a14:	00128451 	andseq	r8, r2, r1, asr r4
    1a18:	00129808 	andseq	r9, r2, r8, lsl #16
    1a1c:	f3000408 	vshl.u8	d0, d8, d0
    1a20:	989f5101 	ldmls	pc, {r0, r8, ip, lr}	; <UNPREDICTABLE>
    1a24:	a8080012 	stmdage	r8, {r1, r4}
    1a28:	01080012 	tsteq	r8, r2, lsl r0
    1a2c:	00005100 	andeq	r5, r0, r0, lsl #2
    1a30:	00000000 	andeq	r0, r0, r0
    1a34:	125c0000 	subsne	r0, ip, #0
    1a38:	127c0800 	rsbsne	r0, ip, #0, 16
    1a3c:	00020800 	andeq	r0, r2, r0, lsl #16
    1a40:	127c9f30 	rsbsne	r9, ip, #48, 30	; 0xc0
    1a44:	12800800 	addne	r0, r0, #0, 16
    1a48:	000b0800 	andeq	r0, fp, r0, lsl #16
    1a4c:	38007131 	stmdacc	r0, {r0, r4, r5, r8, ip, sp, lr}
    1a50:	ffff0a25 			; <UNDEFINED> instruction: 0xffff0a25
    1a54:	809f241a 	addshi	r2, pc, sl, lsl r4	; <UNPREDICTABLE>
    1a58:	84080012 	strhi	r0, [r8], #-18
    1a5c:	12080012 	andne	r0, r8, #18
    1a60:	00713100 	rsbseq	r3, r1, r0, lsl #2
    1a64:	ff0a2538 			; <UNDEFINED> instruction: 0xff0a2538
    1a68:	72241aff 	eorvc	r1, r4, #1044480	; 0xff000
    1a6c:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    1a70:	989f1a1a 	ldmls	pc, {r1, r3, r4, r9, fp, ip}	; <UNPREDICTABLE>
    1a74:	a0080012 	andge	r0, r8, r2, lsl r0
    1a78:	12080012 	andne	r0, r8, #18
    1a7c:	00713100 	rsbseq	r3, r1, r0, lsl #2
    1a80:	ff0a2538 			; <UNDEFINED> instruction: 0xff0a2538
    1a84:	72241aff 	eorvc	r1, r4, #1044480	; 0xff000
    1a88:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    1a8c:	a09f1a1a 	addsge	r1, pc, sl, lsl sl	; <UNPREDICTABLE>
    1a90:	a8080012 	stmdage	r8, {r1, r4}
    1a94:	02080012 	andeq	r0, r8, #18
    1a98:	009f3000 	addseq	r3, pc, r0
    1a9c:	00000000 	andeq	r0, r0, r0
    1aa0:	5c000000 	stcpl	0, cr0, [r0], {-0}
    1aa4:	62080012 	andvs	r0, r8, #18
    1aa8:	02080012 	andeq	r0, r8, #18
    1aac:	629f3000 	addsvs	r3, pc, #0
    1ab0:	6e080012 	mcrvs	0, 0, r0, cr8, cr2, {0}
    1ab4:	09080012 	stmdbeq	r8, {r1, r4}
    1ab8:	4f007100 	svcmi	0x00007100
    1abc:	ffff0a1a 			; <UNDEFINED> instruction: 0xffff0a1a
    1ac0:	126e9f1a 	rsbne	r9, lr, #26, 30	; 0x68
    1ac4:	127c0800 	rsbsne	r0, ip, #0, 16
    1ac8:	00010800 	andeq	r0, r1, r0, lsl #16
    1acc:	00127c52 	andseq	r7, r2, r2, asr ip
    1ad0:	00128608 	andseq	r8, r2, r8, lsl #12
    1ad4:	53000108 	movwpl	r0, #264	; 0x108
    1ad8:	08001298 	stmdaeq	r0, {r3, r4, r7, r9, ip}
    1adc:	080012a0 	stmdaeq	r0, {r5, r7, r9, ip}
    1ae0:	a0530001 	subsge	r0, r3, r1
    1ae4:	a6080012 			; <UNDEFINED> instruction: 0xa6080012
    1ae8:	01080012 	tsteq	r8, r2, lsl r0
    1aec:	12a65200 	adcne	r5, r6, #0, 4
    1af0:	12a80800 	adcne	r0, r8, #0, 16
    1af4:	00010800 	andeq	r0, r1, r0, lsl #16
    1af8:	00000053 	andeq	r0, r0, r3, asr r0
    1afc:	00000000 	andeq	r0, r0, r0
    1b00:	00125c00 	andseq	r5, r2, r0, lsl #24
    1b04:	00126208 	andseq	r6, r2, r8, lsl #4
    1b08:	30000208 	andcc	r0, r0, r8, lsl #4
    1b0c:	0012629f 	mulseq	r2, pc, r2	; <UNPREDICTABLE>
    1b10:	00127608 	andseq	r7, r2, r8, lsl #12
    1b14:	53000108 	movwpl	r0, #264	; 0x108
    1b18:	08001276 	stmdaeq	r0, {r1, r2, r4, r5, r6, r9, ip}
    1b1c:	08001284 	stmdaeq	r0, {r2, r7, r9, ip}
    1b20:	00710008 	rsbseq	r0, r1, r8
    1b24:	3124fc09 	msrcc	CPSR_s, r9, lsl #24
    1b28:	12989f25 	addsne	r9, r8, #37, 30	; 0x94
    1b2c:	12a00800 	adcne	r0, r0, #0, 16
    1b30:	00080800 	andeq	r0, r8, r0, lsl #16
    1b34:	fc090071 	stc2	0, cr0, [r9], {113}	; 0x71
    1b38:	9f253124 	svcls	0x00253124
    1b3c:	080012a0 	stmdaeq	r0, {r5, r7, r9, ip}
    1b40:	080012a2 	stmdaeq	r0, {r1, r5, r7, r9, ip}
    1b44:	a2530001 	subsge	r0, r3, #1
    1b48:	a8080012 	stmdage	r8, {r1, r4}
    1b4c:	08080012 	stmdaeq	r8, {r1, r4}
    1b50:	09007100 	stmdbeq	r0, {r8, ip, sp, lr}
    1b54:	253124fc 	ldrcs	r2, [r1, #-1276]!	; 0x4fc
    1b58:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1b5c:	00000000 	andeq	r0, r0, r0
    1b60:	00125c00 	andseq	r5, r2, r0, lsl #24
    1b64:	00129208 	andseq	r9, r2, r8, lsl #4
    1b68:	30000208 	andcc	r0, r0, r8, lsl #4
    1b6c:	0012929f 	mulseq	r2, pc, r2	; <UNPREDICTABLE>
    1b70:	00129808 	andseq	r9, r2, r8, lsl #16
    1b74:	50000108 	andpl	r0, r0, r8, lsl #2
    1b78:	08001298 	stmdaeq	r0, {r3, r4, r7, r9, ip}
    1b7c:	0800129a 	stmdaeq	r0, {r1, r3, r4, r7, r9, ip}
    1b80:	9f300002 	svcls	0x00300002
    1b84:	0800129a 	stmdaeq	r0, {r1, r3, r4, r7, r9, ip}
    1b88:	080012a0 	stmdaeq	r0, {r5, r7, r9, ip}
    1b8c:	a0500001 	subsge	r0, r0, r1
    1b90:	a8080012 	stmdage	r8, {r1, r4}
    1b94:	02080012 	andeq	r0, r8, #18
    1b98:	009f3000 	addseq	r3, pc, r0
    1b9c:	00000000 	andeq	r0, r0, r0
    1ba0:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    1ba4:	aa080012 	bge	201bf4 <_Min_Stack_Size+0x2017f4>
    1ba8:	01080012 	tsteq	r8, r2, lsl r0
    1bac:	12aa5100 	adcne	r5, sl, #0, 2
    1bb0:	12b80800 	adcsne	r0, r8, #0, 16
    1bb4:	00040800 	andeq	r0, r4, r0, lsl #16
    1bb8:	9f5101f3 	svcls	0x005101f3
	...
    1bc4:	080012a8 	stmdaeq	r0, {r3, r5, r7, r9, ip}
    1bc8:	080012aa 	stmdaeq	r0, {r1, r3, r5, r7, r9, ip}
    1bcc:	00710005 	rsbseq	r0, r1, r5
    1bd0:	aa9f2538 	bge	fe7cb0b8 <_estack+0xde79b0b8>
    1bd4:	b8080012 	stmdalt	r8, {r1, r4}
    1bd8:	06080012 			; <UNDEFINED> instruction: 0x06080012
    1bdc:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1be0:	009f2538 	addseq	r2, pc, r8, lsr r5	; <UNPREDICTABLE>
    1be4:	00000000 	andeq	r0, r0, r0
    1be8:	ec000000 	stc	0, cr0, [r0], {-0}
    1bec:	14080012 	strne	r0, [r8], #-18
    1bf0:	01080013 	tsteq	r8, r3, lsl r0
    1bf4:	13145000 	tstne	r4, #0
    1bf8:	131a0800 	tstne	sl, #0, 16
    1bfc:	00040800 	andeq	r0, r4, r0, lsl #16
    1c00:	9f5001f3 	svcls	0x005001f3
	...
    1c0c:	080012ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, ip}
    1c10:	080012fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, ip}
    1c14:	fc510001 	mrrc2	0, 0, r0, r1, cr1
    1c18:	1a080012 	bne	201c68 <_Min_Stack_Size+0x201868>
    1c1c:	04080013 	streq	r0, [r8], #-19
    1c20:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1c24:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1c28:	00000000 	andeq	r0, r0, r0
    1c2c:	0012ec00 	andseq	lr, r2, r0, lsl #24
    1c30:	00130008 	andseq	r0, r3, r8
    1c34:	30000208 	andcc	r0, r0, r8, lsl #4
    1c38:	0013009f 	mulseq	r3, pc, r0	; <UNPREDICTABLE>
    1c3c:	00130608 	andseq	r0, r3, r8, lsl #12
    1c40:	3f000508 	svccc	0x00000508
    1c44:	9f240071 	svcls	0x00240071
    1c48:	08001306 	stmdaeq	r0, {r1, r2, r8, r9, ip}
    1c4c:	0800130a 	stmdaeq	r0, {r1, r3, r8, r9, ip}
    1c50:	0a520001 	beq	1481c5c <_Min_Stack_Size+0x148185c>
    1c54:	1a080013 	bne	201ca8 <_Min_Stack_Size+0x2018a8>
    1c58:	05080013 	streq	r0, [r8, #-19]
    1c5c:	00713f00 	rsbseq	r3, r1, r0, lsl #30
    1c60:	00009f24 	andeq	r9, r0, r4, lsr #30
    1c64:	00000000 	andeq	r0, r0, r0
    1c68:	13340000 	teqne	r4, #0
    1c6c:	13380800 	teqne	r8, #0, 16
    1c70:	00020800 	andeq	r0, r2, r0, lsl #16
    1c74:	13389f30 	teqne	r8, #48, 30	; 0xc0
    1c78:	133c0800 	teqne	ip, #0, 16
    1c7c:	00090800 	andeq	r0, r9, r0, lsl #16
    1c80:	000a0070 	andeq	r0, sl, r0, ror r0
    1c84:	2e301a01 	vaddcs.f32	s2, s0, s2
    1c88:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1c8c:	00000000 	andeq	r0, r0, r0
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000004c 	andeq	r0, r0, ip, asr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	080001c0 	stmdaeq	r0, {r6, r7, r8}
  14:	00000016 	andeq	r0, r0, r6, lsl r0
  18:	080001d8 	stmdaeq	r0, {r3, r4, r6, r7, r8}
  1c:	00000044 	andeq	r0, r0, r4, asr #32
  20:	0800021c 	stmdaeq	r0, {r2, r3, r4, r9}
  24:	00000038 	andeq	r0, r0, r8, lsr r0
  28:	08000254 	stmdaeq	r0, {r2, r4, r6, r9}
  2c:	00000010 	andeq	r0, r0, r0, lsl r0
  30:	08000264 	stmdaeq	r0, {r2, r5, r6, r9}
  34:	0000003c 	andeq	r0, r0, ip, lsr r0
  38:	080002a0 	stmdaeq	r0, {r5, r7, r9}
  3c:	0000002c 	andeq	r0, r0, ip, lsr #32
  40:	080002cc 	stmdaeq	r0, {r2, r3, r6, r7, r9}
  44:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
  50:	0000005c 	andeq	r0, r0, ip, asr r0
  54:	08410002 	stmdaeq	r1, {r1}^
  58:	00040000 	andeq	r0, r4, r0
  5c:	00000000 	andeq	r0, r0, r0
  60:	0800037c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9}
  64:	00000002 	andeq	r0, r0, r2
  68:	08000380 	stmdaeq	r0, {r7, r8, r9}
  6c:	00000002 	andeq	r0, r0, r2
  70:	08000384 	stmdaeq	r0, {r2, r7, r8, r9}
  74:	00000002 	andeq	r0, r0, r2
  78:	08000388 	stmdaeq	r0, {r3, r7, r8, r9}
  7c:	00000002 	andeq	r0, r0, r2
  80:	0800038c 	stmdaeq	r0, {r2, r3, r7, r8, r9}
  84:	00000002 	andeq	r0, r0, r2
  88:	08000390 	stmdaeq	r0, {r4, r7, r8, r9}
  8c:	00000002 	andeq	r0, r0, r2
  90:	08000394 	stmdaeq	r0, {r2, r4, r7, r8, r9}
  94:	00000002 	andeq	r0, r0, r2
  98:	08000398 	stmdaeq	r0, {r3, r4, r7, r8, r9}
  9c:	00000002 	andeq	r0, r0, r2
  a0:	0800039c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9}
  a4:	00000002 	andeq	r0, r0, r2
	...
  b0:	00000024 	andeq	r0, r0, r4, lsr #32
  b4:	09740002 	ldmdbeq	r4!, {r1}^
  b8:	00040000 	andeq	r0, r4, r0
  bc:	00000000 	andeq	r0, r0, r0
  c0:	080003a0 	stmdaeq	r0, {r5, r7, r8, r9}
  c4:	00000110 	andeq	r0, r0, r0, lsl r1
  c8:	080004b0 	stmdaeq	r0, {r4, r5, r7, sl}
  cc:	00000070 	andeq	r0, r0, r0, ror r0
	...
  d8:	00000024 	andeq	r0, r0, r4, lsr #32
  dc:	0f520002 	svceq	0x00520002
  e0:	00040000 	andeq	r0, r4, r0
  e4:	00000000 	andeq	r0, r0, r0
  e8:	08000520 	stmdaeq	r0, {r5, r8, sl}
  ec:	0000004c 	andeq	r0, r0, ip, asr #32
  f0:	0800056c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sl}
  f4:	00000004 	andeq	r0, r0, r4
	...
 100:	0000003c 	andeq	r0, r0, ip, lsr r0
 104:	0fd70002 	svceq	0x00d70002
 108:	00040000 	andeq	r0, r4, r0
 10c:	00000000 	andeq	r0, r0, r0
 110:	08000570 	stmdaeq	r0, {r4, r5, r6, r8, sl}
 114:	00000014 	andeq	r0, r0, r4, lsl r0
 118:	08000584 	stmdaeq	r0, {r2, r7, r8, sl}
 11c:	00000078 	andeq	r0, r0, r8, ror r0
 120:	080005fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sl}
 124:	00000014 	andeq	r0, r0, r4, lsl r0
 128:	08000610 	stmdaeq	r0, {r4, r9, sl}
 12c:	00000018 	andeq	r0, r0, r8, lsl r0
 130:	08000628 	stmdaeq	r0, {r3, r5, r9, sl}
 134:	00000018 	andeq	r0, r0, r8, lsl r0
	...
 140:	00000084 	andeq	r0, r0, r4, lsl #1
 144:	151e0002 	ldrne	r0, [lr, #-2]
 148:	00040000 	andeq	r0, r4, r0
 14c:	00000000 	andeq	r0, r0, r0
 150:	08000640 	stmdaeq	r0, {r6, r9, sl}
 154:	0000015c 	andeq	r0, r0, ip, asr r1
 158:	0800079c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl}
 15c:	000000bc 	strheq	r0, [r0], -ip
 160:	08000858 	stmdaeq	r0, {r3, r4, r6, fp}
 164:	00000012 	andeq	r0, r0, r2, lsl r0
 168:	0800086c 	stmdaeq	r0, {r2, r3, r5, r6, fp}
 16c:	00000024 	andeq	r0, r0, r4, lsr #32
 170:	08000890 	stmdaeq	r0, {r4, r7, fp}
 174:	0000000c 	andeq	r0, r0, ip
 178:	0800089c 	stmdaeq	r0, {r2, r3, r4, r7, fp}
 17c:	00000006 	andeq	r0, r0, r6
 180:	080008a4 	stmdaeq	r0, {r2, r5, r7, fp}
 184:	0000000c 	andeq	r0, r0, ip
 188:	080008b0 	stmdaeq	r0, {r4, r5, r7, fp}
 18c:	00000006 	andeq	r0, r0, r6
 190:	080008b8 	stmdaeq	r0, {r3, r4, r5, r7, fp}
 194:	00000004 	andeq	r0, r0, r4
 198:	080008bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, fp}
 19c:	00000004 	andeq	r0, r0, r4
 1a0:	080008c0 	stmdaeq	r0, {r6, r7, fp}
 1a4:	0000000a 	andeq	r0, r0, sl
 1a8:	080008cc 	stmdaeq	r0, {r2, r3, r6, r7, fp}
 1ac:	00000004 	andeq	r0, r0, r4
 1b0:	080008d0 	stmdaeq	r0, {r4, r6, r7, fp}
 1b4:	00000008 	andeq	r0, r0, r8
 1b8:	080008d8 	stmdaeq	r0, {r3, r4, r6, r7, fp}
 1bc:	00000028 	andeq	r0, r0, r8, lsr #32
	...
 1c8:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
 1cc:	1d630002 	stclne	0, cr0, [r3, #-8]!
 1d0:	00040000 	andeq	r0, r4, r0
 1d4:	00000000 	andeq	r0, r0, r0
 1d8:	08000900 	stmdaeq	r0, {r8, fp}
 1dc:	00000050 	andeq	r0, r0, r0, asr r0
 1e0:	08000950 	stmdaeq	r0, {r4, r6, r8, fp}
 1e4:	00000010 	andeq	r0, r0, r0, lsl r0
 1e8:	08000960 	stmdaeq	r0, {r5, r6, r8, fp}
 1ec:	00000038 	andeq	r0, r0, r8, lsr r0
 1f0:	08000998 	stmdaeq	r0, {r3, r4, r7, r8, fp}
 1f4:	00000014 	andeq	r0, r0, r4, lsl r0
 1f8:	080009ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, fp}
 1fc:	0000000c 	andeq	r0, r0, ip
 200:	080009b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, fp}
 204:	00000020 	andeq	r0, r0, r0, lsr #32
 208:	080009d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, fp}
 20c:	0000000c 	andeq	r0, r0, ip
 210:	080009e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, fp}
 214:	00000024 	andeq	r0, r0, r4, lsr #32
 218:	08000a08 	stmdaeq	r0, {r3, r9, fp}
 21c:	0000000c 	andeq	r0, r0, ip
 220:	08000a14 	stmdaeq	r0, {r2, r4, r9, fp}
 224:	00000018 	andeq	r0, r0, r8, lsl r0
 228:	08000a2c 	stmdaeq	r0, {r2, r3, r5, r9, fp}
 22c:	0000000c 	andeq	r0, r0, ip
 230:	08000a38 	stmdaeq	r0, {r3, r4, r5, r9, fp}
 234:	00000018 	andeq	r0, r0, r8, lsl r0
 238:	08000a50 	stmdaeq	r0, {r4, r6, r9, fp}
 23c:	0000000c 	andeq	r0, r0, ip
 240:	08000a5c 	stmdaeq	r0, {r2, r3, r4, r6, r9, fp}
 244:	0000000c 	andeq	r0, r0, ip
 248:	08000a68 	stmdaeq	r0, {r3, r5, r6, r9, fp}
 24c:	00000014 	andeq	r0, r0, r4, lsl r0
 250:	08000a7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, fp}
 254:	00000014 	andeq	r0, r0, r4, lsl r0
 258:	08000a90 	stmdaeq	r0, {r4, r7, r9, fp}
 25c:	00000014 	andeq	r0, r0, r4, lsl r0
 260:	08000aa4 	stmdaeq	r0, {r2, r5, r7, r9, fp}
 264:	00000010 	andeq	r0, r0, r0, lsl r0
 268:	08000ab4 	stmdaeq	r0, {r2, r4, r5, r7, r9, fp}
 26c:	00000014 	andeq	r0, r0, r4, lsl r0
 270:	08000ac8 	stmdaeq	r0, {r3, r6, r7, r9, fp}
 274:	00000014 	andeq	r0, r0, r4, lsl r0
 278:	08000adc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, fp}
 27c:	00000014 	andeq	r0, r0, r4, lsl r0
 280:	08000af0 	stmdaeq	r0, {r4, r5, r6, r7, r9, fp}
 284:	00000090 	muleq	r0, r0, r0
 288:	08000b80 	stmdaeq	r0, {r7, r8, r9, fp}
 28c:	00000030 	andeq	r0, r0, r0, lsr r0
 290:	08000bb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, fp}
 294:	0000000c 	andeq	r0, r0, ip
 298:	08000bbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, fp}
 29c:	0000000c 	andeq	r0, r0, ip
 2a0:	08000bc8 	stmdaeq	r0, {r3, r6, r7, r8, r9, fp}
 2a4:	0000000c 	andeq	r0, r0, ip
 2a8:	08000bd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, fp}
 2ac:	00000018 	andeq	r0, r0, r8, lsl r0
 2b0:	08000bec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, fp}
 2b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2b8:	08000c08 	stmdaeq	r0, {r3, sl, fp}
 2bc:	00000018 	andeq	r0, r0, r8, lsl r0
 2c0:	08000c20 	stmdaeq	r0, {r5, sl, fp}
 2c4:	00000018 	andeq	r0, r0, r8, lsl r0
 2c8:	08000c38 	stmdaeq	r0, {r3, r4, r5, sl, fp}
 2cc:	00000018 	andeq	r0, r0, r8, lsl r0
 2d0:	08000c50 	stmdaeq	r0, {r4, r6, sl, fp}
 2d4:	0000000c 	andeq	r0, r0, ip
 2d8:	08000c5c 	stmdaeq	r0, {r2, r3, r4, r6, sl, fp}
 2dc:	00000018 	andeq	r0, r0, r8, lsl r0
 2e0:	08000c74 	stmdaeq	r0, {r2, r4, r5, r6, sl, fp}
 2e4:	00000018 	andeq	r0, r0, r8, lsl r0
 2e8:	08000c8c 	stmdaeq	r0, {r2, r3, r7, sl, fp}
 2ec:	00000018 	andeq	r0, r0, r8, lsl r0
 2f0:	08000ca4 	stmdaeq	r0, {r2, r5, r7, sl, fp}
 2f4:	00000018 	andeq	r0, r0, r8, lsl r0
 2f8:	08000cbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp}
 2fc:	00000018 	andeq	r0, r0, r8, lsl r0
 300:	08000cd4 	stmdaeq	r0, {r2, r4, r6, r7, sl, fp}
 304:	00000018 	andeq	r0, r0, r8, lsl r0
 308:	08000cec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, fp}
 30c:	00000018 	andeq	r0, r0, r8, lsl r0
 310:	08000d04 	stmdaeq	r0, {r2, r8, sl, fp}
 314:	00000018 	andeq	r0, r0, r8, lsl r0
 318:	08000d1c 	stmdaeq	r0, {r2, r3, r4, r8, sl, fp}
 31c:	00000018 	andeq	r0, r0, r8, lsl r0
 320:	08000d34 	stmdaeq	r0, {r2, r4, r5, r8, sl, fp}
 324:	00000018 	andeq	r0, r0, r8, lsl r0
 328:	08000d4c 	stmdaeq	r0, {r2, r3, r6, r8, sl, fp}
 32c:	00000018 	andeq	r0, r0, r8, lsl r0
 330:	08000d64 	stmdaeq	r0, {r2, r5, r6, r8, sl, fp}
 334:	00000018 	andeq	r0, r0, r8, lsl r0
 338:	08000d7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, sl, fp}
 33c:	00000018 	andeq	r0, r0, r8, lsl r0
 340:	08000d94 	stmdaeq	r0, {r2, r4, r7, r8, sl, fp}
 344:	00000018 	andeq	r0, r0, r8, lsl r0
 348:	08000dac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, fp}
 34c:	00000018 	andeq	r0, r0, r8, lsl r0
 350:	08000dc4 	stmdaeq	r0, {r2, r6, r7, r8, sl, fp}
 354:	00000018 	andeq	r0, r0, r8, lsl r0
 358:	08000ddc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl, fp}
 35c:	00000034 	andeq	r0, r0, r4, lsr r0
 360:	08000e10 	stmdaeq	r0, {r4, r9, sl, fp}
 364:	00000010 	andeq	r0, r0, r0, lsl r0
 368:	08000e20 	stmdaeq	r0, {r5, r9, sl, fp}
 36c:	00000014 	andeq	r0, r0, r4, lsl r0
 370:	08000e34 	stmdaeq	r0, {r2, r4, r5, r9, sl, fp}
 374:	0000000c 	andeq	r0, r0, ip
	...
 380:	000000fc 	strdeq	r0, [r0], -ip
 384:	2c350002 	ldccs	0, cr0, [r5], #-8
 388:	00040000 	andeq	r0, r4, r0
 38c:	00000000 	andeq	r0, r0, r0
 390:	08000e40 	stmdaeq	r0, {r6, r9, sl, fp}
 394:	0000010c 	andeq	r0, r0, ip, lsl #2
 398:	08000f4c 	stmdaeq	r0, {r2, r3, r6, r8, r9, sl, fp}
 39c:	000000c4 	andeq	r0, r0, r4, asr #1
 3a0:	08001010 	stmdaeq	r0, {r4, ip}
 3a4:	00000016 	andeq	r0, r0, r6, lsl r0
 3a8:	08001028 	stmdaeq	r0, {r3, r5, ip}
 3ac:	00000022 	andeq	r0, r0, r2, lsr #32
 3b0:	0800104c 	stmdaeq	r0, {r2, r3, r6, ip}
 3b4:	0000000c 	andeq	r0, r0, ip
 3b8:	08001058 	stmdaeq	r0, {r3, r4, r6, ip}
 3bc:	0000001a 	andeq	r0, r0, sl, lsl r0
 3c0:	08001074 	stmdaeq	r0, {r2, r4, r5, r6, ip}
 3c4:	00000012 	andeq	r0, r0, r2, lsl r0
 3c8:	08001088 	stmdaeq	r0, {r3, r7, ip}
 3cc:	0000001a 	andeq	r0, r0, sl, lsl r0
 3d0:	080010a4 	stmdaeq	r0, {r2, r5, r7, ip}
 3d4:	0000001a 	andeq	r0, r0, sl, lsl r0
 3d8:	080010c0 	stmdaeq	r0, {r6, r7, ip}
 3dc:	00000008 	andeq	r0, r0, r8
 3e0:	080010c8 	stmdaeq	r0, {r3, r6, r7, ip}
 3e4:	00000008 	andeq	r0, r0, r8
 3e8:	080010d0 	stmdaeq	r0, {r4, r6, r7, ip}
 3ec:	00000016 	andeq	r0, r0, r6, lsl r0
 3f0:	080010e8 	stmdaeq	r0, {r3, r5, r6, r7, ip}
 3f4:	0000001a 	andeq	r0, r0, sl, lsl r0
 3f8:	08001104 	stmdaeq	r0, {r2, r8, ip}
 3fc:	00000016 	andeq	r0, r0, r6, lsl r0
 400:	0800111c 	stmdaeq	r0, {r2, r3, r4, r8, ip}
 404:	00000016 	andeq	r0, r0, r6, lsl r0
 408:	08001134 	stmdaeq	r0, {r2, r4, r5, r8, ip}
 40c:	0000001a 	andeq	r0, r0, sl, lsl r0
 410:	08001150 	stmdaeq	r0, {r4, r6, r8, ip}
 414:	0000000c 	andeq	r0, r0, ip
 418:	0800115c 	stmdaeq	r0, {r2, r3, r4, r6, r8, ip}
 41c:	0000001a 	andeq	r0, r0, sl, lsl r0
 420:	08001178 	stmdaeq	r0, {r3, r4, r5, r6, r8, ip}
 424:	00000012 	andeq	r0, r0, r2, lsl r0
 428:	0800118c 	stmdaeq	r0, {r2, r3, r7, r8, ip}
 42c:	0000001a 	andeq	r0, r0, sl, lsl r0
 430:	080011a8 	stmdaeq	r0, {r3, r5, r7, r8, ip}
 434:	0000001a 	andeq	r0, r0, sl, lsl r0
 438:	080011c4 	stmdaeq	r0, {r2, r6, r7, r8, ip}
 43c:	00000016 	andeq	r0, r0, r6, lsl r0
 440:	080011dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, ip}
 444:	0000001a 	andeq	r0, r0, sl, lsl r0
 448:	080011f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, ip}
 44c:	00000014 	andeq	r0, r0, r4, lsl r0
 450:	0800120c 	stmdaeq	r0, {r2, r3, r9, ip}
 454:	0000003a 	andeq	r0, r0, sl, lsr r0
 458:	08001248 	stmdaeq	r0, {r3, r6, r9, ip}
 45c:	0000000c 	andeq	r0, r0, ip
 460:	08001254 	stmdaeq	r0, {r2, r4, r6, r9, ip}
 464:	00000008 	andeq	r0, r0, r8
 468:	0800125c 	stmdaeq	r0, {r2, r3, r4, r6, r9, ip}
 46c:	0000004c 	andeq	r0, r0, ip, asr #32
 470:	080012a8 	stmdaeq	r0, {r3, r5, r7, r9, ip}
 474:	00000010 	andeq	r0, r0, r0, lsl r0
	...
 480:	0000004c 	andeq	r0, r0, ip, asr #32
 484:	37e40002 	strbcc	r0, [r4, r2]!
 488:	00040000 	andeq	r0, r4, r0
 48c:	00000000 	andeq	r0, r0, r0
 490:	080012b8 	stmdaeq	r0, {r3, r4, r5, r7, r9, ip}
 494:	0000001a 	andeq	r0, r0, sl, lsl r0
 498:	080012d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, ip}
 49c:	0000000c 	andeq	r0, r0, ip
 4a0:	080012e0 	stmdaeq	r0, {r5, r6, r7, r9, ip}
 4a4:	0000000c 	andeq	r0, r0, ip
 4a8:	080012ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, ip}
 4ac:	0000002e 	andeq	r0, r0, lr, lsr #32
 4b0:	0800131c 	stmdaeq	r0, {r2, r3, r4, r8, r9, ip}
 4b4:	0000000c 	andeq	r0, r0, ip
 4b8:	08001328 	stmdaeq	r0, {r3, r5, r8, r9, ip}
 4bc:	0000000c 	andeq	r0, r0, ip
 4c0:	08001334 	stmdaeq	r0, {r2, r4, r5, r8, r9, ip}
 4c4:	00000010 	andeq	r0, r0, r0, lsl r0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	080001c0 	stmdaeq	r0, {r6, r7, r8}
   4:	080001d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8}
   8:	080001d8 	stmdaeq	r0, {r3, r4, r6, r7, r8}
   c:	0800021c 	stmdaeq	r0, {r2, r3, r4, r9}
  10:	0800021c 	stmdaeq	r0, {r2, r3, r4, r9}
  14:	08000254 	stmdaeq	r0, {r2, r4, r6, r9}
  18:	08000254 	stmdaeq	r0, {r2, r4, r6, r9}
  1c:	08000264 	stmdaeq	r0, {r2, r5, r6, r9}
  20:	08000264 	stmdaeq	r0, {r2, r5, r6, r9}
  24:	080002a0 	stmdaeq	r0, {r5, r7, r9}
  28:	080002a0 	stmdaeq	r0, {r5, r7, r9}
  2c:	080002cc 	stmdaeq	r0, {r2, r3, r6, r7, r9}
  30:	080002cc 	stmdaeq	r0, {r2, r3, r6, r7, r9}
  34:	0800037c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9}
	...
  40:	0800037c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9}
  44:	0800037e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, r9}
  48:	08000380 	stmdaeq	r0, {r7, r8, r9}
  4c:	08000382 	stmdaeq	r0, {r1, r7, r8, r9}
  50:	08000384 	stmdaeq	r0, {r2, r7, r8, r9}
  54:	08000386 	stmdaeq	r0, {r1, r2, r7, r8, r9}
  58:	08000388 	stmdaeq	r0, {r3, r7, r8, r9}
  5c:	0800038a 	stmdaeq	r0, {r1, r3, r7, r8, r9}
  60:	0800038c 	stmdaeq	r0, {r2, r3, r7, r8, r9}
  64:	0800038e 	stmdaeq	r0, {r1, r2, r3, r7, r8, r9}
  68:	08000390 	stmdaeq	r0, {r4, r7, r8, r9}
  6c:	08000392 	stmdaeq	r0, {r1, r4, r7, r8, r9}
  70:	08000394 	stmdaeq	r0, {r2, r4, r7, r8, r9}
  74:	08000396 	stmdaeq	r0, {r1, r2, r4, r7, r8, r9}
  78:	08000398 	stmdaeq	r0, {r3, r4, r7, r8, r9}
  7c:	0800039a 	stmdaeq	r0, {r1, r3, r4, r7, r8, r9}
  80:	0800039c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9}
  84:	0800039e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, r9}
	...
  90:	080003ca 	stmdaeq	r0, {r1, r3, r6, r7, r8, r9}
  94:	08000484 	stmdaeq	r0, {r2, r7, sl}
  98:	08000490 	stmdaeq	r0, {r4, r7, sl}
  9c:	080004b0 	stmdaeq	r0, {r4, r5, r7, sl}
	...
  a8:	080003a0 	stmdaeq	r0, {r5, r7, r8, r9}
  ac:	080004b0 	stmdaeq	r0, {r4, r5, r7, sl}
  b0:	080004b0 	stmdaeq	r0, {r4, r5, r7, sl}
  b4:	08000520 	stmdaeq	r0, {r5, r8, sl}
	...
  c0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  c4:	00000000 	andeq	r0, r0, r0
  c8:	08000520 	stmdaeq	r0, {r5, r8, sl}
  cc:	0800056c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sl}
  d0:	0800056c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sl}
  d4:	08000570 	stmdaeq	r0, {r4, r5, r6, r8, sl}
	...
  e0:	08000570 	stmdaeq	r0, {r4, r5, r6, r8, sl}
  e4:	08000584 	stmdaeq	r0, {r2, r7, r8, sl}
  e8:	08000584 	stmdaeq	r0, {r2, r7, r8, sl}
  ec:	080005fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sl}
  f0:	080005fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sl}
  f4:	08000610 	stmdaeq	r0, {r4, r9, sl}
  f8:	08000610 	stmdaeq	r0, {r4, r9, sl}
  fc:	08000628 	stmdaeq	r0, {r3, r5, r9, sl}
 100:	08000628 	stmdaeq	r0, {r3, r5, r9, sl}
 104:	08000640 	stmdaeq	r0, {r6, r9, sl}
	...
 110:	08000640 	stmdaeq	r0, {r6, r9, sl}
 114:	0800079c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl}
 118:	0800079c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl}
 11c:	08000858 	stmdaeq	r0, {r3, r4, r6, fp}
 120:	08000858 	stmdaeq	r0, {r3, r4, r6, fp}
 124:	0800086a 	stmdaeq	r0, {r1, r3, r5, r6, fp}
 128:	0800086c 	stmdaeq	r0, {r2, r3, r5, r6, fp}
 12c:	08000890 	stmdaeq	r0, {r4, r7, fp}
 130:	08000890 	stmdaeq	r0, {r4, r7, fp}
 134:	0800089c 	stmdaeq	r0, {r2, r3, r4, r7, fp}
 138:	0800089c 	stmdaeq	r0, {r2, r3, r4, r7, fp}
 13c:	080008a2 	stmdaeq	r0, {r1, r5, r7, fp}
 140:	080008a4 	stmdaeq	r0, {r2, r5, r7, fp}
 144:	080008b0 	stmdaeq	r0, {r4, r5, r7, fp}
 148:	080008b0 	stmdaeq	r0, {r4, r5, r7, fp}
 14c:	080008b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, fp}
 150:	080008b8 	stmdaeq	r0, {r3, r4, r5, r7, fp}
 154:	080008bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, fp}
 158:	080008bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, fp}
 15c:	080008c0 	stmdaeq	r0, {r6, r7, fp}
 160:	080008c0 	stmdaeq	r0, {r6, r7, fp}
 164:	080008ca 	stmdaeq	r0, {r1, r3, r6, r7, fp}
 168:	080008cc 	stmdaeq	r0, {r2, r3, r6, r7, fp}
 16c:	080008d0 	stmdaeq	r0, {r4, r6, r7, fp}
 170:	080008d0 	stmdaeq	r0, {r4, r6, r7, fp}
 174:	080008d8 	stmdaeq	r0, {r3, r4, r6, r7, fp}
 178:	080008d8 	stmdaeq	r0, {r3, r4, r6, r7, fp}
 17c:	08000900 	stmdaeq	r0, {r8, fp}
	...
 188:	08000964 	stmdaeq	r0, {r2, r5, r6, r8, fp}
 18c:	08000966 	stmdaeq	r0, {r1, r2, r5, r6, r8, fp}
 190:	08000968 	stmdaeq	r0, {r3, r5, r6, r8, fp}
 194:	0800096e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, fp}
	...
 1a0:	08000900 	stmdaeq	r0, {r8, fp}
 1a4:	08000950 	stmdaeq	r0, {r4, r6, r8, fp}
 1a8:	08000950 	stmdaeq	r0, {r4, r6, r8, fp}
 1ac:	08000960 	stmdaeq	r0, {r5, r6, r8, fp}
 1b0:	08000960 	stmdaeq	r0, {r5, r6, r8, fp}
 1b4:	08000998 	stmdaeq	r0, {r3, r4, r7, r8, fp}
 1b8:	08000998 	stmdaeq	r0, {r3, r4, r7, r8, fp}
 1bc:	080009ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, fp}
 1c0:	080009ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, fp}
 1c4:	080009b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, fp}
 1c8:	080009b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, fp}
 1cc:	080009d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, fp}
 1d0:	080009d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, fp}
 1d4:	080009e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, fp}
 1d8:	080009e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, fp}
 1dc:	08000a08 	stmdaeq	r0, {r3, r9, fp}
 1e0:	08000a08 	stmdaeq	r0, {r3, r9, fp}
 1e4:	08000a14 	stmdaeq	r0, {r2, r4, r9, fp}
 1e8:	08000a14 	stmdaeq	r0, {r2, r4, r9, fp}
 1ec:	08000a2c 	stmdaeq	r0, {r2, r3, r5, r9, fp}
 1f0:	08000a2c 	stmdaeq	r0, {r2, r3, r5, r9, fp}
 1f4:	08000a38 	stmdaeq	r0, {r3, r4, r5, r9, fp}
 1f8:	08000a38 	stmdaeq	r0, {r3, r4, r5, r9, fp}
 1fc:	08000a50 	stmdaeq	r0, {r4, r6, r9, fp}
 200:	08000a50 	stmdaeq	r0, {r4, r6, r9, fp}
 204:	08000a5c 	stmdaeq	r0, {r2, r3, r4, r6, r9, fp}
 208:	08000a5c 	stmdaeq	r0, {r2, r3, r4, r6, r9, fp}
 20c:	08000a68 	stmdaeq	r0, {r3, r5, r6, r9, fp}
 210:	08000a68 	stmdaeq	r0, {r3, r5, r6, r9, fp}
 214:	08000a7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, fp}
 218:	08000a7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, fp}
 21c:	08000a90 	stmdaeq	r0, {r4, r7, r9, fp}
 220:	08000a90 	stmdaeq	r0, {r4, r7, r9, fp}
 224:	08000aa4 	stmdaeq	r0, {r2, r5, r7, r9, fp}
 228:	08000aa4 	stmdaeq	r0, {r2, r5, r7, r9, fp}
 22c:	08000ab4 	stmdaeq	r0, {r2, r4, r5, r7, r9, fp}
 230:	08000ab4 	stmdaeq	r0, {r2, r4, r5, r7, r9, fp}
 234:	08000ac8 	stmdaeq	r0, {r3, r6, r7, r9, fp}
 238:	08000ac8 	stmdaeq	r0, {r3, r6, r7, r9, fp}
 23c:	08000adc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, fp}
 240:	08000adc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, fp}
 244:	08000af0 	stmdaeq	r0, {r4, r5, r6, r7, r9, fp}
 248:	08000af0 	stmdaeq	r0, {r4, r5, r6, r7, r9, fp}
 24c:	08000b80 	stmdaeq	r0, {r7, r8, r9, fp}
 250:	08000b80 	stmdaeq	r0, {r7, r8, r9, fp}
 254:	08000bb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, fp}
 258:	08000bb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, fp}
 25c:	08000bbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, fp}
 260:	08000bbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, fp}
 264:	08000bc8 	stmdaeq	r0, {r3, r6, r7, r8, r9, fp}
 268:	08000bc8 	stmdaeq	r0, {r3, r6, r7, r8, r9, fp}
 26c:	08000bd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, fp}
 270:	08000bd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, fp}
 274:	08000bec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, fp}
 278:	08000bec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, fp}
 27c:	08000c08 	stmdaeq	r0, {r3, sl, fp}
 280:	08000c08 	stmdaeq	r0, {r3, sl, fp}
 284:	08000c20 	stmdaeq	r0, {r5, sl, fp}
 288:	08000c20 	stmdaeq	r0, {r5, sl, fp}
 28c:	08000c38 	stmdaeq	r0, {r3, r4, r5, sl, fp}
 290:	08000c38 	stmdaeq	r0, {r3, r4, r5, sl, fp}
 294:	08000c50 	stmdaeq	r0, {r4, r6, sl, fp}
 298:	08000c50 	stmdaeq	r0, {r4, r6, sl, fp}
 29c:	08000c5c 	stmdaeq	r0, {r2, r3, r4, r6, sl, fp}
 2a0:	08000c5c 	stmdaeq	r0, {r2, r3, r4, r6, sl, fp}
 2a4:	08000c74 	stmdaeq	r0, {r2, r4, r5, r6, sl, fp}
 2a8:	08000c74 	stmdaeq	r0, {r2, r4, r5, r6, sl, fp}
 2ac:	08000c8c 	stmdaeq	r0, {r2, r3, r7, sl, fp}
 2b0:	08000c8c 	stmdaeq	r0, {r2, r3, r7, sl, fp}
 2b4:	08000ca4 	stmdaeq	r0, {r2, r5, r7, sl, fp}
 2b8:	08000ca4 	stmdaeq	r0, {r2, r5, r7, sl, fp}
 2bc:	08000cbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp}
 2c0:	08000cbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp}
 2c4:	08000cd4 	stmdaeq	r0, {r2, r4, r6, r7, sl, fp}
 2c8:	08000cd4 	stmdaeq	r0, {r2, r4, r6, r7, sl, fp}
 2cc:	08000cec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, fp}
 2d0:	08000cec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, fp}
 2d4:	08000d04 	stmdaeq	r0, {r2, r8, sl, fp}
 2d8:	08000d04 	stmdaeq	r0, {r2, r8, sl, fp}
 2dc:	08000d1c 	stmdaeq	r0, {r2, r3, r4, r8, sl, fp}
 2e0:	08000d1c 	stmdaeq	r0, {r2, r3, r4, r8, sl, fp}
 2e4:	08000d34 	stmdaeq	r0, {r2, r4, r5, r8, sl, fp}
 2e8:	08000d34 	stmdaeq	r0, {r2, r4, r5, r8, sl, fp}
 2ec:	08000d4c 	stmdaeq	r0, {r2, r3, r6, r8, sl, fp}
 2f0:	08000d4c 	stmdaeq	r0, {r2, r3, r6, r8, sl, fp}
 2f4:	08000d64 	stmdaeq	r0, {r2, r5, r6, r8, sl, fp}
 2f8:	08000d64 	stmdaeq	r0, {r2, r5, r6, r8, sl, fp}
 2fc:	08000d7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, sl, fp}
 300:	08000d7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, sl, fp}
 304:	08000d94 	stmdaeq	r0, {r2, r4, r7, r8, sl, fp}
 308:	08000d94 	stmdaeq	r0, {r2, r4, r7, r8, sl, fp}
 30c:	08000dac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, fp}
 310:	08000dac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, fp}
 314:	08000dc4 	stmdaeq	r0, {r2, r6, r7, r8, sl, fp}
 318:	08000dc4 	stmdaeq	r0, {r2, r6, r7, r8, sl, fp}
 31c:	08000ddc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl, fp}
 320:	08000ddc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl, fp}
 324:	08000e10 	stmdaeq	r0, {r4, r9, sl, fp}
 328:	08000e10 	stmdaeq	r0, {r4, r9, sl, fp}
 32c:	08000e20 	stmdaeq	r0, {r5, r9, sl, fp}
 330:	08000e20 	stmdaeq	r0, {r5, r9, sl, fp}
 334:	08000e34 	stmdaeq	r0, {r2, r4, r5, r9, sl, fp}
 338:	08000e34 	stmdaeq	r0, {r2, r4, r5, r9, sl, fp}
 33c:	08000e40 	stmdaeq	r0, {r6, r9, sl, fp}
	...
 348:	08000e40 	stmdaeq	r0, {r6, r9, sl, fp}
 34c:	08000f4c 	stmdaeq	r0, {r2, r3, r6, r8, r9, sl, fp}
 350:	08000f4c 	stmdaeq	r0, {r2, r3, r6, r8, r9, sl, fp}
 354:	08001010 	stmdaeq	r0, {r4, ip}
 358:	08001010 	stmdaeq	r0, {r4, ip}
 35c:	08001026 	stmdaeq	r0, {r1, r2, r5, ip}
 360:	08001028 	stmdaeq	r0, {r3, r5, ip}
 364:	0800104a 	stmdaeq	r0, {r1, r3, r6, ip}
 368:	0800104c 	stmdaeq	r0, {r2, r3, r6, ip}
 36c:	08001058 	stmdaeq	r0, {r3, r4, r6, ip}
 370:	08001058 	stmdaeq	r0, {r3, r4, r6, ip}
 374:	08001072 	stmdaeq	r0, {r1, r4, r5, r6, ip}
 378:	08001074 	stmdaeq	r0, {r2, r4, r5, r6, ip}
 37c:	08001086 	stmdaeq	r0, {r1, r2, r7, ip}
 380:	08001088 	stmdaeq	r0, {r3, r7, ip}
 384:	080010a2 	stmdaeq	r0, {r1, r5, r7, ip}
 388:	080010a4 	stmdaeq	r0, {r2, r5, r7, ip}
 38c:	080010be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, ip}
 390:	080010c0 	stmdaeq	r0, {r6, r7, ip}
 394:	080010c8 	stmdaeq	r0, {r3, r6, r7, ip}
 398:	080010c8 	stmdaeq	r0, {r3, r6, r7, ip}
 39c:	080010d0 	stmdaeq	r0, {r4, r6, r7, ip}
 3a0:	080010d0 	stmdaeq	r0, {r4, r6, r7, ip}
 3a4:	080010e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, ip}
 3a8:	080010e8 	stmdaeq	r0, {r3, r5, r6, r7, ip}
 3ac:	08001102 	stmdaeq	r0, {r1, r8, ip}
 3b0:	08001104 	stmdaeq	r0, {r2, r8, ip}
 3b4:	0800111a 	stmdaeq	r0, {r1, r3, r4, r8, ip}
 3b8:	0800111c 	stmdaeq	r0, {r2, r3, r4, r8, ip}
 3bc:	08001132 	stmdaeq	r0, {r1, r4, r5, r8, ip}
 3c0:	08001134 	stmdaeq	r0, {r2, r4, r5, r8, ip}
 3c4:	0800114e 	stmdaeq	r0, {r1, r2, r3, r6, r8, ip}
 3c8:	08001150 	stmdaeq	r0, {r4, r6, r8, ip}
 3cc:	0800115c 	stmdaeq	r0, {r2, r3, r4, r6, r8, ip}
 3d0:	0800115c 	stmdaeq	r0, {r2, r3, r4, r6, r8, ip}
 3d4:	08001176 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, ip}
 3d8:	08001178 	stmdaeq	r0, {r3, r4, r5, r6, r8, ip}
 3dc:	0800118a 	stmdaeq	r0, {r1, r3, r7, r8, ip}
 3e0:	0800118c 	stmdaeq	r0, {r2, r3, r7, r8, ip}
 3e4:	080011a6 	stmdaeq	r0, {r1, r2, r5, r7, r8, ip}
 3e8:	080011a8 	stmdaeq	r0, {r3, r5, r7, r8, ip}
 3ec:	080011c2 	stmdaeq	r0, {r1, r6, r7, r8, ip}
 3f0:	080011c4 	stmdaeq	r0, {r2, r6, r7, r8, ip}
 3f4:	080011da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, ip}
 3f8:	080011dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, ip}
 3fc:	080011f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, ip}
 400:	080011f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, ip}
 404:	0800120c 	stmdaeq	r0, {r2, r3, r9, ip}
 408:	0800120c 	stmdaeq	r0, {r2, r3, r9, ip}
 40c:	08001246 	stmdaeq	r0, {r1, r2, r6, r9, ip}
 410:	08001248 	stmdaeq	r0, {r3, r6, r9, ip}
 414:	08001254 	stmdaeq	r0, {r2, r4, r6, r9, ip}
 418:	08001254 	stmdaeq	r0, {r2, r4, r6, r9, ip}
 41c:	0800125c 	stmdaeq	r0, {r2, r3, r4, r6, r9, ip}
 420:	0800125c 	stmdaeq	r0, {r2, r3, r4, r6, r9, ip}
 424:	080012a8 	stmdaeq	r0, {r3, r5, r7, r9, ip}
 428:	080012a8 	stmdaeq	r0, {r3, r5, r7, r9, ip}
 42c:	080012b8 	stmdaeq	r0, {r3, r4, r5, r7, r9, ip}
	...
 438:	080012b8 	stmdaeq	r0, {r3, r4, r5, r7, r9, ip}
 43c:	080012d2 	stmdaeq	r0, {r1, r4, r6, r7, r9, ip}
 440:	080012d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, ip}
 444:	080012e0 	stmdaeq	r0, {r5, r6, r7, r9, ip}
 448:	080012e0 	stmdaeq	r0, {r5, r6, r7, r9, ip}
 44c:	080012ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, ip}
 450:	080012ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, ip}
 454:	0800131a 	stmdaeq	r0, {r1, r3, r4, r8, r9, ip}
 458:	0800131c 	stmdaeq	r0, {r2, r3, r4, r8, r9, ip}
 45c:	08001328 	stmdaeq	r0, {r3, r5, r8, r9, ip}
 460:	08001328 	stmdaeq	r0, {r3, r5, r8, r9, ip}
 464:	08001334 	stmdaeq	r0, {r2, r4, r5, r8, r9, ip}
 468:	08001334 	stmdaeq	r0, {r2, r4, r5, r8, r9, ip}
 46c:	08001344 	stmdaeq	r0, {r2, r6, r8, r9, ip}
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	0000022c 	andeq	r0, r0, ip, lsr #4
       4:	014d0002 	cmpeq	sp, r2
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	2f010000 	svccs	0x00010000
      1c:	2f727375 	svccs	0x00727375
      20:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
      24:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
      28:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
      2c:	6e692f69 	cdpvs	15, 6, cr2, cr9, cr9, {3}
      30:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
      34:	616d2f65 	cmnvs	sp, r5, ror #30
      38:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
      3c:	752f0065 	strvc	r0, [pc, #-101]!	; ffffffdf <_estack+0xdffcffdf>
      40:	612f7273 	teqvs	pc, r3, ror r2	; <UNPREDICTABLE>
      44:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
      48:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
      4c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
      50:	636e692f 	cmnvs	lr, #770048	; 0xbc000
      54:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
      58:	2f2e2e00 	svccs	0x002e2e00
      5c:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
      60:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
      64:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
      68:	5349534d 	movtpl	r5, #37709	; 0x934d
      6c:	7665442f 	strbtvc	r4, [r5], -pc, lsr #8
      70:	2f656369 	svccs	0x00656369
      74:	532f5453 	teqpl	pc, #1392508928	; 0x53000000
      78:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
      7c:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
      80:	636e492f 	cmnvs	lr, #770048	; 0xbc000
      84:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
      88:	2f2e2e00 	svccs	0x002e2e00
      8c:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
      90:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
      94:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
      98:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
      9c:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
      a0:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
      a4:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
      a8:	445f6870 	ldrbmi	r6, [pc], #-2160	; b0 <_Min_Heap_Size+0xb0>
      ac:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
      b0:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
      b4:	2e2e0063 	cdpcs	0, 2, cr0, cr14, cr3, {3}
      b8:	694c2f2f 	stmdbvs	ip, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}^
      bc:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
      c0:	2f736569 	svccs	0x00736569
      c4:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
      c8:	6e492f53 	mcrvs	15, 2, r2, cr9, cr3, {2}
      cc:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
      d0:	6d000065 	stcvs	0, cr0, [r0, #-404]	; 0xfffffe6c
      d4:	2e6e6961 	cdpcs	9, 6, cr6, cr14, cr1, {3}
      d8:	00000063 	andeq	r0, r0, r3, rrx
      dc:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xf00
      e0:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
      e4:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
      e8:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
      ec:	00010068 	andeq	r0, r1, r8, rrx
      f0:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
      f4:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
      f8:	00020068 	andeq	r0, r2, r8, rrx
      fc:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     100:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
     104:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
     108:	00000300 	andeq	r0, r0, r0, lsl #6
     10c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     110:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     114:	70675f78 	rsbvc	r5, r7, r8, ror pc
     118:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
     11c:	00000400 	andeq	r0, r0, r0, lsl #8
     120:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     124:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     128:	73755f78 	cmnvc	r5, #120, 30	; 0x1e0
     12c:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
     130:	00040068 	andeq	r0, r4, r8, rrx
     134:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     138:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
     13c:	725f7878 	subsvc	r7, pc, #120, 16	; 0x780000
     140:	682e6363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, sp, lr}
     144:	00000400 	andeq	r0, r0, r0, lsl #8
     148:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
     14c:	346d635f 	strbtcc	r6, [sp], #-863	; 0x35f
     150:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
     154:	00000000 	andeq	r0, r0, r0
     158:	01c00205 	biceq	r0, r0, r5, lsl #4
     15c:	28030800 	stmdacs	r3, {fp}
     160:	2f4c2301 	svccs	0x004c2301
     164:	0002022d 	andeq	r0, r2, sp, lsr #4
     168:	05000101 	streq	r0, [r0, #-257]	; 0x101
     16c:	0001d802 	andeq	sp, r1, r2, lsl #16
     170:	01330308 	teqeq	r3, r8, lsl #6
     174:	03200903 	teqeq	r0, #49152	; 0xc000
     178:	1f262077 	svcne	0x00262077
     17c:	2f302924 	svccs	0x00302924
     180:	252a312c 	strcs	r3, [sl, #-300]!	; 0x12c
     184:	02595931 	subseq	r5, r9, #802816	; 0xc4000
     188:	01010004 	tsteq	r1, r4
     18c:	1c020500 	cfstr32ne	mvfx0, [r2], {-0}
     190:	03080002 	movweq	r0, #32770	; 0x8002
     194:	240100c5 	strcs	r0, [r1], #-197	; 0xc5
     198:	2f3f241c 	svccs	0x003f241c
     19c:	23221c23 	teqcs	r2, #8960	; 0x2300
     1a0:	2d1e321c 	lfmcs	f3, 4, [lr, #-112]	; 0xffffff90
     1a4:	02302f30 	eorseq	r2, r0, #48, 30	; 0xc0
     1a8:	01010004 	tsteq	r1, r4
     1ac:	54020500 	strpl	r0, [r2], #-1280	; 0x500
     1b0:	03080002 	movweq	r0, #32770	; 0x8002
     1b4:	150100d5 	strne	r0, [r1, #-213]	; 0xd5
     1b8:	01000802 	tsteq	r0, r2, lsl #16
     1bc:	02050001 	andeq	r0, r5, #1
     1c0:	08000264 	stmdaeq	r0, {r2, r5, r6, r9}
     1c4:	0100dd03 	tsteq	r0, r3, lsl #26
     1c8:	03201203 	teqeq	r0, #805306368	; 0x30000000
     1cc:	0d03206e 	stceq	0, cr2, [r3, #-440]	; 0xfffffe48
     1d0:	03212420 	teqeq	r1, #32, 8	; 0x20000000
     1d4:	2f2f2e7a 	svccs	0x002f2e7a
     1d8:	292f2f2f 	stmdbcs	pc!, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}	; <UNPREDICTABLE>
     1dc:	024b2f26 	subeq	r2, fp, #38, 30	; 0x98
     1e0:	01010004 	tsteq	r1, r4
     1e4:	a0020500 	andge	r0, r2, r0, lsl #10
     1e8:	03080002 	movweq	r0, #32770	; 0x8002
     1ec:	210100f4 	strdcs	r0, [r1, -r4]
     1f0:	01040200 	mrseq	r0, R12_usr
     1f4:	0256673d 	subseq	r6, r6, #15990784	; 0xf40000
     1f8:	01010007 	tsteq	r1, r7
     1fc:	cc020500 	cfstr32gt	mvfx0, [r2], {-0}
     200:	03080002 	movweq	r0, #32770	; 0x8002
     204:	210100fe 	strdcs	r0, [r1, -lr]
     208:	032f2f2f 	teqeq	pc, #47, 30	; 0xbc
     20c:	67213c73 			; <UNDEFINED> instruction: 0x67213c73
     210:	48676748 	stmdami	r7!, {r3, r6, r8, r9, sl, sp, lr}^
     214:	004a6303 	subeq	r6, sl, r3, lsl #6
     218:	06010402 	streq	r0, [r1], -r2, lsl #8
     21c:	04020020 	streq	r0, [r2], #-32
     220:	1d030601 	stcne	6, cr0, [r3, #-4]
     224:	48672158 	stmdami	r7!, {r3, r4, r6, r8, sp}^
     228:	02486767 	subeq	r6, r8, #27000832	; 0x19c0000
     22c:	0101000e 	tsteq	r1, lr
     230:	00000141 	andeq	r0, r0, r1, asr #2
     234:	00ad0002 	adceq	r0, sp, r2
     238:	01020000 	mrseq	r0, (UNDEF: 2)
     23c:	000d0efb 	strdeq	r0, [sp], -fp
     240:	01010101 	tsteq	r1, r1, lsl #2
     244:	01000000 	mrseq	r0, (UNDEF: 0)
     248:	2f010000 	svccs	0x00010000
     24c:	2f727375 	svccs	0x00727375
     250:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     254:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
     258:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     25c:	6e692f69 	cdpvs	15, 6, cr2, cr9, cr9, {3}
     260:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     264:	616d2f65 	cmnvs	sp, r5, ror #30
     268:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
     26c:	752f0065 	strvc	r0, [pc, #-101]!	; 20f <_Min_Heap_Size+0x20f>
     270:	612f7273 	teqvs	pc, r3, ror r2	; <UNPREDICTABLE>
     274:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     278:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     27c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     280:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     284:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
     288:	2f2e2e00 	svccs	0x002e2e00
     28c:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
     290:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
     294:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
     298:	5349534d 	movtpl	r5, #37709	; 0x934d
     29c:	636e492f 	cmnvs	lr, #770048	; 0xbc000
     2a0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
     2a4:	74730000 	ldrbtvc	r0, [r3], #-0
     2a8:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     2ac:	5f787834 	svcpl	0x00787834
     2b0:	632e7469 	teqvs	lr, #1761607680	; 0x69000000
     2b4:	00000000 	andeq	r0, r0, r0
     2b8:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
     2bc:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
     2c0:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     2c4:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
     2c8:	00000100 	andeq	r0, r0, r0, lsl #2
     2cc:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     2d0:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     2d4:	00000200 	andeq	r0, r0, r0, lsl #4
     2d8:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
     2dc:	346d635f 	strbtcc	r6, [sp], #-863	; 0x35f
     2e0:	0300682e 	movweq	r6, #2094	; 0x82e
     2e4:	00000000 	andeq	r0, r0, r0
     2e8:	037c0205 	cmneq	ip, #1342177280	; 0x50000000
     2ec:	36030800 	strcc	r0, [r3], -r0, lsl #16
     2f0:	00010201 	andeq	r0, r1, r1, lsl #4
     2f4:	05000101 	streq	r0, [r0, #-257]	; 0x101
     2f8:	00038002 	andeq	r8, r3, r2
     2fc:	013f0308 	teqeq	pc, r8, lsl #6
     300:	01000102 	tsteq	r0, r2, lsl #2
     304:	02050001 	andeq	r0, r5, #1
     308:	08000384 	stmdaeq	r0, {r2, r7, r8, r9}
     30c:	0100cc03 	tsteq	r0, r3, lsl #24
     310:	01000102 	tsteq	r0, r2, lsl #2
     314:	02050001 	andeq	r0, r5, #1
     318:	08000388 	stmdaeq	r0, {r3, r7, r8, r9}
     31c:	0100d903 	tsteq	r0, r3, lsl #18
     320:	01000102 	tsteq	r0, r2, lsl #2
     324:	02050001 	andeq	r0, r5, #1
     328:	0800038c 	stmdaeq	r0, {r2, r3, r7, r8, r9}
     32c:	0100e603 	tsteq	r0, r3, lsl #12
     330:	01000102 	tsteq	r0, r2, lsl #2
     334:	02050001 	andeq	r0, r5, #1
     338:	08000390 	stmdaeq	r0, {r4, r7, r8, r9}
     33c:	0100f303 	tsteq	r0, r3, lsl #6
     340:	01000102 	tsteq	r0, r2, lsl #2
     344:	02050001 	andeq	r0, r5, #1
     348:	08000394 	stmdaeq	r0, {r2, r4, r7, r8, r9}
     34c:	0100fc03 	tsteq	r0, r3, lsl #24
     350:	01000102 	tsteq	r0, r2, lsl #2
     354:	02050001 	andeq	r0, r5, #1
     358:	08000398 	stmdaeq	r0, {r3, r4, r7, r8, r9}
     35c:	01018503 	tsteq	r1, r3, lsl #10
     360:	01000102 	tsteq	r0, r2, lsl #2
     364:	02050001 	andeq	r0, r5, #1
     368:	0800039c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9}
     36c:	01018e03 	tsteq	r1, r3, lsl #28
     370:	01000102 	tsteq	r0, r2, lsl #2
     374:	00017401 	andeq	r7, r1, r1, lsl #8
     378:	f0000200 			; <UNDEFINED> instruction: 0xf0000200
     37c:	02000000 	andeq	r0, r0, #0
     380:	0d0efb01 	vstreq	d15, [lr, #-4]
     384:	01010100 	mrseq	r0, (UNDEF: 17)
     388:	00000001 	andeq	r0, r0, r1
     38c:	01000001 	tsteq	r0, r1
     390:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
     394:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
     398:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     39c:	61652d65 	cmnvs	r5, r5, ror #26
     3a0:	692f6962 	stmdbvs	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
     3a4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     3a8:	6d2f6564 	cfstr32vs	mvfx6, [pc, #-400]!	; 220 <_Min_Heap_Size+0x220>
     3ac:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
     3b0:	2f00656e 	svccs	0x0000656e
     3b4:	2f727375 	svccs	0x00727375
     3b8:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     3bc:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
     3c0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     3c4:	6e692f69 	cdpvs	15, 6, cr2, cr9, cr9, {3}
     3c8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     3cc:	2e2e0065 	cdpcs	0, 2, cr0, cr14, cr5, {3}
     3d0:	694c2f2f 	stmdbvs	ip, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}^
     3d4:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
     3d8:	2f736569 	svccs	0x00736569
     3dc:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
     3e0:	6e492f53 	mcrvs	15, 2, r2, cr9, cr3, {2}
     3e4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     3e8:	2e2e0065 	cdpcs	0, 2, cr0, cr14, cr5, {3}
     3ec:	694c2f2f 	stmdbvs	ip, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}^
     3f0:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
     3f4:	2f736569 	svccs	0x00736569
     3f8:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
     3fc:	65442f53 	strbvs	r2, [r4, #-3923]	; 0xf53
     400:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
     404:	2f54532f 	svccs	0x0054532f
     408:	334d5453 	movtcc	r5, #54355	; 0xd453
     40c:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
     410:	6e492f78 	mcrvs	15, 2, r2, cr9, cr8, {3}
     414:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     418:	73000065 	movwvc	r0, #101	; 0x65
     41c:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0x379
     420:	74735f6d 	ldrbtvc	r5, [r3], #-3949	; 0xf6d
     424:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     428:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
     42c:	00000063 	andeq	r0, r0, r3, rrx
     430:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xf00
     434:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
     438:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     43c:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
     440:	00010068 	andeq	r0, r1, r8, rrx
     444:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
     448:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
     44c:	00020068 	andeq	r0, r2, r8, rrx
     450:	726f6300 	rsbvc	r6, pc, #0, 6
     454:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
     458:	00682e34 	rsbeq	r2, r8, r4, lsr lr
     45c:	73000003 	movwvc	r0, #3
     460:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     464:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     468:	0400682e 	streq	r6, [r0], #-2094	; 0x82e
     46c:	00000000 	andeq	r0, r0, r0
     470:	03a00205 	moveq	r0, #1342177280	; 0x50000000
     474:	bb030800 	bllt	c247c <_Min_Stack_Size+0xc207c>
     478:	03190101 	tsteq	r9, #1073741824	; 0x40000000
     47c:	77032009 	strvc	r2, [r3, -r9]
     480:	3f1d2320 	svccc	0x001d2320
     484:	03236923 	teqeq	r3, #573440	; 0x8c000
     488:	1303206d 	movwne	r2, #12397	; 0x306d
     48c:	f3033f20 	vpmax.f32	d3, d3, d16
     490:	0c032000 	stceq	0, cr2, [r3], {-0}
     494:	4830522e 	ldmdami	r0!, {r1, r2, r3, r5, r9, ip, lr}
     498:	4c3e3d4b 	ldcmi	13, cr3, [lr], #-300	; 0xfffffed4
     49c:	0e032332 	mcreq	3, 0, r2, cr3, cr2, {1}
     4a0:	4b1f213c 	blmi	7c8998 <_Min_Stack_Size+0x7c8598>
     4a4:	4d4d314d 	stfmie	f3, [sp, #-308]	; 0xfffffecc
     4a8:	4d59414d 	ldfmie	f4, [r9, #-308]	; 0xfffffecc
     4ac:	1d23414b 	stfnes	f4, [r3, #-300]!	; 0xfffffed4
     4b0:	034d4b3f 	movteq	r4, #56127	; 0xdb3f
     4b4:	4c587ec6 	mrrcmi	14, 12, r7, r8, cr6
     4b8:	2e018703 	cdpcs	7, 0, cr8, cr1, cr3, {0}
     4bc:	01001002 	tsteq	r0, r2
     4c0:	02050001 	andeq	r0, r5, #1
     4c4:	080004b0 	stmdaeq	r0, {r4, r5, r7, sl}
     4c8:	01028803 	tsteq	r2, r3, lsl #16
     4cc:	24034c16 	strcs	r4, [r3], #-3094	; 0xc16
     4d0:	3e1e3e58 	mrccc	14, 0, r3, cr14, cr8, {2}
     4d4:	213c6703 	teqcs	ip, r3, lsl #14
     4d8:	33231d25 	teqcc	r3, #2368	; 0x940
     4dc:	03207603 	teqeq	r0, #3145728	; 0x300000
     4e0:	67692e0a 	strbvs	r2, [r9, -sl, lsl #28]!
     4e4:	206a032f 	rsbcs	r0, sl, pc, lsr #6
     4e8:	01000d02 	tsteq	r0, r2, lsl #26
     4ec:	00007101 	andeq	r7, r0, r1, lsl #2
     4f0:	30000200 	andcc	r0, r0, r0, lsl #4
     4f4:	02000000 	andeq	r0, r0, #0
     4f8:	0d0efb01 	vstreq	d15, [lr, #-4]
     4fc:	01010100 	mrseq	r0, (UNDEF: 17)
     500:	00000001 	andeq	r0, r0, r1
     504:	01000001 	tsteq	r0, r1
     508:	61747300 	cmnvs	r4, r0, lsl #6
     50c:	70757472 	rsbsvc	r7, r5, r2, ror r4
     510:	6d74735f 	ldclvs	3, cr7, [r4, #-380]!	; 0xfffffe84
     514:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
     518:	345f3932 	ldrbcc	r3, [pc], #-2354	; 520 <_Min_Stack_Size+0x120>
     51c:	78783933 	ldmdavc	r8!, {r0, r1, r4, r5, r8, fp, ip, sp}^
     520:	0000532e 	andeq	r5, r0, lr, lsr #6
     524:	00000000 	andeq	r0, r0, r0
     528:	05200205 	streq	r0, [r0, #-517]!	; 0x205
     52c:	ca030800 	bgt	c2534 <_Min_Stack_Size+0xc2134>
     530:	31210100 	teqcc	r1, r0, lsl #2
     534:	23212121 	teqcs	r1, #1073741832	; 0x40000008
     538:	21212121 	teqcs	r1, r1, lsr #2
     53c:	2131212f 	teqcs	r1, pc, lsr #2
     540:	31212131 	teqcc	r1, r1, lsr r1
     544:	65032f30 	strvs	r2, [r3, #-3888]	; 0xf30
     548:	322f3420 	eorcc	r3, pc, #32, 8	; 0x20000000
     54c:	00020236 	andeq	r0, r2, r6, lsr r2
     550:	05000101 	streq	r0, [r0, #-257]	; 0x101
     554:	00056c02 	andeq	r6, r5, r2, lsl #24
     558:	00f60308 	rscseq	r0, r6, r8, lsl #6
     55c:	00020201 	andeq	r0, r2, r1, lsl #4
     560:	01ce0101 	biceq	r0, lr, r1, lsl #2
     564:	00020000 	andeq	r0, r2, r0
     568:	00000148 	andeq	r0, r0, r8, asr #2
     56c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     570:	0101000d 	tsteq	r1, sp
     574:	00000101 	andeq	r0, r0, r1, lsl #2
     578:	00000100 	andeq	r0, r0, r0, lsl #2
     57c:	2f2e2e01 	svccs	0x002e2e01
     580:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
     584:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
     588:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
     58c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     590:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
     594:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
     598:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     59c:	445f6870 	ldrbmi	r6, [pc], #-2160	; 5a4 <_Min_Stack_Size+0x1a4>
     5a0:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
     5a4:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
     5a8:	752f0063 	strvc	r0, [pc, #-99]!	; 54d <_Min_Stack_Size+0x14d>
     5ac:	612f7273 	teqvs	pc, r3, ror r2	; <UNPREDICTABLE>
     5b0:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     5b4:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     5b8:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     5bc:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     5c0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
     5c4:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
     5c8:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0x968
     5cc:	73752f00 	cmnvc	r5, #0, 30
     5d0:	72612f72 	rsbvc	r2, r1, #456	; 0x1c8
     5d4:	6f6e2d6d 	svcvs	0x006e2d6d
     5d8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
     5dc:	2f696261 	svccs	0x00696261
     5e0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     5e4:	00656475 	rsbeq	r6, r5, r5, ror r4
     5e8:	2f2f2e2e 	svccs	0x002f2e2e
     5ec:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
     5f0:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
     5f4:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
     5f8:	2f534953 	svccs	0x00534953
     5fc:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
     600:	00656475 	rsbeq	r6, r5, r5, ror r4
     604:	2f2f2e2e 	svccs	0x002f2e2e
     608:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
     60c:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
     610:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
     614:	2f534953 	svccs	0x00534953
     618:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
     61c:	532f6563 	teqpl	pc, #415236096	; 0x18c00000
     620:	54532f54 	ldrbpl	r2, [r3], #-3924	; 0xf54
     624:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     628:	2f787834 	svccs	0x00787834
     62c:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
     630:	00656475 	rsbeq	r6, r5, r5, ror r4
     634:	2f2f2e2e 	svccs	0x002f2e2e
     638:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
     63c:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
     640:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
     644:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     648:	5f787834 	svcpl	0x00787834
     64c:	50647453 	rsbpl	r7, r4, r3, asr r4
     650:	70697265 	rsbvc	r7, r9, r5, ror #4
     654:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
     658:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     65c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     660:	696d0000 	stmdbvs	sp!, {}^	; <UNPREDICTABLE>
     664:	632e6373 	teqvs	lr, #-872415231	; 0xcc000001
     668:	00000100 	andeq	r0, r0, r0, lsl #2
     66c:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
     670:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
     674:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     678:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
     67c:	00000200 	andeq	r0, r0, r0, lsl #4
     680:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     684:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     688:	00000300 	andeq	r0, r0, r0, lsl #6
     68c:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
     690:	346d635f 	strbtcc	r6, [sp], #-863	; 0x35f
     694:	0400682e 	streq	r6, [r0], #-2094	; 0x82e
     698:	74730000 	ldrbtvc	r0, [r3], #-0
     69c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     6a0:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
     6a4:	00050068 	andeq	r0, r5, r8, rrx
     6a8:	73696d00 	cmnvc	r9, #0, 26
     6ac:	00682e63 	rsbeq	r2, r8, r3, ror #28
     6b0:	00000006 	andeq	r0, r0, r6
     6b4:	70020500 	andvc	r0, r2, r0, lsl #10
     6b8:	03080005 	movweq	r0, #32773	; 0x8005
     6bc:	170100f6 			; <UNDEFINED> instruction: 0x170100f6
     6c0:	01000a02 	tsteq	r0, r2, lsl #20
     6c4:	02050001 	andeq	r0, r5, #1
     6c8:	08000584 	stmdaeq	r0, {r2, r7, r8, sl}
     6cc:	01018803 	tsteq	r1, r3, lsl #16
     6d0:	2078031a 	rsbscs	r0, r8, sl, lsl r3
     6d4:	20150328 	andscs	r0, r5, r8, lsr #6
     6d8:	0331574b 	teqeq	r1, #19660800	; 0x12c0000
     6dc:	1c242e6b 	stcne	14, cr2, [r4], #-428	; 0xfffffe54
     6e0:	77032425 	strvc	r2, [r3, -r5, lsr #8]
     6e4:	222f3d2e 	eorcs	r3, pc, #2944	; 0xb80
     6e8:	3221303a 	eorcc	r3, r1, #58	; 0x3a
     6ec:	21313048 	teqcs	r1, r8, asr #32
     6f0:	032d213b 	teqeq	sp, #-1073741810	; 0xc000000e
     6f4:	07022e09 	streq	r2, [r2, -r9, lsl #28]
     6f8:	00010100 	andeq	r0, r1, r0, lsl #2
     6fc:	05fc0205 	ldrbeq	r0, [ip, #517]!	; 0x205
     700:	b4030800 	strlt	r0, [r3], #-2048	; 0x800
     704:	02170101 	andseq	r0, r7, #1073741824	; 0x40000000
     708:	0101000a 	tsteq	r1, sl
     70c:	10020500 	andne	r0, r2, r0, lsl #10
     710:	03080006 	movweq	r0, #32774	; 0x8006
     714:	190101c7 	stmdbne	r1, {r0, r1, r2, r6, r7, r8}
     718:	0246262c 	subeq	r2, r6, #44, 12	; 0x2c00000
     71c:	01010005 	tsteq	r1, r5
     720:	28020500 	stmdacs	r2, {r8, sl}
     724:	03080006 	movweq	r0, #32774	; 0x8006
     728:	170101df 			; <UNDEFINED> instruction: 0x170101df
     72c:	0240222c 	subeq	r2, r0, #44, 4	; 0xc0000002
     730:	01010006 	tsteq	r1, r6
     734:	0000031e 	andeq	r0, r0, lr, lsl r3
     738:	016f0002 	cmneq	pc, r2
     73c:	01020000 	mrseq	r0, (UNDEF: 2)
     740:	000d0efb 	strdeq	r0, [sp], -fp
     744:	01010101 	tsteq	r1, r1, lsl #2
     748:	01000000 	mrseq	r0, (UNDEF: 0)
     74c:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
     750:	4c2f2f2e 	stcmi	15, cr2, [pc], #-184	; 6a0 <_Min_Stack_Size+0x2a0>
     754:	61726269 	cmnvs	r2, r9, ror #4
     758:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
     75c:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     760:	34463233 	strbcc	r3, [r6], #-563	; 0x233
     764:	535f7878 	cmppl	pc, #120, 16	; 0x780000
     768:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0x474
     76c:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     770:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
     774:	2f726576 	svccs	0x00726576
     778:	00637273 	rsbeq	r7, r3, r3, ror r2
     77c:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
     780:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
     784:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     788:	61652d65 	cmnvs	r5, r5, ror #26
     78c:	692f6962 	stmdbvs	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
     790:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     794:	6d2f6564 	cfstr32vs	mvfx6, [pc, #-400]!	; 60c <_Min_Stack_Size+0x20c>
     798:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
     79c:	2f00656e 	svccs	0x0000656e
     7a0:	2f727375 	svccs	0x00727375
     7a4:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     7a8:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
     7ac:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     7b0:	6e692f69 	cdpvs	15, 6, cr2, cr9, cr9, {3}
     7b4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     7b8:	2e2e0065 	cdpcs	0, 2, cr0, cr14, cr5, {3}
     7bc:	694c2f2f 	stmdbvs	ip, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}^
     7c0:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
     7c4:	2f736569 	svccs	0x00736569
     7c8:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
     7cc:	65442f53 	strbvs	r2, [r4, #-3923]	; 0xf53
     7d0:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
     7d4:	2f54532f 	svccs	0x0054532f
     7d8:	334d5453 	movtcc	r5, #54355	; 0xd453
     7dc:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
     7e0:	6e492f78 	mcrvs	15, 2, r2, cr9, cr8, {3}
     7e4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     7e8:	2e2e0065 	cdpcs	0, 2, cr0, cr14, cr5, {3}
     7ec:	694c2f2f 	stmdbvs	ip, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}^
     7f0:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
     7f4:	2f736569 	svccs	0x00736569
     7f8:	334d5453 	movtcc	r5, #54355	; 0xd453
     7fc:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
     800:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xf78
     804:	72655064 	rsbvc	r5, r5, #100	; 0x64
     808:	5f687069 	svcpl	0x00687069
     80c:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     810:	692f7265 	stmdbvs	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
     814:	2e00636e 	cdpcs	3, 0, cr6, cr0, cr14, {3}
     818:	4c2f2f2e 	stcmi	15, cr2, [pc], #-184	; 768 <_Min_Stack_Size+0x368>
     81c:	61726269 	cmnvs	r2, r9, ror #4
     820:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
     824:	534d432f 	movtpl	r4, #54063	; 0xd32f
     828:	492f5349 	stmdbmi	pc!, {r0, r3, r6, r8, r9, ip, lr}	; <UNPREDICTABLE>
     82c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     830:	00006564 	andeq	r6, r0, r4, ror #10
     834:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     838:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     83c:	70675f78 	rsbvc	r5, r7, r8, ror pc
     840:	632e6f69 	teqvs	lr, #420	; 0x1a4
     844:	00000100 	andeq	r0, r0, r0, lsl #2
     848:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
     84c:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
     850:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     854:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
     858:	00000200 	andeq	r0, r0, r0, lsl #4
     85c:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     860:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     864:	00000300 	andeq	r0, r0, r0, lsl #6
     868:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     86c:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     870:	00682e78 	rsbeq	r2, r8, r8, ror lr
     874:	73000004 	movwvc	r0, #4
     878:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     87c:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     880:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
     884:	00682e6f 	rsbeq	r2, r8, pc, ror #28
     888:	63000005 	movwvs	r0, #5
     88c:	5f65726f 	svcpl	0x0065726f
     890:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
     894:	00060068 	andeq	r0, r6, r8, rrx
     898:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     89c:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
     8a0:	725f7878 	subsvc	r7, pc, #120, 16	; 0x780000
     8a4:	682e6363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, sp, lr}
     8a8:	00000500 	andeq	r0, r0, r0, lsl #10
     8ac:	02050000 	andeq	r0, r5, #0
     8b0:	08000640 	stmdaeq	r0, {r6, r9, sl}
     8b4:	0100ff03 	tsteq	r0, r3, lsl #30
     8b8:	41414124 	cmpmi	r1, r4, lsr #2
     8bc:	41414141 	cmpmi	r1, r1, asr #2
     8c0:	4c434142 	stfmie	f4, [r3], {66}	; 0x42
     8c4:	032b3f59 	teqeq	fp, #356	; 0x164
     8c8:	034b2e4a 	movteq	r2, #48714	; 0xbe4a
     8cc:	48032e38 	stmdami	r3, {r3, r4, r5, r9, sl, fp, sp}
     8d0:	034b322e 	movteq	r3, #45614	; 0xb22e
     8d4:	4d032e33 	stcmi	14, cr2, [r3, #-204]	; 0xffffff34
     8d8:	034b322e 	movteq	r3, #45614	; 0xb22e
     8dc:	52032e2e 	andpl	r2, r3, #736	; 0x2e0
     8e0:	034b322e 	movteq	r3, #45614	; 0xb22e
     8e4:	57032e29 	strpl	r2, [r3, -r9, lsr #28]
     8e8:	034b322e 	movteq	r3, #45614	; 0xb22e
     8ec:	5c032e24 	stcpl	14, cr2, [r3], {36}	; 0x24
     8f0:	034b322e 	movteq	r3, #45614	; 0xb22e
     8f4:	61032e1f 	tstvs	r3, pc, lsl lr
     8f8:	034b322e 	movteq	r3, #45614	; 0xb22e
     8fc:	66032e1a 			; <UNDEFINED> instruction: 0x66032e1a
     900:	034b322e 	movteq	r3, #45614	; 0xb22e
     904:	6b032e15 	blvs	cc160 <_Min_Stack_Size+0xcbd60>
     908:	0359332e 	cmpeq	r9, #-1207959552	; 0xb8000000
     90c:	71033c0f 	tstvc	r3, pc, lsl #24
     910:	0359322e 	cmpeq	r9, #-536870910	; 0xe0000002
     914:	76033c0a 	strvc	r3, [r3], -sl, lsl #24
     918:	0019022e 	andseq	r0, r9, lr, lsr #4
     91c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     920:	00079c02 	andeq	r9, r7, r2, lsl #24
     924:	01ca0308 	biceq	r0, sl, r8, lsl #6
     928:	3c0b0301 	stccc	3, cr0, [fp], {1}
     92c:	78032630 	stmdavc	r3, {r4, r5, r9, sl, sp}
     930:	30305a3c 	eorscc	r5, r0, ip, lsr sl
     934:	752d2f30 	strvc	r2, [sp, #-3888]!	; 0xf30
     938:	2c302c4c 	ldccs	12, cr2, [r0], #-304	; 0xfffffed0
     93c:	20120330 	andscs	r0, r2, r0, lsr r3
     940:	032f2d21 	teqeq	pc, #2112	; 0x840
     944:	1e033c62 	cdpne	12, 0, cr3, cr3, cr2, {3}
     948:	20620320 	rsbcs	r0, r2, r0, lsr #6
     94c:	03201e03 	teqeq	r0, #3, 28	; 0x30
     950:	21033c62 	tstcs	r3, r2, ror #24
     954:	3c700320 	ldclcc	3, cr0, [r0], #-128	; 0xffffff80
     958:	7803352f 	stmdavc	r3, {r0, r1, r2, r3, r5, r8, sl, ip, sp}
     95c:	59884b2e 	stmibpl	r8, {r1, r2, r3, r5, r8, r9, fp, lr}
     960:	01000902 	tsteq	r0, r2, lsl #18
     964:	02050001 	andeq	r0, r5, #1
     968:	08000858 	stmdaeq	r0, {r3, r4, r6, fp}
     96c:	0101fe03 	tsteq	r1, r3, lsl #28
     970:	213d1f15 	teqcs	sp, r5, lsl pc
     974:	02022121 	andeq	r2, r2, #1073741832	; 0x40000008
     978:	00010100 	andeq	r0, r1, r0, lsl #2
     97c:	086c0205 	stmdaeq	ip!, {r0, r2, r9}^
     980:	95030800 	strls	r0, [r3, #-2048]	; 0x800
     984:	42210102 	eormi	r0, r1, #-2147483648	; 0x80000000
     988:	3022303e 	eorcc	r3, r2, lr, lsr r0
     98c:	02022f30 	andeq	r2, r2, #48, 30	; 0xc0
     990:	00010100 	andeq	r0, r1, r0, lsl #2
     994:	08900205 	ldmeq	r0, {r0, r2, r9}
     998:	c3030800 	movwgt	r0, #14336	; 0x3800
     99c:	03190102 	tsteq	r9, #-2147483648	; 0x80000000
     9a0:	04022e09 	streq	r2, [r2], #-3593	; 0xe09
     9a4:	00010100 	andeq	r0, r1, r0, lsl #2
     9a8:	089c0205 	ldmeq	ip, {r0, r2, r9}
     9ac:	dd030800 	stcle	8, cr0, [r3, #-0]
     9b0:	21160102 	tstcs	r6, r2, lsl #2
     9b4:	01000202 	tsteq	r0, r2, lsl #4
     9b8:	02050001 	andeq	r0, r5, #1
     9bc:	080008a4 	stmdaeq	r0, {r2, r5, r7, fp}
     9c0:	0102ee03 	tsteq	r2, r3, lsl #28
     9c4:	2e090319 	mcrcs	3, 0, r0, cr9, cr9, {0}
     9c8:	01000402 	tsteq	r0, r2, lsl #8
     9cc:	02050001 	andeq	r0, r5, #1
     9d0:	080008b0 	stmdaeq	r0, {r4, r5, r7, fp}
     9d4:	01038803 	tsteq	r3, r3, lsl #16
     9d8:	02022116 	andeq	r2, r2, #-2147483643	; 0x80000005
     9dc:	00010100 	andeq	r0, r1, r0, lsl #2
     9e0:	08b80205 	ldmeq	r8!, {r0, r2, r9}
     9e4:	9c030800 	stcls	8, cr0, [r3], {-0}
     9e8:	02170103 	andseq	r0, r7, #-1073741824	; 0xc0000000
     9ec:	01010002 	tsteq	r1, r2
     9f0:	bc020500 	cfstr32lt	mvfx0, [r2], {-0}
     9f4:	03080008 	movweq	r0, #32776	; 0x8008
     9f8:	170103b1 			; <UNDEFINED> instruction: 0x170103b1
     9fc:	01000202 	tsteq	r0, r2, lsl #4
     a00:	02050001 	andeq	r0, r5, #1
     a04:	080008c0 	stmdaeq	r0, {r6, r7, fp}
     a08:	0103c703 	tsteq	r3, r3, lsl #14
     a0c:	022a2618 	eoreq	r2, sl, #24, 12	; 0x1800000
     a10:	01010002 	tsteq	r1, r2
     a14:	cc020500 	cfstr32gt	mvfx0, [r2], {-0}
     a18:	03080008 	movweq	r0, #32776	; 0x8008
     a1c:	160103e0 	strne	r0, [r1], -r0, ror #7
     a20:	01000202 	tsteq	r0, r2, lsl #4
     a24:	02050001 	andeq	r0, r5, #1
     a28:	080008d0 	stmdaeq	r0, {r4, r6, r7, fp}
     a2c:	0103f003 	tsteq	r3, r3
     a30:	00040216 	andeq	r0, r4, r6, lsl r2
     a34:	05000101 	streq	r0, [r0, #-257]	; 0x101
     a38:	0008d802 	andeq	sp, r8, r2, lsl #16
     a3c:	04c30308 	strbeq	r0, [r3], #776	; 0x308
     a40:	3c090301 	stccc	3, cr0, [r9], {1}
     a44:	032e7703 	teqeq	lr, #786432	; 0xc0000
     a48:	67212009 	strvs	r2, [r1, -r9]!
     a4c:	21222a22 	teqcs	r2, r2, lsr #20
     a50:	00010221 	andeq	r0, r1, r1, lsr #4
     a54:	05c00101 	strbeq	r0, [r0, #257]	; 0x101
     a58:	00020000 	andeq	r0, r2, r0
     a5c:	0000015a 	andeq	r0, r0, sl, asr r1
     a60:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     a64:	0101000d 	tsteq	r1, sp
     a68:	00000101 	andeq	r0, r0, r1, lsl #2
     a6c:	00000100 	andeq	r0, r0, r0, lsl #2
     a70:	2f2e2e01 	svccs	0x002e2e01
     a74:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
     a78:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
     a7c:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
     a80:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     a84:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
     a88:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
     a8c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     a90:	445f6870 	ldrbmi	r6, [pc], #-2160	; a98 <_Min_Stack_Size+0x698>
     a94:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
     a98:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
     a9c:	752f0063 	strvc	r0, [pc, #-99]!	; a41 <_Min_Stack_Size+0x641>
     aa0:	612f7273 	teqvs	pc, r3, ror r2	; <UNPREDICTABLE>
     aa4:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     aa8:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     aac:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     ab0:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     ab4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
     ab8:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
     abc:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0x968
     ac0:	73752f00 	cmnvc	r5, #0, 30
     ac4:	72612f72 	rsbvc	r2, r1, #456	; 0x1c8
     ac8:	6f6e2d6d 	svcvs	0x006e2d6d
     acc:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
     ad0:	2f696261 	svccs	0x00696261
     ad4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     ad8:	00656475 	rsbeq	r6, r5, r5, ror r4
     adc:	2f2f2e2e 	svccs	0x002f2e2e
     ae0:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
     ae4:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
     ae8:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
     aec:	2f534953 	svccs	0x00534953
     af0:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
     af4:	532f6563 	teqpl	pc, #415236096	; 0x18c00000
     af8:	54532f54 	ldrbpl	r2, [r3], #-3924	; 0xf54
     afc:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     b00:	2f787834 	svccs	0x00787834
     b04:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
     b08:	00656475 	rsbeq	r6, r5, r5, ror r4
     b0c:	2f2f2e2e 	svccs	0x002f2e2e
     b10:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
     b14:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
     b18:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
     b1c:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     b20:	5f787834 	svcpl	0x00787834
     b24:	50647453 	rsbpl	r7, r4, r3, asr r4
     b28:	70697265 	rsbvc	r7, r9, r5, ror #4
     b2c:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
     b30:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     b34:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     b38:	2f2e2e00 	svccs	0x002e2e00
     b3c:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
     b40:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
     b44:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
     b48:	5349534d 	movtpl	r5, #37709	; 0x934d
     b4c:	636e492f 	cmnvs	lr, #770048	; 0xbc000
     b50:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
     b54:	74730000 	ldrbtvc	r0, [r3], #-0
     b58:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     b5c:	5f787834 	svcpl	0x00787834
     b60:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
     b64:	00010063 	andeq	r0, r1, r3, rrx
     b68:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xf00
     b6c:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
     b70:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     b74:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
     b78:	00020068 	andeq	r0, r2, r8, rrx
     b7c:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
     b80:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
     b84:	00030068 	andeq	r0, r3, r8, rrx
     b88:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     b8c:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
     b90:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
     b94:	00000400 	andeq	r0, r0, r0, lsl #8
     b98:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     b9c:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     ba0:	63725f78 	cmnvs	r2, #120, 30	; 0x1e0
     ba4:	00682e63 	rsbeq	r2, r8, r3, ror #28
     ba8:	63000005 	movwvs	r0, #5
     bac:	5f65726f 	svcpl	0x0065726f
     bb0:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
     bb4:	00060068 	andeq	r0, r6, r8, rrx
     bb8:	05000000 	streq	r0, [r0, #-0]
     bbc:	00090002 	andeq	r0, r9, r2
     bc0:	01d50308 	bicseq	r0, r5, r8, lsl #6
     bc4:	0f031401 	svceq	0x00031401
     bc8:	20710320 	rsbscs	r0, r1, r0, lsr #6
     bcc:	222c1d23 	eorcs	r1, ip, #2240	; 0x8c0
     bd0:	23232323 	teqcs	r3, #-1946157056	; 0x8c000000
     bd4:	5b207a03 	blpl	81f3e8 <_Min_Stack_Size+0x81efe8>
     bd8:	52313123 	eorspl	r3, r1, #-1073741816	; 0xc0000008
     bdc:	0230231b 	eorseq	r2, r0, #1811939328	; 0x6c000000
     be0:	0101000a 	tsteq	r1, sl
     be4:	50020500 	andpl	r0, r2, r0, lsl #10
     be8:	03080009 	movweq	r0, #32777	; 0x8009
     bec:	17010288 	strne	r0, [r1, -r8, lsl #5]
     bf0:	0005023f 	andeq	r0, r5, pc, lsr r2
     bf4:	05000101 	streq	r0, [r0, #-257]	; 0x101
     bf8:	00096002 	andeq	r6, r9, r2
     bfc:	02a00308 	adceq	r0, r0, #8, 6	; 0x20000000
     c00:	97032101 	strls	r2, [r3, -r1, lsl #2]
     c04:	e903200e 	stmdb	r3, {r1, r2, r3, sp}
     c08:	02002071 	andeq	r2, r0, #113	; 0x71
     c0c:	97030104 	strls	r0, [r3, -r4, lsl #2]
     c10:	0200200e 	andeq	r2, r0, #14
     c14:	0d030104 	stfeqs	f0, [r3, #-16]
     c18:	71e30320 	mvnvc	r0, r0, lsr #6
     c1c:	8f033d2e 	svchi	0x00033d2e
     c20:	fb034a0e 	blx	d3462 <_Min_Stack_Size+0xd3062>
     c24:	032f2e71 	teqeq	pc, #1808	; 0x710
     c28:	023d2e74 	eorseq	r2, sp, #116, 28	; 0x740
     c2c:	01010005 	tsteq	r1, r5
     c30:	98020500 	stmdals	r2, {r8, sl}
     c34:	03080009 	movweq	r0, #32777	; 0x8009
     c38:	170102bf 			; <UNDEFINED> instruction: 0x170102bf
     c3c:	02313131 	eorseq	r3, r1, #1073741836	; 0x4000000c
     c40:	01010004 	tsteq	r1, r4
     c44:	ac020500 	cfstr32ge	mvfx0, [r2], {-0}
     c48:	03080009 	movweq	r0, #32777	; 0x8009
     c4c:	160102e3 	strne	r0, [r1], -r3, ror #5
     c50:	01000602 	tsteq	r0, r2, lsl #12
     c54:	02050001 	andeq	r0, r5, #1
     c58:	080009b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, fp}
     c5c:	0102fc03 	tsteq	r2, r3, lsl #24
     c60:	7a033418 	bvc	cdcc8 <_Min_Stack_Size+0xcd8c8>
     c64:	44232320 	strtmi	r2, [r3], #-800	; 0x320
     c68:	03022146 	movweq	r2, #8518	; 0x2146
     c6c:	00010100 	andeq	r0, r1, r0, lsl #2
     c70:	09d80205 	ldmibeq	r8, {r0, r2, r9}^
     c74:	a4030800 	strge	r0, [r3], #-2048	; 0x800
     c78:	02160103 	andseq	r0, r6, #-1073741824	; 0xc0000000
     c7c:	01010006 	tsteq	r1, r6
     c80:	e4020500 	str	r0, [r2], #-1280	; 0x500
     c84:	03080009 	movweq	r0, #32777	; 0x8009
     c88:	200103cf 	andcs	r0, r1, pc, asr #7
     c8c:	0502ae28 	streq	sl, [r2, #-3624]	; 0xe28
     c90:	00010100 	andeq	r0, r1, r0, lsl #2
     c94:	0a080205 	beq	2014b0 <_Min_Stack_Size+0x2010b0>
     c98:	e6030800 	str	r0, [r3], -r0, lsl #16
     c9c:	02150103 	andseq	r0, r5, #-1073741824	; 0xc0000000
     ca0:	01010006 	tsteq	r1, r6
     ca4:	14020500 	strne	r0, [r2], #-1280	; 0x500
     ca8:	0308000a 	movweq	r0, #32778	; 0x800a
     cac:	180104a8 	stmdane	r1, {r3, r5, r7, sl}
     cb0:	01000c02 	tsteq	r0, r2, lsl #24
     cb4:	02050001 	andeq	r0, r5, #1
     cb8:	08000a2c 	stmdaeq	r0, {r2, r3, r5, r9, fp}
     cbc:	0104b903 	tsteq	r4, r3, lsl #18
     cc0:	00060215 	andeq	r0, r6, r5, lsl r2
     cc4:	05000101 	streq	r0, [r0, #-257]	; 0x101
     cc8:	000a3802 	andeq	r3, sl, r2, lsl #16
     ccc:	04d60308 	ldrbeq	r0, [r6], #776	; 0x308
     cd0:	0c021701 	stceq	7, cr1, [r2], {1}
     cd4:	00010100 	andeq	r0, r1, r0, lsl #2
     cd8:	0a500205 	beq	14014f4 <_Min_Stack_Size+0x14010f4>
     cdc:	e8030800 	stmda	r3, {fp}
     ce0:	02150104 	andseq	r0, r5, #4, 2
     ce4:	01010006 	tsteq	r1, r6
     ce8:	5c020500 	cfstr32pl	mvfx0, [r2], {-0}
     cec:	0308000a 	movweq	r0, #32778	; 0x800a
     cf0:	150104fa 	strne	r0, [r1, #-1274]	; 0x4fa
     cf4:	01000602 	tsteq	r0, r2, lsl #12
     cf8:	02050001 	andeq	r0, r5, #1
     cfc:	08000a68 	stmdaeq	r0, {r3, r5, r6, r9, fp}
     d00:	01059303 	tsteq	r5, r3, lsl #6
     d04:	31313119 	teqcc	r1, r9, lsl r1
     d08:	01000402 	tsteq	r0, r2, lsl #8
     d0c:	02050001 	andeq	r0, r5, #1
     d10:	08000a7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, fp}
     d14:	0105b903 	tsteq	r5, r3, lsl #18
     d18:	31313119 	teqcc	r1, r9, lsl r1
     d1c:	01000402 	tsteq	r0, r2, lsl #8
     d20:	02050001 	andeq	r0, r5, #1
     d24:	08000a90 	stmdaeq	r0, {r4, r7, r9, fp}
     d28:	0106df03 	tsteq	r6, r3, lsl #30
     d2c:	23313118 	teqcs	r1, #24, 2
     d30:	01000502 	tsteq	r0, r2, lsl #10
     d34:	02050001 	andeq	r0, r5, #1
     d38:	08000aa4 	stmdaeq	r0, {r2, r5, r7, r9, fp}
     d3c:	0106fb03 	tsteq	r6, r3, lsl #22
     d40:	06022f13 			; <UNDEFINED> instruction: 0x06022f13
     d44:	00010100 	andeq	r0, r1, r0, lsl #2
     d48:	0ab40205 	beq	fed01564 <_estack+0xdecd1564>
     d4c:	94030800 	strls	r0, [r3], #-2048	; 0x800
     d50:	31180107 	tstcc	r8, r7, lsl #2
     d54:	05022331 	streq	r2, [r2, #-817]	; 0x331
     d58:	00010100 	andeq	r0, r1, r0, lsl #2
     d5c:	0ac80205 	beq	ff201578 <_estack+0xdf1d1578>
     d60:	b4030800 	strlt	r0, [r3], #-2048	; 0x800
     d64:	31180107 	tstcc	r8, r7, lsl #2
     d68:	05022331 	streq	r2, [r2, #-817]	; 0x331
     d6c:	00010100 	andeq	r0, r1, r0, lsl #2
     d70:	0adc0205 	beq	ff70158c <_estack+0xdf6d158c>
     d74:	d3030800 	movwle	r0, #14336	; 0x3800
     d78:	31180107 	tstcc	r8, r7, lsl #2
     d7c:	04023131 	streq	r3, [r2], #-305	; 0x131
     d80:	00010100 	andeq	r0, r1, r0, lsl #2
     d84:	0af00205 	beq	ffc015a0 <_estack+0xdfbd15a0>
     d88:	87030800 	strhi	r0, [r3, -r0, lsl #16]
     d8c:	4c160108 	ldfmis	f0, [r6], {8}
     d90:	26207a03 	strtcs	r7, [r0], -r3, lsl #20
     d94:	343c1f03 	ldrtcc	r1, [ip], #-3843	; 0xf03
     d98:	2f211e22 	svccs	0x00211e22
     d9c:	2f213122 	svccs	0x00213122
     da0:	2a253f22 	bcs	950a30 <_Min_Stack_Size+0x950630>
     da4:	032f222f 	teqeq	pc, #-268435454	; 0xf0000002
     da8:	262f204e 	strtcs	r2, [pc], -lr, asr #32
     dac:	231d2521 	tstcs	sp, #138412032	; 0x8400000
     db0:	20760333 	rsbscs	r0, r6, r3, lsr r3
     db4:	692e0a03 	stmdbvs	lr!, {r0, r1, r9, fp}
     db8:	0a023d67 	beq	9035c <_Min_Stack_Size+0x8ff5c>
     dbc:	00010100 	andeq	r0, r1, r0, lsl #2
     dc0:	0b800205 	bleq	fe0015dc <_estack+0xddfd15dc>
     dc4:	84030800 	strhi	r0, [r3], #-2048	; 0x800
     dc8:	5a180109 	bpl	6011f4 <_Min_Stack_Size+0x600df4>
     dcc:	3f312b34 	svccc	0x00312b34
     dd0:	00090224 	andeq	r0, r9, r4, lsr #4
     dd4:	05000101 	streq	r0, [r0, #-257]	; 0x101
     dd8:	000bb002 	andeq	fp, fp, r2
     ddc:	09a40308 	stmibeq	r4!, {r3, r8, r9}
     de0:	06021601 	streq	r1, [r2], -r1, lsl #12
     de4:	00010100 	andeq	r0, r1, r0, lsl #2
     de8:	0bbc0205 	bleq	fef01604 <_estack+0xdeed1604>
     dec:	b5030800 	strlt	r0, [r3, #-2048]	; 0x800
     df0:	02150109 	andseq	r0, r5, #1073741826	; 0x40000002
     df4:	01010006 	tsteq	r1, r6
     df8:	c8020500 	stmdagt	r2, {r8, sl}
     dfc:	0308000b 	movweq	r0, #32779	; 0x800b
     e00:	160109c6 	strne	r0, [r1], -r6, asr #19
     e04:	01000602 	tsteq	r0, r2, lsl #12
     e08:	02050001 	andeq	r0, r5, #1
     e0c:	08000bd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, fp}
     e10:	0109db03 	tsteq	r9, r3, lsl #22
     e14:	311d4218 	tstcc	sp, r8, lsl r2
     e18:	00050223 	andeq	r0, r5, r3, lsr #4
     e1c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     e20:	000bec02 	andeq	lr, fp, r2, lsl #24
     e24:	09fb0308 	ldmibeq	fp!, {r3, r8, r9}^
     e28:	1d421801 	stclne	8, cr1, [r2, #-4]
     e2c:	06023131 			; <UNDEFINED> instruction: 0x06023131
     e30:	00010100 	andeq	r0, r1, r0, lsl #2
     e34:	0c080205 	sfmeq	f0, 4, [r8], {5}
     e38:	9f030800 	svcls	0x00030800
     e3c:	3f18010a 	svccc	0x0018010a
     e40:	06022331 			; <UNDEFINED> instruction: 0x06022331
     e44:	00010100 	andeq	r0, r1, r0, lsl #2
     e48:	0c200205 	sfmeq	f0, 4, [r0], #-20	; 0xffffffec
     e4c:	c3030800 	movwgt	r0, #14336	; 0x3800
     e50:	3f18010a 	svccc	0x0018010a
     e54:	06022331 			; <UNDEFINED> instruction: 0x06022331
     e58:	00010100 	andeq	r0, r1, r0, lsl #2
     e5c:	0c380205 	lfmeq	f0, 4, [r8], #-20	; 0xffffffec
     e60:	e4030800 	str	r0, [r3], #-2048	; 0x800
     e64:	3f18010a 	svccc	0x0018010a
     e68:	06022331 			; <UNDEFINED> instruction: 0x06022331
     e6c:	00010100 	andeq	r0, r1, r0, lsl #2
     e70:	0c500205 	lfmeq	f0, 2, [r0], {5}
     e74:	89030800 	stmdbhi	r3, {fp}
     e78:	0216010b 	andseq	r0, r6, #-1073741822	; 0xc0000002
     e7c:	01010006 	tsteq	r1, r6
     e80:	5c020500 	cfstr32pl	mvfx0, [r2], {-0}
     e84:	0308000c 	movweq	r0, #32780	; 0x800c
     e88:	19010bb4 	stmdbne	r1, {r2, r4, r5, r7, r8, r9, fp}
     e8c:	0246262c 	subeq	r2, r6, #44, 12	; 0x2c00000
     e90:	01010005 	tsteq	r1, r5
     e94:	74020500 	strvc	r0, [r2], #-1280	; 0x500
     e98:	0308000c 	movweq	r0, #32780	; 0x800c
     e9c:	19010bd4 	stmdbne	r1, {r2, r4, r6, r7, r8, r9, fp}
     ea0:	0246262c 	subeq	r2, r6, #44, 12	; 0x2c00000
     ea4:	01010005 	tsteq	r1, r5
     ea8:	8c020500 	cfstr32hi	mvfx0, [r2], {-0}
     eac:	0308000c 	movweq	r0, #32780	; 0x800c
     eb0:	19010bf0 	stmdbne	r1, {r4, r5, r6, r7, r8, r9, fp}
     eb4:	0246262c 	subeq	r2, r6, #44, 12	; 0x2c00000
     eb8:	01010005 	tsteq	r1, r5
     ebc:	a4020500 	strge	r0, [r2], #-1280	; 0x500
     ec0:	0308000c 	movweq	r0, #32780	; 0x800c
     ec4:	19010ca4 	stmdbne	r1, {r2, r5, r7, sl, fp}
     ec8:	0246262c 	subeq	r2, r6, #44, 12	; 0x2c00000
     ecc:	01010005 	tsteq	r1, r5
     ed0:	bc020500 	cfstr32lt	mvfx0, [r2], {-0}
     ed4:	0308000c 	movweq	r0, #32780	; 0x800c
     ed8:	19010cd1 	stmdbne	r1, {r0, r4, r6, r7, sl, fp}
     edc:	0246262c 	subeq	r2, r6, #44, 12	; 0x2c00000
     ee0:	01010005 	tsteq	r1, r5
     ee4:	d4020500 	strle	r0, [r2], #-1280	; 0x500
     ee8:	0308000c 	movweq	r0, #32780	; 0x800c
     eec:	19010cfb 	stmdbne	r1, {r0, r1, r3, r4, r5, r6, r7, sl, fp}
     ef0:	0246262c 	subeq	r2, r6, #44, 12	; 0x2c00000
     ef4:	01010005 	tsteq	r1, r5
     ef8:	ec020500 	cfstr32	mvfx0, [r2], {-0}
     efc:	0308000c 	movweq	r0, #32780	; 0x800c
     f00:	19010d98 	stmdbne	r1, {r3, r4, r7, r8, sl, fp}
     f04:	0246262c 	subeq	r2, r6, #44, 12	; 0x2c00000
     f08:	01010005 	tsteq	r1, r5
     f0c:	04020500 	streq	r0, [r2], #-1280	; 0x500
     f10:	0308000d 	movweq	r0, #32781	; 0x800d
     f14:	19010db1 	stmdbne	r1, {r0, r4, r5, r7, r8, sl, fp}
     f18:	0246262c 	subeq	r2, r6, #44, 12	; 0x2c00000
     f1c:	01010005 	tsteq	r1, r5
     f20:	1c020500 	cfstr32ne	mvfx0, [r2], {-0}
     f24:	0308000d 	movweq	r0, #32781	; 0x800d
     f28:	18010de2 	stmdane	r1, {r1, r5, r6, r7, r8, sl, fp}
     f2c:	0246262c 	subeq	r2, r6, #44, 12	; 0x2c00000
     f30:	01010005 	tsteq	r1, r5
     f34:	34020500 	strcc	r0, [r2], #-1280	; 0x500
     f38:	0308000d 	movweq	r0, #32781	; 0x800d
     f3c:	18010e8b 	stmdane	r1, {r0, r1, r3, r7, r9, sl, fp}
     f40:	0246262c 	subeq	r2, r6, #44, 12	; 0x2c00000
     f44:	01010005 	tsteq	r1, r5
     f48:	4c020500 	cfstr32mi	mvfx0, [r2], {-0}
     f4c:	0308000d 	movweq	r0, #32781	; 0x800d
     f50:	18010ebc 	stmdane	r1, {r2, r3, r4, r5, r7, r9, sl, fp}
     f54:	0246262c 	subeq	r2, r6, #44, 12	; 0x2c00000
     f58:	01010005 	tsteq	r1, r5
     f5c:	64020500 	strvs	r0, [r2], #-1280	; 0x500
     f60:	0308000d 	movweq	r0, #32781	; 0x800d
     f64:	18010edc 	stmdane	r1, {r2, r3, r4, r6, r7, r9, sl, fp}
     f68:	0246262c 	subeq	r2, r6, #44, 12	; 0x2c00000
     f6c:	01010005 	tsteq	r1, r5
     f70:	7c020500 	cfstr32vc	mvfx0, [r2], {-0}
     f74:	0308000d 	movweq	r0, #32781	; 0x800d
     f78:	18010ef8 	stmdane	r1, {r3, r4, r5, r6, r7, r9, sl, fp}
     f7c:	0246262c 	subeq	r2, r6, #44, 12	; 0x2c00000
     f80:	01010005 	tsteq	r1, r5
     f84:	94020500 	strls	r0, [r2], #-1280	; 0x500
     f88:	0308000d 	movweq	r0, #32781	; 0x800d
     f8c:	18010fac 	stmdane	r1, {r2, r3, r5, r7, r8, r9, sl, fp}
     f90:	0246262c 	subeq	r2, r6, #44, 12	; 0x2c00000
     f94:	01010005 	tsteq	r1, r5
     f98:	ac020500 	cfstr32ge	mvfx0, [r2], {-0}
     f9c:	0308000d 	movweq	r0, #32781	; 0x800d
     fa0:	18010fd9 	stmdane	r1, {r0, r3, r4, r6, r7, r8, r9, sl, fp}
     fa4:	0246262c 	subeq	r2, r6, #44, 12	; 0x2c00000
     fa8:	01010005 	tsteq	r1, r5
     fac:	c4020500 	strgt	r0, [r2], #-1280	; 0x500
     fb0:	0308000d 	movweq	r0, #32781	; 0x800d
     fb4:	19011087 	stmdbne	r1, {r0, r1, r2, r7, ip}
     fb8:	0245282b 	subeq	r2, r5, #2818048	; 0x2b0000
     fbc:	01010005 	tsteq	r1, r5
     fc0:	dc020500 	cfstr32le	mvfx0, [r2], {-0}
     fc4:	0308000d 	movweq	r0, #32781	; 0x800d
     fc8:	030110ac 	movweq	r1, #4268	; 0x10ac
     fcc:	32210109 	eorcc	r0, r1, #1073741826	; 0x40000002
     fd0:	03254022 	teqeq	r5, #34	; 0x22
     fd4:	69034a0a 	stmdbvs	r3, {r1, r3, r9, fp, lr}
     fd8:	2e0d033c 	mcrcs	3, 0, r0, cr13, cr12, {1}
     fdc:	024a0a03 	subeq	r0, sl, #12288	; 0x3000
     fe0:	01010005 	tsteq	r1, r5
     fe4:	10020500 	andne	r0, r2, r0, lsl #10
     fe8:	0308000e 	movweq	r0, #32782	; 0x800e
     fec:	140110d9 	strne	r1, [r1], #-217	; 0xd9
     ff0:	01000802 	tsteq	r0, r2, lsl #16
     ff4:	02050001 	andeq	r0, r5, #1
     ff8:	08000e20 	stmdaeq	r0, {r5, r9, sl, fp}
     ffc:	0110ed03 	tsteq	r0, r3, lsl #26
    1000:	3c0a0319 	stccc	3, cr0, [sl], {25}
    1004:	01000702 	tsteq	r0, r2, lsl #14
    1008:	02050001 	andeq	r0, r5, #1
    100c:	08000e34 	stmdaeq	r0, {r2, r4, r5, r9, sl, fp}
    1010:	01118f03 	tsteq	r1, r3, lsl #30
    1014:	00060218 	andeq	r0, r6, r8, lsl r2
    1018:	04950101 	ldreq	r0, [r5], #257	; 0x101
    101c:	00020000 	andeq	r0, r2, r0
    1020:	00000171 	andeq	r0, r0, r1, ror r1
    1024:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    1028:	0101000d 	tsteq	r1, sp
    102c:	00000101 	andeq	r0, r0, r1, lsl #2
    1030:	00000100 	andeq	r0, r0, r0, lsl #2
    1034:	2f2e2e01 	svccs	0x002e2e01
    1038:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    103c:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    1040:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    1044:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1048:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    104c:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    1050:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1054:	445f6870 	ldrbmi	r6, [pc], #-2160	; 105c <_Min_Stack_Size+0xc5c>
    1058:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    105c:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    1060:	752f0063 	strvc	r0, [pc, #-99]!	; 1005 <_Min_Stack_Size+0xc05>
    1064:	612f7273 	teqvs	pc, r3, ror r2	; <UNPREDICTABLE>
    1068:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    106c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    1070:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    1074:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    1078:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    107c:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    1080:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0x968
    1084:	73752f00 	cmnvc	r5, #0, 30
    1088:	72612f72 	rsbvc	r2, r1, #456	; 0x1c8
    108c:	6f6e2d6d 	svcvs	0x006e2d6d
    1090:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
    1094:	2f696261 	svccs	0x00696261
    1098:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    109c:	00656475 	rsbeq	r6, r5, r5, ror r4
    10a0:	2f2f2e2e 	svccs	0x002f2e2e
    10a4:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    10a8:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    10ac:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
    10b0:	2f534953 	svccs	0x00534953
    10b4:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    10b8:	532f6563 	teqpl	pc, #415236096	; 0x18c00000
    10bc:	54532f54 	ldrbpl	r2, [r3], #-3924	; 0xf54
    10c0:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    10c4:	2f787834 	svccs	0x00787834
    10c8:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
    10cc:	00656475 	rsbeq	r6, r5, r5, ror r4
    10d0:	2f2f2e2e 	svccs	0x002f2e2e
    10d4:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    10d8:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    10dc:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    10e0:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    10e4:	5f787834 	svcpl	0x00787834
    10e8:	50647453 	rsbpl	r7, r4, r3, asr r4
    10ec:	70697265 	rsbvc	r7, r9, r5, ror #4
    10f0:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    10f4:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    10f8:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    10fc:	2f2e2e00 	svccs	0x002e2e00
    1100:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    1104:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    1108:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
    110c:	5349534d 	movtpl	r5, #37709	; 0x934d
    1110:	636e492f 	cmnvs	lr, #770048	; 0xbc000
    1114:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    1118:	74730000 	ldrbtvc	r0, [r3], #-0
    111c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1120:	5f787834 	svcpl	0x00787834
    1124:	72617375 	rsbvc	r7, r1, #-738197503	; 0xd4000001
    1128:	00632e74 	rsbeq	r2, r3, r4, ror lr
    112c:	5f000001 	svcpl	0x00000001
    1130:	61666564 	cmnvs	r6, r4, ror #10
    1134:	5f746c75 	svcpl	0x00746c75
    1138:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
    113c:	00682e73 	rsbeq	r2, r8, r3, ror lr
    1140:	73000002 	movwvc	r0, #2
    1144:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    1148:	00682e74 	rsbeq	r2, r8, r4, ror lr
    114c:	73000003 	movwvc	r0, #3
    1150:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    1154:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    1158:	0400682e 	streq	r6, [r0], #-2094	; 0x82e
    115c:	74730000 	ldrbtvc	r0, [r3], #-0
    1160:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1164:	5f787834 	svcpl	0x00787834
    1168:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
    116c:	00050068 	andeq	r0, r5, r8, rrx
    1170:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    1174:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    1178:	755f7878 	ldrbvc	r7, [pc, #-2168]	; 908 <_Min_Stack_Size+0x508>
    117c:	74726173 	ldrbtvc	r6, [r2], #-371	; 0x173
    1180:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
    1184:	6f630000 	svcvs	0x00630000
    1188:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
    118c:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
    1190:	00000600 	andeq	r0, r0, r0, lsl #12
    1194:	02050000 	andeq	r0, r5, #0
    1198:	08000e40 	stmdaeq	r0, {r6, r9, sl, fp}
    119c:	0101bb03 	tsteq	r1, r3, lsl #22
    11a0:	41414124 	cmpmi	r1, r4, lsr #2
    11a4:	43414141 	movtmi	r4, #4417	; 0x1141
    11a8:	2b3f594c 	blcs	fd76e0 <_Min_Stack_Size+0xfd72e0>
    11ac:	4b2e5a03 	blmi	b979c0 <_Min_Stack_Size+0xb975c0>
    11b0:	032e2803 	teqeq	lr, #196608	; 0x30000
    11b4:	59322e58 	ldmdbpl	r2!, {r3, r4, r6, r9, sl, fp, sp}
    11b8:	033c2303 	teqeq	ip, #201326592	; 0xc000000
    11bc:	59322e5d 	ldmdbpl	r2!, {r0, r2, r3, r4, r6, r9, sl, fp, sp}
    11c0:	033c1e03 	teqeq	ip, #3, 28	; 0x30
    11c4:	59322e62 	ldmdbpl	r2!, {r1, r5, r6, r9, sl, fp, sp}
    11c8:	033c1903 	teqeq	ip, #49152	; 0xc000
    11cc:	59322e67 	ldmdbpl	r2!, {r0, r1, r2, r5, r6, r9, sl, fp, sp}
    11d0:	033c1403 	teqeq	ip, #50331648	; 0x3000000
    11d4:	4b322e6c 	blmi	c8cb8c <_Min_Stack_Size+0xc8c78c>
    11d8:	032e0f03 	teqeq	lr, #3, 30
    11dc:	59322e71 	ldmdbpl	r2!, {r0, r4, r5, r6, r9, sl, fp, sp}
    11e0:	033c0a03 	teqeq	ip, #12288	; 0x3000
    11e4:	12022e76 	andne	r2, r2, #1888	; 0x760
    11e8:	00010100 	andeq	r0, r1, r0, lsl #2
    11ec:	0f4c0205 	svceq	0x004c0205
    11f0:	f6030800 			; <UNDEFINED> instruction: 0xf6030800
    11f4:	16030101 	strne	r0, [r3], -r1, lsl #2
    11f8:	0f03272e 	svceq	0x0003272e
    11fc:	2e0e0320 	cdpcs	3, 0, cr0, cr14, cr0, {1}
    1200:	03205c03 	teqeq	r0, #768	; 0x300
    1204:	1903206a 	stmdbne	r3, {r1, r3, r5, r6, sp}
    1208:	0c033520 	cfstr32eq	mvfx3, [r3], {32}
    120c:	20740320 	rsbscs	r0, r4, r0, lsr #6
    1210:	20090323 	andcs	r0, r9, r3, lsr #6
    1214:	03207703 	teqeq	r0, #786432	; 0xc0000
    1218:	7a032009 	bvc	c9244 <_Min_Stack_Size+0xc8e44>
    121c:	31245020 	teqcc	r4, r0, lsr #32
    1220:	43033531 	movwmi	r3, #13617	; 0x3531
    1224:	203d0320 	eorscs	r0, sp, r0, lsr #6
    1228:	02003e24 	andeq	r3, r0, #36, 28	; 0x240
    122c:	3c060104 	stfccs	f0, [r6], {4}
    1230:	23245006 	teqcs	r4, #6
    1234:	03200d03 	teqeq	r0, #3, 26	; 0xc0
    1238:	4f312070 	svcmi	0x00312070
    123c:	7a03265a 	bvc	cabac <_Min_Stack_Size+0xca7ac>
    1240:	1d233f20 	stcne	15, cr3, [r3, #-128]!	; 0xffffff80
    1244:	2f78264d 	svccs	0x0078264d
    1248:	032e5d03 	teqeq	lr, #3, 26	; 0xc0
    124c:	2f7c2e1a 	svccs	0x007c2e1a
    1250:	01000702 	tsteq	r0, r2, lsl #14
    1254:	02050001 	andeq	r0, r5, #1
    1258:	08001010 	stmdaeq	r0, {r4, ip}
    125c:	0102e703 	tsteq	r2, r3, lsl #14
    1260:	1c321f15 	ldcne	15, cr1, [r2], #-84	; 0xffffffac
    1264:	21211d24 	teqcs	r1, r4, lsr #26
    1268:	00020222 	andeq	r0, r2, r2, lsr #4
    126c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1270:	00102802 	andseq	r2, r0, r2, lsl #16
    1274:	02fb0308 	rscseq	r0, fp, #8, 6	; 0x20000000
    1278:	20130301 	andscs	r0, r3, r1, lsl #6
    127c:	033c7703 	teqeq	ip, #786432	; 0xc0000
    1280:	77032009 	strvc	r2, [r3, -r9]
    1284:	2009034a 	andcs	r0, r9, sl, asr #6
    1288:	03207903 	teqeq	r0, #49152	; 0xc000
    128c:	022f2e09 	eoreq	r2, pc, #9, 28	; 0x90
    1290:	01010002 	tsteq	r1, r2
    1294:	4c020500 	cfstr32mi	mvfx0, [r2], {-0}
    1298:	03080010 	movweq	r0, #32784	; 0x8010
    129c:	1401039a 	strne	r0, [r1], #-922	; 0x39a
    12a0:	0221212f 	eoreq	r2, r1, #-1073741813	; 0xc000000b
    12a4:	01010002 	tsteq	r1, r2
    12a8:	58020500 	stmdapl	r2, {r8, sl}
    12ac:	03080010 	movweq	r0, #32784	; 0x8010
    12b0:	1a0103ab 	bne	42164 <_Min_Stack_Size+0x41d64>
    12b4:	0261281d 	rsbeq	r2, r1, #1900544	; 0x1d0000
    12b8:	01010005 	tsteq	r1, r5
    12bc:	74020500 	strvc	r0, [r2], #-1280	; 0x500
    12c0:	03080010 	movweq	r0, #32784	; 0x8010
    12c4:	170103c5 	strne	r0, [r1, -r5, asr #7]
    12c8:	0005024c 	andeq	r0, r5, ip, asr #4
    12cc:	05000101 	streq	r0, [r0, #-257]	; 0x101
    12d0:	00108802 	andseq	r8, r0, r2, lsl #16
    12d4:	03da0308 	bicseq	r0, sl, #8, 6	; 0x20000000
    12d8:	281d1a01 	ldmdacs	sp, {r0, r9, fp, ip}
    12dc:	00070245 	andeq	r0, r7, r5, asr #4
    12e0:	05000101 	streq	r0, [r0, #-257]	; 0x101
    12e4:	0010a402 	andseq	sl, r0, r2, lsl #8
    12e8:	03f40308 	mvnseq	r0, #8, 6	; 0x20000000
    12ec:	281d1a01 	ldmdacs	sp, {r0, r9, fp, ip}
    12f0:	00050261 	andeq	r0, r5, r1, ror #4
    12f4:	05000101 	streq	r0, [r0, #-257]	; 0x101
    12f8:	0010c002 	andseq	ip, r0, r2
    12fc:	04ad0308 	strteq	r0, [sp], #776	; 0x308
    1300:	04021801 	streq	r1, [r2], #-2049	; 0x801
    1304:	00010100 	andeq	r0, r1, r0, lsl #2
    1308:	10c80205 	sbcne	r0, r8, r5, lsl #4
    130c:	bd030800 	stclt	8, cr0, [r3, #-0]
    1310:	21170104 	tstcs	r7, r4, lsl #2
    1314:	01000302 	tsteq	r0, r2, lsl #6
    1318:	02050001 	andeq	r0, r5, #1
    131c:	080010d0 	stmdaeq	r0, {r4, r6, r7, ip}
    1320:	0104f103 	tsteq	r4, r3, lsl #2
    1324:	05026818 	streq	r6, [r2, #-2072]	; 0x818
    1328:	00010100 	andeq	r0, r1, r0, lsl #2
    132c:	10e80205 	rscne	r0, r8, r5, lsl #4
    1330:	85030800 	strhi	r0, [r3, #-2048]	; 0x800
    1334:	1d1a0105 	ldfnes	f0, [sl, #-20]	; 0xffffffec
    1338:	05026128 	streq	r6, [r2, #-296]	; 0x128
    133c:	00010100 	andeq	r0, r1, r0, lsl #2
    1340:	11040205 	tstne	r4, r5, lsl #4
    1344:	a0030800 	andge	r0, r3, r0, lsl #16
    1348:	67170105 	ldrvs	r0, [r7, -r5, lsl #2]
    134c:	01000502 	tsteq	r0, r2, lsl #10
    1350:	02050001 	andeq	r0, r5, #1
    1354:	0800111c 	stmdaeq	r0, {r2, r3, r4, r8, ip}
    1358:	0105e503 	tsteq	r5, r3, lsl #10
    135c:	05026717 	streq	r6, [r2, #-1815]	; 0x717
    1360:	00010100 	andeq	r0, r1, r0, lsl #2
    1364:	11340205 	teqne	r4, r5, lsl #4
    1368:	f7030800 			; <UNDEFINED> instruction: 0xf7030800
    136c:	1d1a0105 	ldfnes	f0, [sl, #-20]	; 0xffffffec
    1370:	05026128 	streq	r6, [r2, #-296]	; 0x128
    1374:	00010100 	andeq	r0, r1, r0, lsl #2
    1378:	11500205 	cmpne	r0, r5, lsl #4
    137c:	8f030800 	svchi	0x00030800
    1380:	02170106 	andseq	r0, r7, #-2147483647	; 0x80000001
    1384:	01010006 	tsteq	r1, r6
    1388:	5c020500 	cfstr32pl	mvfx0, [r2], {-0}
    138c:	03080011 	movweq	r0, #32785	; 0x8011
    1390:	1a0106c4 	bne	42ea8 <_Min_Stack_Size+0x42aa8>
    1394:	0261281d 	rsbeq	r2, r1, #1900544	; 0x1d0000
    1398:	01010005 	tsteq	r1, r5
    139c:	78020500 	stmdavc	r2, {r8, sl}
    13a0:	03080011 	movweq	r0, #32785	; 0x8011
    13a4:	17010798 			; <UNDEFINED> instruction: 0x17010798
    13a8:	0006023e 	andeq	r0, r6, lr, lsr r2
    13ac:	05000101 	streq	r0, [r0, #-257]	; 0x101
    13b0:	00118c02 	andseq	r8, r1, r2, lsl #24
    13b4:	07ab0308 	streq	r0, [fp, r8, lsl #6]!
    13b8:	281d1901 	ldmdacs	sp, {r0, r8, fp, ip}
    13bc:	00050261 	andeq	r0, r5, r1, ror #4
    13c0:	05000101 	streq	r0, [r0, #-257]	; 0x101
    13c4:	0011a802 	andseq	sl, r1, r2, lsl #16
    13c8:	07c40308 	strbeq	r0, [r4, r8, lsl #6]
    13cc:	281d1901 	ldmdacs	sp, {r0, r8, fp, ip}
    13d0:	00050261 	andeq	r0, r5, r1, ror #4
    13d4:	05000101 	streq	r0, [r0, #-257]	; 0x101
    13d8:	0011c402 	andseq	ip, r1, r2, lsl #8
    13dc:	088b0308 	stmeq	fp, {r3, r8, r9}
    13e0:	02671701 	rsbeq	r1, r7, #262144	; 0x40000
    13e4:	01010005 	tsteq	r1, r5
    13e8:	dc020500 	cfstr32le	mvfx0, [r2], {-0}
    13ec:	03080011 	movweq	r0, #32785	; 0x8011
    13f0:	1a01089d 	bne	4366c <_Min_Stack_Size+0x4326c>
    13f4:	0261281d 	rsbeq	r2, r1, #1900544	; 0x1d0000
    13f8:	01010005 	tsteq	r1, r5
    13fc:	f8020500 			; <UNDEFINED> instruction: 0xf8020500
    1400:	03080011 	movweq	r0, #32785	; 0x8011
    1404:	030108cb 	movweq	r0, #6347	; 0x18cb
    1408:	032a010a 	teqeq	sl, #-2147483646	; 0x80000002
    140c:	7a03200a 	bvc	c943c <_Min_Stack_Size+0xc903c>
    1410:	0003024a 	andeq	r0, r3, sl, asr #4
    1414:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1418:	00120c02 	andseq	r0, r2, r2, lsl #24
    141c:	09cf0308 	stmibeq	pc, {r3, r8, r9}^	; <UNPREDICTABLE>
    1420:	01150301 	tsteq	r5, r1, lsl #6
    1424:	032e6b03 	teqeq	lr, #3072	; 0xc00
    1428:	22322011 	eorscs	r2, r2, #17
    142c:	2224301e 	eorcs	r3, r4, #30
    1430:	261e2432 			; <UNDEFINED> instruction: 0x261e2432
    1434:	3c7a033e 	ldclcc	3, cr0, [sl], #-248	; 0xffffff08
    1438:	3c6e0334 	stclcc	3, cr0, [lr], #-208	; 0xffffff30
    143c:	01000202 	tsteq	r0, r2, lsl #4
    1440:	02050001 	andeq	r0, r5, #1
    1444:	08001248 	stmdaeq	r0, {r3, r6, r9, ip}
    1448:	010a8f03 	tsteq	sl, r3, lsl #30
    144c:	03010c03 	movweq	r0, #7171	; 0x1c03
    1450:	04022e09 	streq	r2, [r2], #-3593	; 0xe09
    1454:	00010100 	andeq	r0, r1, r0, lsl #2
    1458:	12540205 	subsne	r0, r4, #1342177280	; 0x50000000
    145c:	c0030800 	andgt	r0, r3, r0, lsl #16
    1460:	0b03010a 	bleq	c1890 <_Min_Stack_Size+0xc1490>
    1464:	00040201 	andeq	r0, r4, r1, lsl #4
    1468:	05000101 	streq	r0, [r0, #-257]	; 0x101
    146c:	00125c02 	andseq	r5, r2, r2, lsl #24
    1470:	0ae20308 	beq	ff882098 <_estack+0xdf852098>
    1474:	200e0301 	andcs	r0, lr, r1, lsl #6
    1478:	301e3e31 	andscc	r3, lr, r1, lsr lr
    147c:	41322224 	teqmi	r2, r4, lsr #4
    1480:	0402002f 	streq	r0, [r2], #-47	; 0x2f
    1484:	02001e01 	andeq	r1, r0, #1, 28
    1488:	004c0104 	subeq	r0, ip, r4, lsl #2
    148c:	22010402 	andcs	r0, r1, #33554432	; 0x2000000
    1490:	01040200 	mrseq	r0, R12_usr
    1494:	03243844 	teqeq	r4, #68, 16	; 0x440000
    1498:	04023c68 	streq	r3, [r2], #-3176	; 0xc68
    149c:	00010100 	andeq	r0, r1, r0, lsl #2
    14a0:	12a80205 	adcne	r0, r8, #1342177280	; 0x50000000
    14a4:	ac030800 	stcge	8, cr0, [r3], {-0}
    14a8:	0d03010b 	stfeqs	f0, [r3, #-44]	; 0xffffffd4
    14ac:	04024b01 	streq	r4, [r2], #-2817	; 0xb01
    14b0:	eb010100 	bl	418b8 <_Min_Stack_Size+0x414b8>
    14b4:	02000001 	andeq	r0, r0, #1
    14b8:	00015d00 	andeq	r5, r1, r0, lsl #26
    14bc:	fb010200 	blx	41cc6 <_Min_Stack_Size+0x418c6>
    14c0:	01000d0e 	tsteq	r0, lr, lsl #26
    14c4:	00010101 	andeq	r0, r1, r1, lsl #2
    14c8:	00010000 	andeq	r0, r1, r0
    14cc:	2e2e0100 	sufcse	f0, f6, f0
    14d0:	694c2f2f 	stmdbvs	ip, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}^
    14d4:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    14d8:	2f736569 	svccs	0x00736569
    14dc:	334d5453 	movtcc	r5, #54355	; 0xd453
    14e0:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    14e4:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xf78
    14e8:	72655064 	rsbvc	r5, r5, #100	; 0x64
    14ec:	5f687069 	svcpl	0x00687069
    14f0:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    14f4:	732f7265 	teqvc	pc, #1342177286	; 0x50000006
    14f8:	2f006372 	svccs	0x00006372
    14fc:	2f727375 	svccs	0x00727375
    1500:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    1504:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
    1508:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    150c:	6e692f69 	cdpvs	15, 6, cr2, cr9, cr9, {3}
    1510:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    1514:	616d2f65 	cmnvs	sp, r5, ror #30
    1518:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    151c:	752f0065 	strvc	r0, [pc, #-101]!	; 14bf <_Min_Stack_Size+0x10bf>
    1520:	612f7273 	teqvs	pc, r3, ror r2	; <UNPREDICTABLE>
    1524:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    1528:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    152c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    1530:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    1534:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    1538:	2f2e2e00 	svccs	0x002e2e00
    153c:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    1540:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    1544:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
    1548:	5349534d 	movtpl	r5, #37709	; 0x934d
    154c:	7665442f 	strbtvc	r4, [r5], -pc, lsr #8
    1550:	2f656369 	svccs	0x00656369
    1554:	532f5453 	teqpl	pc, #1392508928	; 0x53000000
    1558:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    155c:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    1560:	636e492f 	cmnvs	lr, #770048	; 0xbc000
    1564:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    1568:	2f2e2e00 	svccs	0x002e2e00
    156c:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    1570:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    1574:	432f7365 	teqmi	pc, #-1811939327	; 0x94000001
    1578:	5349534d 	movtpl	r5, #37709	; 0x934d
    157c:	636e492f 	cmnvs	lr, #770048	; 0xbc000
    1580:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    1584:	2f2e2e00 	svccs	0x002e2e00
    1588:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    158c:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    1590:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    1594:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1598:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    159c:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    15a0:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    15a4:	445f6870 	ldrbmi	r6, [pc], #-2160	; 15ac <_Min_Stack_Size+0x11ac>
    15a8:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    15ac:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    15b0:	73000063 	movwvc	r0, #99	; 0x63
    15b4:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    15b8:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    15bc:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    15c0:	2e676663 	cdpcs	6, 6, cr6, cr7, cr3, {3}
    15c4:	00010063 	andeq	r0, r1, r3, rrx
    15c8:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xf00
    15cc:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    15d0:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    15d4:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    15d8:	00020068 	andeq	r0, r2, r8, rrx
    15dc:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
    15e0:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    15e4:	00030068 	andeq	r0, r3, r8, rrx
    15e8:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    15ec:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    15f0:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
    15f4:	00000400 	andeq	r0, r0, r0, lsl #8
    15f8:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
    15fc:	346d635f 	strbtcc	r6, [sp], #-863	; 0x35f
    1600:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
    1604:	74730000 	ldrbtvc	r0, [r3], #-0
    1608:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    160c:	5f787834 	svcpl	0x00787834
    1610:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
    1614:	00060068 	andeq	r0, r6, r8, rrx
    1618:	05000000 	streq	r0, [r0, #-0]
    161c:	0012b802 	andseq	fp, r2, r2, lsl #16
    1620:	00e40308 	rsceq	r0, r4, r8, lsl #6
    1624:	3d592101 	ldfcce	f2, [r9, #-4]
    1628:	0002022d 	andeq	r0, r2, sp, lsr #4
    162c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1630:	0012d402 	andseq	sp, r2, r2, lsl #8
    1634:	00f60308 	rscseq	r0, r6, r8, lsl #6
    1638:	06021601 	streq	r1, [r2], -r1, lsl #12
    163c:	00010100 	andeq	r0, r1, r0, lsl #2
    1640:	12e00205 	rscne	r0, r0, #1342177280	; 0x50000000
    1644:	8b030800 	blhi	c364c <_Min_Stack_Size+0xc324c>
    1648:	02160101 	andseq	r0, r6, #1073741824	; 0x40000000
    164c:	01010006 	tsteq	r1, r6
    1650:	ec020500 	cfstr32	mvfx0, [r2], {-0}
    1654:	03080012 	movweq	r0, #32786	; 0x8012
    1658:	6d0101a2 	stfvss	f0, [r1, #-648]	; 0xfffffd78
    165c:	272e7903 	strcs	r7, [lr, -r3, lsl #18]!
    1660:	3d2f1f21 	stccc	15, cr1, [pc, #-132]!	; 15e4 <_Min_Stack_Size+0x11e4>
    1664:	023d2d21 	eorseq	r2, sp, #2112	; 0x840
    1668:	01010001 	tsteq	r1, r1
    166c:	1c020500 	cfstr32ne	mvfx0, [r2], {-0}
    1670:	03080013 	movweq	r0, #32787	; 0x8013
    1674:	150101b7 	strne	r0, [r1, #-439]	; 0x1b7
    1678:	01000602 	tsteq	r0, r2, lsl #12
    167c:	02050001 	andeq	r0, r5, #1
    1680:	08001328 	stmdaeq	r0, {r3, r5, r8, r9, ip}
    1684:	0101c803 	tsteq	r1, r3, lsl #16
    1688:	00060216 	andeq	r0, r6, r6, lsl r2
    168c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1690:	00133402 	andseq	r3, r3, r2, lsl #8
    1694:	01d50308 	bicseq	r0, r5, r8, lsl #6
    1698:	09031501 	stmdbeq	r3, {r0, r8, sl, ip}
    169c:	0006022e 	andeq	r0, r6, lr, lsr #4
    16a0:	Address 0x00000000000016a0 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	4f495047 	svcmi	0x00495047
       4:	7079545f 	rsbsvc	r5, r9, pc, asr r4
       8:	66654465 	strbtvs	r4, [r5], -r5, ror #8
       c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
      10:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
      14:	5355006e 	cmppl	r5, #110	; 0x6e
      18:	5f545241 	svcpl	0x00545241
      1c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
      20:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
      24:	72757463 	rsbsvc	r7, r5, #1660944384	; 0x63000000
      28:	50470065 	subpl	r0, r7, r5, rrx
      2c:	6f4d4f49 	svcvs	0x004d4f49
      30:	545f6564 	ldrbpl	r6, [pc], #-1380	; 38 <_Min_Heap_Size+0x38>
      34:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
      38:	55006665 	strpl	r6, [r0, #-1637]	; 0x665
      3c:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
      40:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
      44:	69730074 	ldmdbvs	r3!, {r2, r4, r5, r6}^
      48:	7974657a 	ldmdbvc	r4!, {r1, r3, r4, r5, r6, r8, sl, sp, lr}^
      4c:	47006570 	smlsdxmi	r0, r0, r5, r6
      50:	5f4f4950 	svcpl	0x004f4950
      54:	7079544f 	rsbsvc	r5, r9, pc, asr #8
      58:	444f5f65 	strbmi	r5, [pc], #-3941	; 60 <_Min_Heap_Size+0x60>
      5c:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
      60:	5f5f006e 	svcpl	0x005f006e
      64:	746e6975 	strbtvc	r6, [lr], #-2421	; 0x975
      68:	745f3233 	ldrbvc	r3, [pc], #-563	; 70 <_Min_Heap_Size+0x70>
      6c:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; fffff174 <_estack+0xdffcf174>
      70:	31746e69 	cmncc	r4, r9, ror #28
      74:	00745f36 	rsbseq	r5, r4, r6, lsr pc
      78:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
      7c:	79545f54 	ldmdbvc	r4, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
      80:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
      84:	53550066 	cmppl	r5, #102	; 0x66
      88:	5f545241 	svcpl	0x00545241
      8c:	706f7453 	rsbvc	r7, pc, r3, asr r4	; <UNPREDICTABLE>
      90:	73746942 	cmnvc	r4, #1081344	; 0x108000
      94:	6f687300 	svcvs	0x00687300
      98:	69207472 	stmdbvs	r0!, {r1, r4, r5, r6, sl, ip, sp, lr}
      9c:	4700746e 	strmi	r7, [r0, -lr, ror #8]
      a0:	5f4f4950 	svcpl	0x004f4950
      a4:	7079544f 	rsbsvc	r5, r9, pc, asr #8
      a8:	50470065 	subpl	r0, r7, r5, rrx
      ac:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; ffffff90 <_estack+0xdffcff90>
      b0:	5f65646f 	svcpl	0x0065646f
      b4:	55004641 	strpl	r4, [r0, #-1601]	; 0x641
      b8:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
      bc:	646d435f 	strbtvs	r4, [sp], #-863	; 0x35f
      c0:	41535500 	cmpmi	r3, r0, lsl #10
      c4:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
      c8:	44646e65 	strbtmi	r6, [r4], #-3685	; 0xe65
      cc:	00617461 	rsbeq	r7, r1, r1, ror #8
      d0:	4f495047 	svcmi	0x00495047
      d4:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
      d8:	50470074 	subpl	r0, r7, r4, ror r0
      dc:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; ffffffc0 <_estack+0xdffcffc0>
      e0:	5f65646f 	svcpl	0x0065646f
      e4:	55004e41 	strpl	r4, [r0, #-3649]	; 0xe41
      e8:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
      ec:	726f575f 	rsbvc	r5, pc, #24903680	; 0x17c0000
      f0:	6e654c64 	cdpvs	12, 6, cr4, cr5, cr4, {3}
      f4:	00687467 	rsbeq	r7, r8, r7, ror #8
      f8:	20554e47 	subscs	r4, r5, r7, asr #28
      fc:	2e342043 	cdpcs	0, 3, cr2, cr4, cr3, {2}
     100:	20342e38 	eorscs	r2, r4, r8, lsr lr
     104:	34313032 	ldrtcc	r3, [r1], #-50	; 0x32
     108:	35323730 	ldrcc	r3, [r2, #-1840]!	; 0x730
     10c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0x820
     110:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
     114:	5b202965 	blpl	80a6b0 <_Min_Stack_Size+0x80a2b0>
     118:	2f4d5241 	svccs	0x004d5241
     11c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
     120:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
     124:	385f342d 	ldmdacc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
     128:	6172622d 	cmnvs	r2, sp, lsr #4
     12c:	2068636e 	rsbcs	r6, r8, lr, ror #6
     130:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
     134:	6e6f6973 	mcrvs	9, 3, r6, cr15, cr3, {3}
     138:	33313220 	teqcc	r1, #32, 4
     13c:	5d373431 	cfldrspl	mvf3, [r7, #-196]!	; 0xffffff3c
     140:	636d2d20 	cmnvs	sp, #32, 26	; 0x800
     144:	633d7570 	teqvs	sp, #112, 10	; 0x1c000000
     148:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0x26f
     14c:	346d2d78 	strbtcc	r2, [sp], #-3448	; 0xd78
     150:	616d2d20 	cmnvs	sp, r0, lsr #26
     154:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
     158:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
     15c:	6d2d6537 	cfstr32vs	mvfx6, [sp, #-220]!	; 0xffffff24
     160:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xd20
     164:	3d656e75 	stclcc	14, cr6, [r5, #-468]!	; 0xfffffe2c
     168:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xf63
     16c:	6d2d7865 	stcvs	8, cr7, [sp, #-404]!	; 0xfffffe6c
     170:	6d2d2034 	stcvs	0, cr2, [sp, #-208]!	; 0xffffff30
     174:	7474696c 	ldrbtvc	r6, [r4], #-2412	; 0x96c
     178:	652d656c 	strvs	r6, [sp, #-1388]!	; 0x56c
     17c:	6169646e 	cmnvs	r9, lr, ror #8
     180:	6d2d206e 	stcvs	0, cr2, [sp, #-440]!	; 0xfffffe48
     184:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
     188:	672d2062 	strvs	r2, [sp, -r2, rrx]!
     18c:	20672d20 	rsbcs	r2, r7, r0, lsr #26
     190:	20334f2d 	eorscs	r4, r3, sp, lsr #30
     194:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0x32d
     198:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
     19c:	74732d20 	ldrbtvc	r2, [r3], #-3360	; 0xd20
     1a0:	39633d64 	stmdbcc	r3!, {r2, r5, r6, r8, sl, fp, ip, sp}^
     1a4:	662d2039 			; <UNDEFINED> instruction: 0x662d2039
     1a8:	74736166 	ldrbtvc	r6, [r3], #-358	; 0x166
     1ac:	74616d2d 	strbtvc	r6, [r1], #-3373	; 0xd2d
     1b0:	662d2068 	strtvs	r2, [sp], -r8, rrx
     1b4:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
     1b8:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     1bc:	6365732d 	cmnvs	r5, #-1275068416	; 0xb4000000
     1c0:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     1c4:	662d2073 			; <UNDEFINED> instruction: 0x662d2073
     1c8:	61746164 	cmnvs	r4, r4, ror #2
     1cc:	6365732d 	cmnvs	r5, #-1275068416	; 0xb4000000
     1d0:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     1d4:	662d2073 			; <UNDEFINED> instruction: 0x662d2073
     1d8:	632d6f6e 	teqvs	sp, #440	; 0x1b8
     1dc:	6f6d6d6f 	svcvs	0x006d6d6f
     1e0:	2d2d206e 	stccs	0, cr2, [sp, #-440]!	; 0xfffffe48
     1e4:	61726170 	cmnvs	r2, r0, ror r1
     1e8:	616d206d 	cmnvs	sp, sp, rrx
     1ec:	6e692d78 	mcrvs	13, 3, r2, cr9, cr8, {3}
     1f0:	656e696c 	strbvs	r6, [lr, #-2412]!	; 0x96c
     1f4:	736e692d 	cmnvc	lr, #737280	; 0xb4000
     1f8:	732d736e 	teqvc	sp, #-1207959551	; 0xb8000001
     1fc:	6c676e69 	stclvs	14, cr6, [r7], #-420	; 0xfffffe5c
     200:	30313d65 	eorscc	r3, r1, r5, ror #26
     204:	47003030 	smladxmi	r0, r0, r0, r3
     208:	4f4f4950 	svcmi	0x004f4950
     20c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
     210:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     214:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     218:	59544f00 	ldmdbpl	r4, {r8, r9, sl, fp, lr}^
     21c:	00524550 	subseq	r4, r2, r0, asr r5
     220:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     224:	61425f54 	cmpvs	r2, r4, asr pc
     228:	61526475 	cmpvs	r2, r5, ror r4
     22c:	4f006574 	svcmi	0x00006574
     230:	45455053 	strbmi	r5, [r5, #-83]	; 0x53
     234:	6c005244 	sfmvs	f5, 4, [r0], {68}	; 0x44
     238:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     23c:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     240:	746e6920 	strbtvc	r6, [lr], #-2336	; 0x920
     244:	414e4500 	cmpmi	lr, r0, lsl #10
     248:	00454c42 	subeq	r4, r5, r2, asr #24
     24c:	4f495047 	svcmi	0x00495047
     250:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 258 <_Min_Heap_Size+0x258>
     254:	554f5f65 	strbpl	r5, [pc, #-3941]	; fffff2f7 <_estack+0xdffcf2f7>
     258:	55500054 	ldrbpl	r0, [r0, #-84]	; 0x54
     25c:	00524450 	subseq	r4, r2, r0, asr r4
     260:	4f495047 	svcmi	0x00495047
     264:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 26c <_Min_Heap_Size+0x26c>
     268:	4e495f65 	cdpmi	15, 4, cr5, cr9, cr5, {3}
     26c:	44454c00 	strbmi	r4, [r5], #-3072	; 0xc00
     270:	6f545f33 	svcvs	0x00545f33
     274:	656c6767 	strbvs	r6, [ip, #-1895]!	; 0x767
     278:	52534200 	subspl	r4, r3, #0, 4
     27c:	52004852 	andpl	r4, r0, #5373952	; 0x520000
     280:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
     284:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     288:	61727567 	cmnvs	r2, r7, ror #10
     28c:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     290:	444f4d00 	strbmi	r4, [pc], #-3328	; 298 <_Min_Heap_Size+0x298>
     294:	5f005245 	svcpl	0x00005245
     298:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
     29c:	745f3874 	ldrbvc	r3, [pc], #-2164	; 2a4 <_Min_Heap_Size+0x2a4>
     2a0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     2a4:	69485f4f 	stmdbvs	r8, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     2a8:	535f6867 	cmppl	pc, #6750208	; 0x670000
     2ac:	64656570 	strbtvs	r6, [r5], #-1392	; 0x570
     2b0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     2b4:	544f5f4f 	strbpl	r5, [pc], #-3919	; 2bc <_Min_Heap_Size+0x2bc>
     2b8:	5f657079 	svcpl	0x00657079
     2bc:	55005050 	strpl	r5, [r0, #-80]	; 0x50
     2c0:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
     2c4:	7261505f 	rsbvc	r5, r1, #95	; 0x5f
     2c8:	00797469 	rsbseq	r7, r9, r9, ror #8
     2cc:	52505447 	subspl	r5, r0, #1191182336	; 0x47000000
     2d0:	736e7500 	cmnvc	lr, #0, 10
     2d4:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0x769
     2d8:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
     2dc:	47007261 	strmi	r7, [r0, -r1, ror #4]
     2e0:	5f4f4950 	svcpl	0x004f4950
     2e4:	64507550 	ldrbvs	r7, [r0], #-1360	; 0x550
     2e8:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     2ec:	654d5f4f 	strbvs	r5, [sp, #-3919]	; 0xf4f
     2f0:	6d756964 	ldclvs	9, cr6, [r5, #-400]!	; 0xfffffe70
     2f4:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0x35f
     2f8:	6c006465 	cfstrsvs	mvf6, [r0], {101}	; 0x65
     2fc:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     300:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     304:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
     308:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0x769
     30c:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
     310:	50470074 	subpl	r0, r7, r4, ror r0
     314:	435f4f49 	cmpmi	pc, #292	; 0x124
     318:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     31c:	61727567 	cmnvs	r2, r7, ror #10
     320:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     324:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     328:	6e495f4f 	cdpvs	15, 4, cr5, cr9, cr15, {2}
     32c:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
     330:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
     334:	53550066 	cmppl	r5, #102	; 0x66
     338:	5f545241 	svcpl	0x00545241
     33c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     340:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
     344:	00666544 	rsbeq	r6, r6, r4, asr #10
     348:	4f495047 	svcmi	0x00495047
     34c:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0x35f
     350:	73006465 	movwvc	r6, #1125	; 0x465
     354:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xf68
     358:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
     35c:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0x769
     360:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
     364:	53550074 	cmppl	r5, #116	; 0x74
     368:	5f545241 	svcpl	0x00545241
     36c:	64726148 	ldrbtvs	r6, [r2], #-328	; 0x148
     370:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0x177
     374:	776f6c46 	strbvc	r6, [pc, -r6, asr #24]!
     378:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xf43
     37c:	006c6f72 	rsbeq	r6, ip, r2, ror pc
     380:	5f434352 	svcpl	0x00434352
     384:	31424841 	cmpcc	r2, r1, asr #16
     388:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     38c:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
     390:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
     394:	5500646d 	strpl	r6, [r0, #-1133]	; 0x46d
     398:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
     39c:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 3a4 <_Min_Heap_Size+0x3a4>
     3a0:	50470065 	subpl	r0, r7, r5, rrx
     3a4:	465f4f49 	ldrbmi	r4, [pc], -r9, asr #30
     3a8:	5f747361 	svcpl	0x00747361
     3ac:	65657053 	strbvs	r7, [r5, #-83]!	; 0x53
     3b0:	53550064 	cmppl	r5, #100	; 0x64
     3b4:	31545241 	cmpcc	r4, r1, asr #4
     3b8:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
     3bc:	75676966 	strbvc	r6, [r7, #-2406]!	; 0x966
     3c0:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     3c4:	44006e6f 	strmi	r6, [r0], #-3695	; 0xe6f
     3c8:	42415349 	submi	r5, r1, #603979777	; 0x24000001
     3cc:	4700454c 	strmi	r4, [r0, -ip, asr #10]
     3d0:	5f4f4950 	svcpl	0x004f4950
     3d4:	5f776f4c 	svcpl	0x00776f4c
     3d8:	65657053 	strbvs	r7, [r5, #-83]!	; 0x53
     3dc:	43520064 	cmpmi	r2, #100	; 0x64
     3e0:	50415f43 	subpl	r5, r1, r3, asr #30
     3e4:	65503242 	ldrbvs	r3, [r0, #-578]	; 0x242
     3e8:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     3ec:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     3f0:	646d436b 	strbtvs	r4, [sp], #-875	; 0x36b
     3f4:	53455200 	movtpl	r5, #20992	; 0x5200
     3f8:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
     3fc:	52003044 	andpl	r3, r0, #68	; 0x44
     400:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     404:	31444556 	cmpcc	r4, r6, asr r5
     408:	53455200 	movtpl	r5, #20992	; 0x5200
     40c:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
     410:	52003244 	andpl	r3, r0, #68, 4	; 0x40000004
     414:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     418:	33444556 	movtcc	r4, #17750	; 0x4556
     41c:	53455200 	movtpl	r5, #20992	; 0x5200
     420:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
     424:	52003444 	andpl	r3, r0, #68, 8	; 0x44000000
     428:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     42c:	35444556 	strbcc	r4, [r4, #-1366]	; 0x556
     430:	53455200 	movtpl	r5, #20992	; 0x5200
     434:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
     438:	55003644 	strpl	r3, [r0, #-1604]	; 0x644
     43c:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
     440:	75705f31 	ldrbvc	r5, [r0, #-3889]!	; 0xf31
     444:	47007374 	smlsdxmi	r0, r4, r3, r7
     448:	534f4950 	movtpl	r4, #63824	; 0xf950
     44c:	64656570 	strbtvs	r6, [r5], #-1392	; 0x570
     450:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     454:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     458:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     45c:	75505f4f 	ldrbvc	r5, [r0, #-3919]	; 0xf4f
     460:	445f6450 	ldrbmi	r6, [pc], #-1104	; 468 <_Min_Stack_Size+0x68>
     464:	004e574f 	subeq	r5, lr, pc, asr #14
     468:	5f4d5449 	svcpl	0x004d5449
     46c:	75427852 	strbvc	r7, [r2, #-2130]	; 0x852
     470:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
     474:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     478:	75505f4f 	ldrbvc	r5, [r0, #-3919]	; 0xf4f
     47c:	4e5f6450 	mrcmi	4, 2, r6, cr15, cr0, {2}
     480:	4c55504f 	mrrcmi	0, 4, r5, r5, cr15	; <UNPREDICTABLE>
     484:	5355004c 	cmppl	r5, #76	; 0x4c
     488:	5f545241 	svcpl	0x00545241
     48c:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
     490:	5367616c 	cmnpl	r7, #108, 2
     494:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
     498:	50470073 	subpl	r0, r7, r3, ror r0
     49c:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
     4a0:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
     4a4:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
     4a8:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
     4ac:	695f5f00 	ldmdbvs	pc, {r8, r9, sl, fp, ip, lr}^	; <UNPREDICTABLE>
     4b0:	3233746e 	eorscc	r7, r3, #1845493760	; 0x6e000000
     4b4:	4c00745f 	cfstrsmi	mvf7, [r0], {95}	; 0x5f
     4b8:	495f4445 	ldmdbmi	pc, {r0, r2, r6, sl, lr}^	; <UNPREDICTABLE>
     4bc:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
     4c0:	7a696c61 	bvc	1a5b64c <_Min_Stack_Size+0x1a5b24c>
     4c4:	6f697461 	svcvs	0x00697461
     4c8:	5047006e 	subpl	r0, r7, lr, rrx
     4cc:	75504f49 	ldrbvc	r4, [r0, #-3913]	; 0xf49
     4d0:	545f6450 	ldrbpl	r6, [pc], #-1104	; 4d8 <_Min_Stack_Size+0xd8>
     4d4:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
     4d8:	47006665 	strmi	r6, [r0, -r5, ror #12]
     4dc:	5f4f4950 	svcpl	0x004f4950
     4e0:	64507550 	ldrbvs	r7, [r0], #-1360	; 0x550
     4e4:	0050555f 	subseq	r5, r0, pc, asr r5
     4e8:	4f495047 	svcmi	0x00495047
     4ec:	6e69505f 	mcrvs	0, 3, r5, cr9, cr15, {2}
     4f0:	6f434641 	svcvs	0x00434641
     4f4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     4f8:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
     4fc:	00632e6e 	rsbeq	r2, r3, lr, ror #28
     500:	636e7546 	cmnvs	lr, #293601280	; 0x11800000
     504:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     508:	74536c61 	ldrbvc	r6, [r3], #-3169	; 0xc61
     50c:	00657461 	rsbeq	r7, r5, r1, ror #8
     510:	52525342 	subspl	r5, r2, #134217729	; 0x8000001
     514:	434c004c 	movtmi	r0, #49228	; 0xc04c
     518:	2f00524b 	svccs	0x0000524b
     51c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xf68
     520:	62616c2f 	rsbvs	r6, r1, #12032	; 0x2f00
     524:	2f313730 	svccs	0x00313730
     528:	6b726f77 	blvs	1c9c30c <_Min_Stack_Size+0x1c9bf0c>
     52c:	63617073 	cmnvs	r1, #115	; 0x73
     530:	734a2f65 	movtvc	r2, #44901	; 0xaf65
     534:	43767265 	cmnmi	r6, #1342177286	; 0x50000006
     538:	7373616c 	cmnvc	r3, #108, 2
     53c:	6e694d2f 	cdpvs	13, 6, cr4, cr9, cr15, {1}
     540:	32345f67 	eorscc	r5, r4, #412	; 0x19c
     544:	72745f39 	rsbsvc	r5, r4, #57, 30	; 0xe4
     548:	696e6961 	stmdbvs	lr!, {r0, r5, r6, r8, fp, sp, lr}^
     54c:	732f676e 	teqvc	pc, #28835840	; 0x1b80000
     550:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     554:	39323466 	ldmdbcc	r2!, {r1, r2, r5, r6, sl, ip, sp}
     558:	6172745f 	cmnvs	r2, pc, asr r4
     55c:	6e696e69 	cdpvs	14, 6, cr6, cr9, cr9, {3}
     560:	50470067 	subpl	r0, r7, r7, rrx
     564:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; 448 <_Min_Stack_Size+0x48>
     568:	0065646f 	rsbeq	r6, r5, pc, ror #8
     56c:	4d6d654d 	cfstr64mi	mvdx6, [sp, #-308]!	; 0xfffffecc
     570:	67616e61 	strbvs	r6, [r1, -r1, ror #28]!
     574:	61485f65 	cmpvs	r8, r5, ror #30
     578:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
     57c:	65500072 	ldrbvs	r0, [r0, #-114]	; 0x72
     580:	5653646e 	ldrbpl	r6, [r3], -lr, ror #8
     584:	6e61485f 	mcrvs	8, 3, r4, cr1, cr15, {2}
     588:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     58c:	61735500 	cmnvs	r3, r0, lsl #10
     590:	61466567 	cmpvs	r6, r7, ror #10
     594:	5f746c75 	svcpl	0x00746c75
     598:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
     59c:	0072656c 	rsbseq	r6, r2, ip, ror #10
     5a0:	46737542 	ldrbtmi	r7, [r3], -r2, asr #10
     5a4:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
     5a8:	6e61485f 	mcrvs	8, 3, r4, cr1, cr15, {2}
     5ac:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     5b0:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     5b4:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
     5b8:	695f7878 	ldmdbvs	pc, {r3, r4, r5, r6, fp, ip, sp, lr}^	; <UNPREDICTABLE>
     5bc:	00632e74 	rsbeq	r2, r3, r4, ror lr
     5c0:	64726148 	ldrbtvs	r6, [r2], #-328	; 0x148
     5c4:	6c756146 	ldfvse	f6, [r5], #-280	; 0xfffffee8
     5c8:	61485f74 	hvcvs	34292	; 0x85f4
     5cc:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
     5d0:	4d4e0072 	stclmi	0, cr0, [lr, #-456]	; 0xfffffe38
     5d4:	61485f49 	cmpvs	r8, r9, asr #30
     5d8:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
     5dc:	79530072 	ldmdbvc	r3, {r1, r4, r5, r6}^
     5e0:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
     5e4:	61485f6b 	cmpvs	r8, fp, ror #30
     5e8:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
     5ec:	56530072 			; <UNDEFINED> instruction: 0x56530072
     5f0:	61485f43 	cmpvs	r8, r3, asr #30
     5f4:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
     5f8:	65440072 	strbvs	r0, [r4, #-114]	; 0x72
     5fc:	4d677562 	cfstr64mi	mvdx7, [r7, #-392]!	; 0xfffffe78
     600:	485f6e6f 	ldmdami	pc, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^	; <UNPREDICTABLE>
     604:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     608:	41007265 	tstmi	r0, r5, ror #4
     60c:	4c314248 	lfmmi	f4, 4, [r1], #-288	; 0xfffffee0
     610:	524e4550 	subpl	r4, lr, #80, 10	; 0x14000000
     614:	4c4c5000 	marmi	acc0, r5, ip
     618:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
     61c:	42504100 	subsmi	r4, r0, #0, 2
     620:	54535231 	ldrbpl	r5, [r3], #-561	; 0x231
     624:	48410052 	stmdami	r1, {r1, r4, r6}^
     628:	4e453242 	cdpmi	2, 4, cr3, cr5, cr2, {2}
     62c:	48410052 	stmdami	r1, {r1, r4, r6}^
     630:	53523242 	cmppl	r2, #536870916	; 0x20000004
     634:	42005254 	andmi	r5, r0, #84, 4	; 0x40000005
     638:	00524344 	subseq	r4, r2, r4, asr #6
     63c:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
     640:	46435332 			; <UNDEFINED> instruction: 0x46435332
     644:	50005247 	andpl	r5, r0, r7, asr #4
     648:	545f5257 	ldrbpl	r5, [pc], #-599	; 650 <_Min_Stack_Size+0x250>
     64c:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
     650:	53006665 	movwpl	r6, #1637	; 0x665
     654:	52474353 	subpl	r4, r7, #1275068417	; 0x4c000001
     658:	45534800 	ldrbmi	r4, [r3, #-2048]	; 0x800
     65c:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     660:	43007375 	movwmi	r7, #885	; 0x375
     664:	44495550 	strbmi	r5, [r9], #-1360	; 0x550
     668:	42484100 	submi	r4, r8, #0, 2
     66c:	54535231 	ldrbpl	r5, [r3], #-561	; 0x231
     670:	48410052 	stmdami	r1, {r1, r4, r6}^
     674:	504c3342 	subpl	r3, ip, r2, asr #6
     678:	00524e45 	subseq	r4, r2, r5, asr #28
     67c:	5f424353 	svcpl	0x00424353
     680:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
     684:	42504100 	subsmi	r4, r0, #0, 2
     688:	524e4531 	subpl	r4, lr, #205520896	; 0xc400000
     68c:	4b434400 	blmi	10d1694 <_Min_Stack_Size+0x10d1294>
     690:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
     694:	53434900 	movtpl	r4, #14592	; 0x3900
     698:	504f0052 	subpl	r0, pc, r2, asr r0	; <UNPREDICTABLE>
     69c:	59454b54 	stmdbpl	r5, {r2, r4, r6, r8, r9, fp, lr}^
     6a0:	46420052 			; <UNDEFINED> instruction: 0x46420052
     6a4:	52005241 	andpl	r5, r0, #268435460	; 0x10000004
     6a8:	545f4343 	ldrbpl	r4, [pc], #-835	; 6b0 <_Min_Stack_Size+0x2b0>
     6ac:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
     6b0:	41006665 	tstmi	r0, r5, ror #12
     6b4:	52324250 	eorspl	r4, r2, #80, 4
     6b8:	00525453 	subseq	r5, r2, r3, asr r4
     6bc:	52534643 	subspl	r4, r3, #70254592	; 0x4300000
     6c0:	54504f00 	ldrbpl	r4, [r0], #-3840	; 0xf00
     6c4:	00315243 	eorseq	r5, r1, r3, asr #4
     6c8:	736c6c70 	cmnvc	ip, #112, 24	; 0x7000
     6cc:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     6d0:	48410065 	stmdami	r1, {r0, r2, r5, r6}^
     6d4:	4e453342 	cdpmi	3, 4, cr3, cr5, cr2, {2}
     6d8:	6c700052 	ldclvs	0, cr0, [r0], #-328	; 0xfffffeb8
     6dc:	70006d6c 	andvc	r6, r0, ip, ror #26
     6e0:	00706c6c 	rsbseq	r6, r0, ip, ror #24
     6e4:	43524941 	cmpmi	r2, #1064960	; 0x104000
     6e8:	50410052 	subpl	r0, r1, r2, asr r0
     6ec:	4e453242 	cdpmi	2, 4, cr3, cr5, cr2, {2}
     6f0:	74530052 	ldrbvc	r0, [r3], #-82	; 0x52
     6f4:	55747261 	ldrbpl	r7, [r4, #-609]!	; 0x261
     6f8:	756f4370 	strbvc	r4, [pc, #-880]!	; 390 <_Min_Heap_Size+0x390>
     6fc:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     700:	43485300 	movtmi	r5, #33536	; 0x8300
     704:	53005253 	movwpl	r5, #595	; 0x253
     708:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0x379
     70c:	726f436d 	rsbvc	r4, pc, #-1275068415	; 0xb4000001
     710:	6f6c4365 	svcvs	0x006c4365
     714:	70556b63 	subsvc	r6, r5, r3, ror #22
     718:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0x164
     71c:	464d4d00 	strbmi	r4, [sp], -r0, lsl #26
     720:	53005241 	movwpl	r5, #577	; 0x241
     724:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0x379
     728:	696e496d 	stmdbvs	lr!, {r0, r2, r3, r5, r6, r8, fp, lr}^
     72c:	50410074 	subpl	r0, r1, r4, ror r0
     730:	504c3142 	subpl	r3, ip, r2, asr #2
     734:	00524e45 	subseq	r4, r2, r5, asr #28
     738:	766c6c70 			; <UNDEFINED> instruction: 0x766c6c70
     73c:	56006f63 	strpl	r6, [r0], -r3, ror #30
     740:	00524f54 	subseq	r4, r2, r4, asr pc
     744:	52415349 	subpl	r5, r1, #603979777	; 0x24000001
     748:	53464400 	movtpl	r4, #25600	; 0x6400
     74c:	79530052 	ldmdbvc	r3, {r1, r4, r6}^
     750:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
     754:	65726f43 	ldrbvs	r6, [r2, #-3907]!	; 0xf43
     758:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     75c:	4648006b 	strbmi	r0, [r8], -fp, rrx
     760:	41005253 	tstmi	r0, r3, asr r2
     764:	4c324248 	lfmmi	f4, 4, [r2], #-288	; 0xfffffee0
     768:	524e4550 	subpl	r4, lr, #80, 10	; 0x14000000
     76c:	464d4d00 	strbmi	r4, [sp], -r0, lsl #26
     770:	65530052 	ldrbvs	r0, [r3, #-82]	; 0x52
     774:	73795374 	cmnvc	r9, #116, 6	; 0xd0000001
     778:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     77c:	4841006b 	stmdami	r1, {r0, r1, r3, r5, r6}^
     780:	4e453142 	dvfmism	f3, f5, f2
     784:	79730052 	ldmdbvc	r3!, {r1, r4, r6}^
     788:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
     78c:	6d74735f 	ldclvs	3, cr7, [r4, #-380]!	; 0xfffffe84
     790:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
     794:	632e7878 	teqvs	lr, #120, 16	; 0x780000
     798:	53464100 	movtpl	r4, #24832	; 0x6100
     79c:	48410052 	stmdami	r1, {r1, r4, r6}^
     7a0:	53523342 	cmppl	r2, #134217729	; 0x8000001
     7a4:	46005254 			; <UNDEFINED> instruction: 0x46005254
     7a8:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
     7ac:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     7b0:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     7b4:	4c4c5000 	marmi	acc0, r5, ip
     7b8:	43494153 	movtmi	r4, #37203	; 0x9153
     7bc:	00524746 	subseq	r4, r2, r6, asr #14
     7c0:	43415043 	movtmi	r5, #4163	; 0x1043
     7c4:	50410052 	subpl	r0, r1, r2, asr r0
     7c8:	504c3242 	subpl	r3, ip, r2, asr #4
     7cc:	00524e45 	subseq	r4, r2, r5, asr #28
     7d0:	4354504f 	cmpmi	r4, #79	; 0x4f
     7d4:	41490052 	qdaddmi	r0, r2, r9
     7d8:	4e005242 	cdpmi	2, 0, cr5, cr0, cr2, {2}
     7dc:	5f434956 	svcpl	0x00434956
     7e0:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     7e4:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
     7e8:	00666544 	rsbeq	r6, r6, r4, asr #10
     7ec:	4349564e 	movtmi	r5, #38478	; 0x964e
     7f0:	5152495f 	cmppl	r2, pc, asr r9
     7f4:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     7f8:	436c656e 	cmnmi	ip, #461373440	; 0x1b800000
     7fc:	5300646d 	movwpl	r6, #1133	; 0x46d
     800:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
     804:	435f6b63 	cmpmi	pc, #101376	; 0x18c00
     808:	6f534b4c 	svcvs	0x00534b4c
     80c:	65637275 	strbvs	r7, [r3, #-629]!	; 0x275
     810:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     814:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
     818:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
     81c:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
     820:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     824:	72505f43 	subsvc	r5, r0, #268	; 0x10c
     828:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     82c:	72477974 	subvc	r7, r7, #116, 18	; 0x1d0000
     830:	0070756f 	rsbseq	r7, r0, pc, ror #10
     834:	4349564e 	movtmi	r5, #38478	; 0x964e
     838:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     83c:	6d740074 	ldclvs	0, cr0, [r4, #-464]!	; 0xfffffe30
     840:	65727070 	ldrbvs	r7, [r2, #-112]!	; 0x70
     844:	45534900 	ldrbmi	r4, [r3, #-2304]	; 0x900
     848:	654e0052 	strbvs	r0, [lr, #-82]	; 0x52
     84c:	61745377 	cmnvs	r4, r7, ror r3
     850:	53006574 	movwpl	r6, #1396	; 0x574
     854:	00524954 	subseq	r4, r2, r4, asr r9
     858:	52455352 	subpl	r5, r5, #1207959553	; 0x48000001
     85c:	31444556 	cmpcc	r4, r6, asr r5
     860:	66664f00 	strbtvs	r4, [r6], -r0, lsl #30
     864:	00746573 	rsbseq	r6, r4, r3, ror r5
     868:	4c525443 	cfldrdmi	mvd5, [r2], {67}	; 0x43
     86c:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     870:	65535f43 	ldrbvs	r5, [r3, #-3907]	; 0xf43
     874:	63655674 	cmnvs	r5, #116, 12	; 0x7400000
     878:	54726f74 	ldrbtpl	r6, [r2], #-3956	; 0xf74
     87c:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
     880:	50434900 	subpl	r4, r3, r0, lsl #18
     884:	41430052 	qdaddmi	r0, r2, r3
     888:	0042494c 	subeq	r4, r2, ip, asr #18
     88c:	52454349 	subpl	r4, r5, #603979777	; 0x24000001
     890:	706d7400 	rsbvc	r7, sp, r0, lsl #8
     894:	00627573 	rsbeq	r7, r2, r3, ror r5
     898:	4349564e 	movtmi	r5, #38478	; 0x964e
     89c:	7379535f 	cmnvc	r9, #2080374785	; 0x7c000001
     8a0:	4c6d6574 	cfstr64mi	mvdx6, [sp], #-464	; 0xfffffe30
     8a4:	6e6f4350 	mcrvs	3, 3, r4, cr15, cr0, {2}
     8a8:	00676966 	rsbeq	r6, r7, r6, ror #18
     8ac:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0x953
     8b0:	5f6b6369 	svcpl	0x006b6369
     8b4:	534b4c43 	movtpl	r4, #48195	; 0xbc43
     8b8:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     8bc:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
     8c0:	00676966 	rsbeq	r6, r7, r6, ror #18
     8c4:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0x953
     8c8:	5f6b6369 	svcpl	0x006b6369
     8cc:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
     8d0:	706d7400 	rsbvc	r7, sp, r0, lsl #8
     8d4:	6f697270 	svcvs	0x00697270
     8d8:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     8dc:	50534900 	subspl	r4, r3, r0, lsl #18
     8e0:	564e0052 			; <UNDEFINED> instruction: 0x564e0052
     8e4:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     8e8:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
     8ec:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xe61
     8f0:	564e006c 	strbpl	r0, [lr], -ip, rrx
     8f4:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     8f8:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
     8fc:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xe61
     900:	6275536c 	rsbsvs	r5, r5, #108, 6	; 0xb0000001
     904:	6f697250 	svcvs	0x00697250
     908:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     90c:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     910:	79545f43 	ldmdbvc	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     914:	4e006570 	cfrshl64mi	mvdx0, mvdx0, r6
     918:	5f434956 	svcpl	0x00434956
     91c:	43515249 	cmpmi	r1, #-1879048188	; 0x90000004
     920:	6e6e6168 	powvsez	f6, f6, #0.0
     924:	72506c65 	subsvc	r6, r0, #25856	; 0x6500
     928:	706d6565 	rsbvc	r6, sp, r5, ror #10
     92c:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     930:	6f697250 	svcvs	0x00697250
     934:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     938:	2f2e2e00 	svccs	0x002e2e00
     93c:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
     940:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
     944:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
     948:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     94c:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
     950:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
     954:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     958:	445f6870 	ldrbmi	r6, [pc], #-2160	; 960 <_Min_Stack_Size+0x560>
     95c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
     960:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
     964:	696d2f63 	stmdbvs	sp!, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
     968:	632e6373 	teqvs	lr, #-872415231	; 0xcc000001
     96c:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     970:	65565f43 	ldrbvs	r5, [r6, #-3907]	; 0xf43
     974:	61547463 	cmpvs	r4, r3, ror #8
     978:	4f4c0062 	svcmi	0x004c0062
     97c:	4c004441 	cfstrsmi	mvf4, [r0], {65}	; 0x41
     980:	6f50776f 	svcvs	0x0050776f
     984:	4d726577 	cfldr64mi	mvdx6, [r2, #-476]!	; 0xfffffe24
     988:	0065646f 	rsbeq	r6, r5, pc, ror #8
     98c:	4349564e 	movtmi	r5, #38478	; 0x964e
     990:	6972505f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, ip, lr}^
     994:	7469726f 	strbtvc	r7, [r9], #-623	; 0x26f
     998:	6f724779 	svcvs	0x00724779
     99c:	6f437075 	svcvs	0x00437075
     9a0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     9a4:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
     9a8:	00736f70 	rsbseq	r6, r3, r0, ror pc
     9ac:	5f746942 	svcpl	0x00746942
     9b0:	00544553 	subseq	r4, r4, r3, asr r5
     9b4:	4f495047 	svcmi	0x00495047
     9b8:	6165525f 	cmnvs	r5, pc, asr r2
     9bc:	74754f64 	ldrbtvc	r4, [r5], #-3940	; 0xf64
     9c0:	44747570 	ldrbtmi	r7, [r4], #-1392	; 0x570
     9c4:	00617461 	rsbeq	r7, r1, r1, ror #8
     9c8:	4f495047 	svcmi	0x00495047
     9cc:	0046415f 	subeq	r4, r6, pc, asr r1
     9d0:	706d6574 	rsbvc	r6, sp, r4, ror r5
     9d4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     9d8:	74535f4f 	ldrbvc	r5, [r3], #-3919	; 0xf4f
     9dc:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
     9e0:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     9e4:	74694200 	strbtvc	r4, [r9], #-512	; 0x200
     9e8:	006c6156 	rsbeq	r6, ip, r6, asr r1
     9ec:	5f746942 	svcpl	0x00746942
     9f0:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
     9f4:	50470054 	subpl	r0, r7, r4, asr r0
     9f8:	575f4f49 	ldrbpl	r4, [pc, -r9, asr #30]
     9fc:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0x972
     a00:	00746942 	rsbseq	r6, r4, r2, asr #18
     a04:	4f495047 	svcmi	0x00495047
     a08:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
     a0c:	73746942 	cmnvc	r4, #1081344	; 0x108000
     a10:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     a14:	65525f4f 	ldrbvs	r5, [r2, #-3919]	; 0xf4f
     a18:	42746573 	rsbsmi	r6, r4, #482344960	; 0x1cc00000
     a1c:	00737469 	rsbseq	r7, r3, r9, ror #8
     a20:	4f495047 	svcmi	0x00495047
     a24:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
     a28:	0074696e 	rsbseq	r6, r4, lr, ror #18
     a2c:	4f495047 	svcmi	0x00495047
     a30:	6165525f 	cmnvs	r5, pc, asr r2
     a34:	706e4964 	rsbvc	r4, lr, r4, ror #18
     a38:	61447475 	hvcvs	18245	; 0x4745
     a3c:	69426174 	stmdbvs	r2, {r2, r4, r5, r6, r8, sp, lr}^
     a40:	69620074 	stmdbvs	r2!, {r2, r4, r5, r6}^
     a44:	61747374 	cmnvs	r4, r4, ror r3
     a48:	00737574 	rsbseq	r7, r3, r4, ror r5
     a4c:	5f434352 	svcpl	0x00434352
     a50:	31424841 	cmpcc	r2, r1, asr #16
     a54:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     a58:	65526870 	ldrbvs	r6, [r2, #-2160]	; 0x870
     a5c:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
     a60:	4700646d 	strmi	r6, [r0, -sp, ror #8]
     a64:	5f4f4950 	svcpl	0x004f4950
     a68:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     a6c:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
     a70:	50007463 	andpl	r7, r0, r3, ror #8
     a74:	5674726f 	ldrbtpl	r7, [r4], -pc, ror #4
     a78:	2e006c61 	cdpcs	12, 0, cr6, cr0, cr1, {3}
     a7c:	4c2f2f2e 	stcmi	15, cr2, [pc], #-184	; 9cc <_Min_Stack_Size+0x5cc>
     a80:	61726269 	cmnvs	r2, r9, ror #4
     a84:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
     a88:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     a8c:	34463233 	strbcc	r3, [r6], #-563	; 0x233
     a90:	535f7878 	cmppl	pc, #120, 16	; 0x780000
     a94:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0x474
     a98:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     a9c:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
     aa0:	2f726576 	svccs	0x00726576
     aa4:	2f637273 	svccs	0x00637273
     aa8:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     aac:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     ab0:	70675f78 	rsbvc	r5, r7, r8, ror pc
     ab4:	632e6f69 	teqvs	lr, #420	; 0x1a4
     ab8:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     abc:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     ac0:	756f536e 	strbvc	r5, [pc, #-878]!	; 75a <_Min_Stack_Size+0x35a>
     ac4:	00656372 	rsbeq	r6, r5, r2, ror r3
     ac8:	4f495047 	svcmi	0x00495047
     acc:	6165525f 	cmnvs	r5, pc, asr r2
     ad0:	706e4964 	rsbvc	r4, lr, r4, ror #18
     ad4:	61447475 	hvcvs	18245	; 0x4745
     ad8:	47006174 	smlsdxmi	r0, r4, r1, r6
     adc:	5f4f4950 	svcpl	0x004f4950
     ae0:	4c6e6950 	stclmi	9, cr6, [lr], #-320	; 0xfffffec0
     ae4:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
     ae8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     aec:	69420067 	stmdbvs	r2, {r0, r1, r2, r5, r6}^
     af0:	74634174 	strbtvc	r4, [r3], #-372	; 0x174
     af4:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     af8:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
     afc:	70746e65 	rsbsvc	r6, r4, r5, ror #28
     b00:	47006e69 	strmi	r6, [r0, -r9, ror #28]
     b04:	5f4f4950 	svcpl	0x004f4950
     b08:	74697257 	strbtvc	r7, [r9], #-599	; 0x257
     b0c:	50470065 	subpl	r0, r7, r5, rrx
     b10:	545f4f49 	ldrbpl	r4, [pc], #-3913	; b18 <_Min_Stack_Size+0x718>
     b14:	6c67676f 	stclvs	7, cr6, [r7], #-444	; 0xfffffe44
     b18:	74694265 	strbtvc	r4, [r9], #-613	; 0x265
     b1c:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0x73
     b20:	325f706d 	subscc	r7, pc, #109	; 0x6d
     b24:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     b28:	65525f4f 	ldrbvs	r5, [r2, #-3919]	; 0xf4f
     b2c:	754f6461 	strbvc	r6, [pc, #-1121]	; 6d3 <_Min_Stack_Size+0x2d3>
     b30:	74757074 	ldrbtvc	r7, [r5], #-116	; 0x74
     b34:	61746144 	cmnvs	r4, r4, asr #2
     b38:	00746942 	rsbseq	r6, r4, r2, asr #18
     b3c:	5f434352 	svcpl	0x00434352
     b40:	4b4c4348 	blmi	1311868 <_Min_Stack_Size+0x1311468>
     b44:	43435200 	movtmi	r5, #12800	; 0x3200
     b48:	45534c5f 	ldrbmi	r4, [r3, #-3167]	; 0xc5f
     b4c:	43435200 	movtmi	r5, #12800	; 0x3200
     b50:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
     b54:	43494153 	movtmi	r4, #37203	; 0x9153
     b58:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
     b5c:	505f4343 	subspl	r4, pc, r3, asr #6
     b60:	41534c4c 	cmpmi	r3, ip, asr #24
     b64:	76694449 	strbtvc	r4, [r9], -r9, asr #8
     b68:	43520051 	cmpmi	r2, #81	; 0x51
     b6c:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
     b70:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
     b74:	52766944 	rsbspl	r6, r6, #68, 18	; 0x110000
     b78:	61747300 	cmnvs	r4, r0, lsl #6
     b7c:	72737574 	rsbsvc	r7, r3, #116, 10	; 0x1d000000
     b80:	53006765 	movwpl	r6, #1893	; 0x765
     b84:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
     b88:	72465f4b 	subvc	r5, r6, #300	; 0x12c
     b8c:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0x165
     b90:	0079636e 	rsbseq	r6, r9, lr, ror #6
     b94:	5f434352 	svcpl	0x00434352
     b98:	00455348 	subeq	r5, r5, r8, asr #6
     b9c:	5f434352 	svcpl	0x00434352
     ba0:	314f434d 	cmpcc	pc, sp, asr #6
     ba4:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     ba8:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
     bac:	415f4343 	cmpmi	pc, r3, asr #6
     bb0:	50314250 	eorspl	r4, r1, r0, asr r2
     bb4:	70697265 	rsbvc	r7, r9, r5, ror #4
     bb8:	73655268 	cmnvc	r5, #104, 4	; 0x80000006
     bbc:	6d437465 	cfstrdvs	mvd7, [r3, #-404]	; 0xfffffe6c
     bc0:	4c500064 	mrrcmi	0, 6, r0, r0, cr4	; <UNPREDICTABLE>
     bc4:	52004e4c 	andpl	r4, r0, #76, 28	; 0x4c0
     bc8:	535f4343 	cmppl	pc, #201326593	; 0xc000001
     bcc:	4c504941 	mrrcmi	9, 4, r4, r0, cr1
     bd0:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
     bd4:	446b6c43 	strbtmi	r6, [fp], #-3139	; 0xc43
     bd8:	6f437669 	svcvs	0x00437669
     bdc:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     be0:	4c4c5000 	marmi	acc0, r5, ip
     be4:	4c500050 	mrrcmi	0, 5, r0, r0, cr0	; <UNPREDICTABLE>
     be8:	5200514c 	andpl	r5, r0, #76, 2
     bec:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
     bf0:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
     bf4:	65505449 	ldrbvs	r5, [r0, #-1097]	; 0x449
     bf8:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
     bfc:	74694267 	strbtvc	r4, [r9], #-615	; 0x267
     c00:	4c4c5000 	marmi	acc0, r5, ip
     c04:	4352004d 	cmpmi	r2, #77	; 0x4d
     c08:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     c0c:	65503142 	ldrbvs	r3, [r0, #-322]	; 0x142
     c10:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     c14:	43435200 	movtmi	r5, #12800	; 0x3200
     c18:	6f6c435f 	svcvs	0x006c435f
     c1c:	00736b63 	rsbseq	r6, r3, r3, ror #22
     c20:	5f434352 	svcpl	0x00434352
     c24:	32425041 	subcc	r5, r2, #65	; 0x41
     c28:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     c2c:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
     c30:	4c6b636f 	stclmi	3, cr6, [fp], #-444	; 0xfffffe44
     c34:	646f4d50 	strbtvs	r4, [pc], #-3408	; c3c <_Min_Stack_Size+0x83c>
     c38:	646d4365 	strbtvs	r4, [sp], #-869	; 0x365
     c3c:	43435200 	movtmi	r5, #12800	; 0x3200
     c40:	656c435f 	strbvs	r4, [ip, #-863]!	; 0x35f
     c44:	6c467261 	sfmvs	f7, 2, [r6], {97}	; 0x61
     c48:	52006761 	andpl	r6, r0, #25427968	; 0x1840000
     c4c:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     c50:	6d740054 	ldclvs	0, cr0, [r4, #-336]!	; 0xfffffeb0
     c54:	67657270 			; <UNDEFINED> instruction: 0x67657270
     c58:	4c435000 	marmi	acc0, r5, r3
     c5c:	465f324b 	ldrbmi	r3, [pc], -fp, asr #4
     c60:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0x572
     c64:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     c68:	43435200 	movtmi	r5, #12800	; 0x3200
     c6c:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
     c70:	72655032 	rsbvc	r5, r5, #50	; 0x32
     c74:	43687069 	cmnmi	r8, #105	; 0x69
     c78:	6b636f6c 	blvs	18dca30 <_Min_Stack_Size+0x18dc630>
     c7c:	00646d43 	rsbeq	r6, r4, r3, asr #26
     c80:	5f434352 	svcpl	0x00434352
     c84:	4b4c4350 	blmi	13119cc <_Min_Stack_Size+0x13115cc>
     c88:	6e6f4331 	mcrvs	3, 3, r4, cr15, cr1, {1}
     c8c:	00676966 	rsbeq	r6, r7, r6, ror #18
     c90:	5f434352 	svcpl	0x00434352
     c94:	33424841 	movtcc	r4, #10305	; 0x2841
     c98:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     c9c:	65526870 	ldrbvs	r6, [r2, #-2160]	; 0x870
     ca0:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
     ca4:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
     ca8:	535f4343 	cmppl	pc, #201326593	; 0xc000001
     cac:	6c424941 	mcrrvs	9, 4, r4, r2, cr1
     cb0:	416b636f 	cmnmi	fp, pc, ror #6
     cb4:	434b4c43 	movtmi	r4, #48195	; 0xbc43
     cb8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     cbc:	43520067 	cmpmi	r2, #103	; 0x67
     cc0:	43485f43 	movtmi	r5, #36675	; 0x8f43
     cc4:	6f434b4c 	svcvs	0x00434b4c
     cc8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     ccc:	43435200 	movtmi	r5, #12800	; 0x3200
     cd0:	5359535f 	cmppl	r9, #2080374785	; 0x7c000001
     cd4:	434b4c43 	movtmi	r4, #48195	; 0xbc43
     cd8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     cdc:	43520067 	cmpmi	r2, #103	; 0x67
     ce0:	534c5f43 	movtpl	r5, #53059	; 0xcf43
     ce4:	6e6f4345 	cdpvs	3, 6, cr4, cr15, cr5, {2}
     ce8:	00676966 	rsbeq	r6, r7, r6, ror #18
     cec:	5f434352 	svcpl	0x00434352
     cf0:	47414c46 	strbmi	r4, [r1, -r6, asr #24]
     cf4:	43435200 	movtmi	r5, #12800	; 0x3200
     cf8:	6361425f 	cmnvs	r1, #-268435451	; 0xf0000005
     cfc:	5270756b 	rsbspl	r7, r0, #448790528	; 0x1ac00000
     d00:	74657365 	strbtvc	r7, [r5], #-869	; 0x365
     d04:	00646d43 	rsbeq	r6, r4, r3, asr #26
     d08:	6f727245 	svcvs	0x00727245
     d0c:	61745372 	cmnvs	r4, r2, ror r3
     d10:	00737574 	rsbseq	r7, r3, r4, ror r5
     d14:	5f434352 	svcpl	0x00434352
     d18:	534c4c50 	movtpl	r4, #52304	; 0xcc50
     d1c:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     d20:	43520065 	cmpmi	r2, #101	; 0x65
     d24:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xf43
     d28:	53595374 	cmppl	r9, #116, 6	; 0xd0000001
     d2c:	534b4c43 	movtpl	r4, #48195	; 0xbc43
     d30:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     d34:	43520065 	cmpmi	r2, #101	; 0x65
     d38:	61575f43 	cmpvs	r7, r3, asr #30
     d3c:	6f467469 	svcvs	0x00467469
     d40:	45534872 	ldrbmi	r4, [r3, #-2162]	; 0x872
     d44:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
     d48:	00705574 	rsbseq	r5, r0, r4, ror r5
     d4c:	4b4c4348 	blmi	1311a74 <_Min_Stack_Size+0x1311674>
     d50:	6572465f 	ldrbvs	r4, [r2, #-1631]!	; 0x65f
     d54:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
     d58:	52007963 	andpl	r7, r0, #1622016	; 0x18c000
     d5c:	415f4343 	cmpmi	pc, r3, asr #6
     d60:	50314250 	eorspl	r4, r1, r0, asr r2
     d64:	70697265 	rsbvc	r7, r9, r5, ror #4
     d68:	43520068 	cmpmi	r2, #104	; 0x68
     d6c:	54525f43 	ldrbpl	r5, [r2], #-3907	; 0xf43
     d70:	4b4c4343 	blmi	1311a84 <_Min_Stack_Size+0x1311684>
     d74:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     d78:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
     d7c:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; c78 <_Min_Stack_Size+0x878>
     d80:	43314f43 	teqmi	r1, #268	; 0x10c
     d84:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     d88:	43520067 	cmpmi	r2, #103	; 0x67
     d8c:	59535f43 	ldmdbpl	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     d90:	4b4c4353 	blmi	1311ae4 <_Min_Stack_Size+0x13116e4>
     d94:	43435200 	movtmi	r5, #12800	; 0x3200
     d98:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
     d9c:	43533249 	cmpmi	r3, #-1879048188	; 0x90000004
     da0:	7000646d 	andvc	r6, r0, sp, ror #8
     da4:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
     da8:	43435200 	movtmi	r5, #12800	; 0x3200
     dac:	4354525f 	cmpmi	r4, #-268435451	; 0xf0000005
     db0:	534b4c43 	movtpl	r4, #48195	; 0xbc43
     db4:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     db8:	43520065 	cmpmi	r2, #101	; 0x65
     dbc:	41535f43 	cmpmi	r3, r3, asr #30
     dc0:	6f6c4249 	svcvs	0x006c4249
     dc4:	43416b63 	movtmi	r6, #7011	; 0x1b63
     dc8:	6f534b4c 	svcvs	0x00534b4c
     dcc:	65637275 	strbvs	r7, [r3, #-629]!	; 0x275
     dd0:	43435200 	movtmi	r5, #12800	; 0x3200
     dd4:	4941535f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
     dd8:	636f6c42 	cmnvs	pc, #16896	; 0x4200
     ddc:	4c43426b 	sfmmi	f4, 2, [r3], {107}	; 0x6b
     de0:	756f534b 	strbvc	r5, [pc, #-843]!	; a9d <_Min_Stack_Size+0x69d>
     de4:	00656372 	rsbeq	r6, r5, r2, ror r3
     de8:	5f434352 	svcpl	0x00434352
     dec:	4344544c 	movtmi	r5, #17484	; 0x444c
     df0:	444b4c43 	strbmi	r4, [fp], #-3139	; 0xc43
     df4:	6f437669 	svcvs	0x00437669
     df8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     dfc:	43435200 	movtmi	r5, #12800	; 0x3200
     e00:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
     e04:	72655032 	rsbvc	r5, r5, #50	; 0x32
     e08:	43687069 	cmnmi	r8, #105	; 0x69
     e0c:	6b636f6c 	blvs	18dcbc4 <_Min_Stack_Size+0x18dc7c4>
     e10:	6f4d504c 	svcvs	0x004d504c
     e14:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]	; 0xfffffe70
     e18:	43520064 	cmpmi	r2, #100	; 0x64
     e1c:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
     e20:	5332494c 	teqpl	r2, #76, 18	; 0x130000
     e24:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     e28:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
     e2c:	485f4343 	ldmdami	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     e30:	6d434953 	stclvs	9, cr4, [r3, #-332]	; 0xfffffeb4
     e34:	43520064 	cmpmi	r2, #100	; 0x64
     e38:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     e3c:	65503242 	ldrbvs	r3, [r0, #-578]	; 0x242
     e40:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     e44:	43435200 	movtmi	r5, #12800	; 0x3200
     e48:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
     e4c:	72655033 	rsbvc	r5, r5, #51	; 0x33
     e50:	00687069 	rsbeq	r7, r8, r9, rrx
     e54:	5f434352 	svcpl	0x00434352
     e58:	324f434d 	subcc	r4, pc, #872415233	; 0x34000001
     e5c:	00766944 	rsbseq	r6, r6, r4, asr #18
     e60:	5f434352 	svcpl	0x00434352
     e64:	50494153 	subpl	r4, r9, r3, asr r1
     e68:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
     e6c:	6b6c4353 	blvs	1b11bc0 <_Min_Stack_Size+0x1b117c0>
     e70:	43766944 	cmnmi	r6, #68, 18	; 0x110000
     e74:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     e78:	43520067 	cmpmi	r2, #103	; 0x67
     e7c:	54525f43 	ldrbpl	r5, [r2], #-3907	; 0xf43
     e80:	4b4c4343 	blmi	1311b94 <_Min_Stack_Size+0x1311794>
     e84:	00646d43 	rsbeq	r6, r4, r3, asr #26
     e88:	4f525245 	svcmi	0x00525245
     e8c:	43520052 	cmpmi	r2, #82	; 0x52
     e90:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
     e94:	536b636f 	cmnpl	fp, #-1140850687	; 0xbc000001
     e98:	72756365 	rsbsvc	r6, r5, #-1811939327	; 0x94000001
     e9c:	53797469 	cmnpl	r9, #1761607680	; 0x69000000
     ea0:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0x379
     ea4:	646d436d 	strbtvs	r4, [sp], #-877	; 0x36d
     ea8:	43435200 	movtmi	r5, #12800	; 0x3200
     eac:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
     eb0:	44533249 	ldrbmi	r3, [r3], #-585	; 0x249
     eb4:	00517669 	subseq	r7, r1, r9, ror #12
     eb8:	5f434352 	svcpl	0x00434352
     ebc:	534c4c50 	movtpl	r4, #52304	; 0xcc50
     ec0:	6f434941 	svcvs	0x00434941
     ec4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     ec8:	43435200 	movtmi	r5, #12800	; 0x3200
     ecc:	4f434d5f 	svcmi	0x00434d5f
     ed0:	76694431 			; <UNDEFINED> instruction: 0x76694431
     ed4:	43435200 	movtmi	r5, #12800	; 0x3200
     ed8:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
     edc:	72655032 	rsbvc	r5, r5, #50	; 0x32
     ee0:	52687069 	rsbpl	r7, r8, #105	; 0x69
     ee4:	74657365 	strbtvc	r7, [r5], #-869	; 0x365
     ee8:	00646d43 	rsbeq	r6, r4, r3, asr #26
     eec:	5f434352 	svcpl	0x00434352
     ef0:	324f434d 	subcc	r4, pc, #872415233	; 0x34000001
     ef4:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     ef8:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
     efc:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     f00:	4c435332 	mcrrmi	3, 3, r5, r3, cr2
     f04:	756f534b 	strbvc	r5, [pc, #-843]!	; bc1 <_Min_Stack_Size+0x7c1>
     f08:	00656372 	rsbeq	r6, r5, r2, ror r3
     f0c:	5f434352 	svcpl	0x00434352
     f10:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
     f14:	5367616c 	cmnpl	r7, #108, 2
     f18:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
     f1c:	43520073 	cmpmi	r2, #115	; 0x73
     f20:	53485f43 	movtpl	r5, #36675	; 0x8f43
     f24:	6e6f4345 	cdpvs	3, 6, cr4, cr15, cr5, {2}
     f28:	00676966 	rsbeq	r6, r7, r6, ror #18
     f2c:	5f434352 	svcpl	0x00434352
     f30:	42494153 	submi	r4, r9, #-1073741804	; 0xc0000014
     f34:	6b636f6c 	blvs	18dccec <_Min_Stack_Size+0x18dc8ec>
     f38:	4b4c4342 	blmi	1311c48 <_Min_Stack_Size+0x1311848>
     f3c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     f40:	50006769 	andpl	r6, r0, r9, ror #14
     f44:	41534c4c 	cmpmi	r3, ip, asr #24
     f48:	50004e49 	andpl	r4, r0, r9, asr #28
     f4c:	41534c4c 	cmpmi	r3, ip, asr #24
     f50:	50005149 	andpl	r5, r0, r9, asr #2
     f54:	41534c4c 	cmpmi	r3, ip, asr #24
     f58:	52005249 	andpl	r5, r0, #-1879048188	; 0x90000004
     f5c:	545f4343 	ldrbpl	r4, [pc], #-835	; f64 <_Min_Stack_Size+0xb64>
     f60:	4c434d49 	mcrrmi	13, 4, r4, r3, cr9
     f64:	6572504b 	ldrbvs	r5, [r2, #-75]!	; 0x4b
     f68:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
     f6c:	52007265 	andpl	r7, r0, #1342177286	; 0x50000006
     f70:	505f4343 	subspl	r4, pc, r3, asr #6
     f74:	6d434c4c 	stclvs	12, cr4, [r3, #-304]	; 0xfffffed0
     f78:	43520064 	cmpmi	r2, #100	; 0x64
     f7c:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     f80:	65503242 	ldrbvs	r3, [r0, #-578]	; 0x242
     f84:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     f88:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0x552
     f8c:	646d4374 	strbtvs	r4, [sp], #-884	; 0x374
     f90:	43435200 	movtmi	r5, #12800	; 0x3200
     f94:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
     f98:	72655031 	rsbvc	r5, r5, #49	; 0x31
     f9c:	43687069 	cmnmi	r8, #105	; 0x69
     fa0:	6b636f6c 	blvs	18dcd58 <_Min_Stack_Size+0x18dc958>
     fa4:	6f4d504c 	svcvs	0x004d504c
     fa8:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]	; 0xfffffe70
     fac:	43520064 	cmpmi	r2, #100	; 0x64
     fb0:	43505f43 	cmpmi	r0, #268	; 0x10c
     fb4:	43324b4c 	teqmi	r2, #76, 22	; 0x13000
     fb8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     fbc:	43520067 	cmpmi	r2, #103	; 0x67
     fc0:	59535f43 	ldmdbpl	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     fc4:	4b4c4353 	blmi	1311d18 <_Min_Stack_Size+0x1311918>
     fc8:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     fcc:	50006563 	andpl	r6, r0, r3, ror #10
     fd0:	314b4c43 	cmpcc	fp, r3, asr #24
     fd4:	6572465f 	ldrbvs	r4, [r2, #-1631]!	; 0x65f
     fd8:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
     fdc:	41007963 	tstmi	r0, r3, ror #18
     fe0:	48414250 	stmdami	r1, {r4, r6, r9, lr}^
     fe4:	65725042 	ldrbvs	r5, [r2, #-66]!	; 0x42
     fe8:	61546373 	cmpvs	r4, r3, ror r3
     fec:	00656c62 	rsbeq	r6, r5, r2, ror #24
     ff0:	5f434352 	svcpl	0x00434352
     ff4:	756a6441 	strbvc	r6, [sl, #-1089]!	; 0x441
     ff8:	53487473 	movtpl	r7, #33907	; 0x8473
     ffc:	6c614349 	stclvs	3, cr4, [r1], #-292	; 0xfffffedc
    1000:	61726269 	cmnvs	r2, r9, ror #4
    1004:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    1008:	756c6156 	strbvc	r6, [ip, #-342]!	; 0x156
    100c:	73680065 	cmnvc	r8, #101	; 0x65
    1010:	61747365 	cmnvs	r4, r5, ror #6
    1014:	00737574 	rsbseq	r7, r3, r4, ror r5
    1018:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
    101c:	004e5332 	subeq	r5, lr, r2, lsr r3
    1020:	5f434352 	svcpl	0x00434352
    1024:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    1028:	6b636f6c 	blvs	18dcde0 <_Min_Stack_Size+0x18dc9e0>
    102c:	65724673 	ldrbvs	r4, [r2, #-1651]!	; 0x673
    1030:	43520071 	cmpmi	r2, #113	; 0x71
    1034:	65445f43 	strbvs	r5, [r4, #-3907]	; 0xf43
    1038:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    103c:	4c4c5000 	marmi	acc0, r5, ip
    1040:	51533249 	cmppl	r3, r9, asr #4
    1044:	4c4c5000 	marmi	acc0, r5, ip
    1048:	52533249 	subspl	r3, r3, #-1879048188	; 0x90000004
    104c:	43435200 	movtmi	r5, #12800	; 0x3200
    1050:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    1054:	74535449 	ldrbvc	r5, [r3], #-1097	; 0x449
    1058:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    105c:	2f2e2e00 	svccs	0x002e2e00
    1060:	62694c2f 	rsbvs	r4, r9, #12032	; 0x2f00
    1064:	69726172 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, sp, lr}^
    1068:	532f7365 	teqpl	pc, #-1811939327	; 0x94000001
    106c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1070:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    1074:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0x35f
    1078:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    107c:	445f6870 	ldrbmi	r6, [pc], #-2160	; 1084 <_Min_Stack_Size+0xc84>
    1080:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0x972
    1084:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    1088:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xf63
    108c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1090:	5f787834 	svcpl	0x00787834
    1094:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
    1098:	43520063 	cmpmi	r2, #99	; 0x63
    109c:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    10a0:	65503342 	ldrbvs	r3, [r0, #-834]	; 0x342
    10a4:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    10a8:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    10ac:	4d504c6b 	ldclmi	12, cr4, [r0, #-428]	; 0xfffffe54
    10b0:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
    10b4:	7300646d 	movwvc	r6, #1133	; 0x46d
    10b8:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
    10bc:	6f637075 	svcvs	0x00637075
    10c0:	65746e75 	ldrbvs	r6, [r4, #-3701]!	; 0xe75
    10c4:	43520072 	cmpmi	r2, #114	; 0x72
    10c8:	50415f43 	subpl	r5, r1, r3, asr #30
    10cc:	65503242 	ldrbvs	r3, [r0, #-578]	; 0x242
    10d0:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    10d4:	43435200 	movtmi	r5, #12800	; 0x3200
    10d8:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
    10dc:	504b4c43 	subpl	r4, fp, r3, asr #24
    10e0:	43736572 	cmnmi	r3, #478150656	; 0x1c800000
    10e4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    10e8:	43520067 	cmpmi	r2, #103	; 0x67
    10ec:	32495f43 	subcc	r5, r9, #268	; 0x10c
    10f0:	4b4c4353 	blmi	1311e44 <_Min_Stack_Size+0x1311a44>
    10f4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    10f8:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    10fc:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; ff8 <_Min_Stack_Size+0xbf8>
    1100:	43324f43 	teqmi	r2, #268	; 0x10c
    1104:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1108:	43520067 	cmpmi	r2, #103	; 0x67
    110c:	534c5f43 	movtpl	r5, #53059	; 0xcf43
    1110:	646d4349 	strbtvs	r4, [sp], #-841	; 0x349
    1114:	43435200 	movtmi	r5, #12800	; 0x3200
    1118:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
    111c:	72655031 	rsbvc	r5, r5, #49	; 0x31
    1120:	43687069 	cmnmi	r8, #105	; 0x69
    1124:	6b636f6c 	blvs	18dcedc <_Min_Stack_Size+0x18dcadc>
    1128:	00646d43 	rsbeq	r6, r4, r3, asr #26
    112c:	5f434352 	svcpl	0x00434352
    1130:	6f435449 	svcvs	0x00435449
    1134:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1138:	43555300 	cmpmi	r5, #0, 6
    113c:	53534543 	cmppl	r3, #281018368	; 0x10c00000
    1140:	43435200 	movtmi	r5, #12800	; 0x3200
    1144:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
    1148:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    114c:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    1150:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
    1154:	6b636f6c 	blvs	18dcf0c <_Min_Stack_Size+0x18dcb0c>
    1158:	70795473 	rsbsvc	r5, r9, r3, ror r4
    115c:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    1160:	43435200 	movtmi	r5, #12800	; 0x3200
    1164:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
    1168:	72655031 	rsbvc	r5, r5, #49	; 0x31
    116c:	43687069 	cmnmi	r8, #105	; 0x69
    1170:	6b636f6c 	blvs	18dcf28 <_Min_Stack_Size+0x18dcb28>
    1174:	6f4d504c 	svcvs	0x004d504c
    1178:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]	; 0xfffffe70
    117c:	43520064 	cmpmi	r2, #100	; 0x64
    1180:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1184:	65503342 	ldrbvs	r3, [r0, #-834]	; 0x342
    1188:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    118c:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1190:	646d436b 	strbtvs	r4, [sp], #-875	; 0x36b
    1194:	746e6900 	strbtvc	r6, [lr], #-2304	; 0x900
    1198:	72656765 	rsbvc	r6, r5, #26476544	; 0x1940000
    119c:	69766964 	ldmdbvs	r6!, {r2, r5, r6, r8, fp, sp, lr}^
    11a0:	00726564 	rsbseq	r6, r2, r4, ror #10
    11a4:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    11a8:	50435f54 	subpl	r5, r3, r4, asr pc
    11ac:	55004148 	strpl	r4, [r0, #-328]	; 0x148
    11b0:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    11b4:	6365525f 	cmnvs	r5, #-268435451	; 0xf0000005
    11b8:	65766965 	ldrbvs	r6, [r6, #-2405]!	; 0x965
    11bc:	6b615772 	blvs	1856f8c <_Min_Stack_Size+0x1856b8c>
    11c0:	43705565 	cmnmi	r0, #423624704	; 0x19400000
    11c4:	5500646d 	strpl	r6, [r0, #-1133]	; 0x46d
    11c8:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    11cc:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
    11d0:	73657250 	cmnvc	r5, #80, 4
    11d4:	656c6163 	strbvs	r6, [ip, #-355]!	; 0x163
    11d8:	53550072 	cmppl	r5, #114	; 0x72
    11dc:	5f545241 	svcpl	0x00545241
    11e0:	424e494c 	submi	r4, lr, #76, 18	; 0x130000
    11e4:	6b616572 	blvs	185a7b4 <_Min_Stack_Size+0x185a3b4>
    11e8:	65746544 	ldrbvs	r6, [r4, #-1348]!	; 0x544
    11ec:	654c7463 	strbvs	r7, [ip, #-1123]	; 0x463
    11f0:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    11f4:	41535500 	cmpmi	r3, r0, lsl #10
    11f8:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    11fc:	6b636f6c 	blvs	18dcfb4 <_Min_Stack_Size+0x18dcbb4>
    1200:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    1204:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    1208:	00666544 	rsbeq	r6, r6, r4, asr #10
    120c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1210:	54495f54 	strbpl	r5, [r9], #-3924	; 0xf54
    1214:	41535500 	cmpmi	r3, r0, lsl #10
    1218:	575f5452 			; <UNDEFINED> instruction: 0x575f5452
    121c:	55656b61 	strbpl	r6, [r5, #-2913]!	; 0xb61
    1220:	53550070 	cmppl	r5, #112	; 0x70
    1224:	5f545241 	svcpl	0x00545241
    1228:	43414d44 	movtmi	r4, #7492	; 0x1d44
    122c:	5500646d 	strpl	r6, [r0, #-1133]	; 0x46d
    1230:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    1234:	73614c5f 	cmnvc	r1, #24320	; 0x5f00
    1238:	74694274 	strbtvc	r4, [r9], #-628	; 0x274
    123c:	41535500 	cmpmi	r3, r0, lsl #10
    1240:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    1244:	4d414472 	cfstrdmi	mvd4, [r1, #-456]	; 0xfffffe38
    1248:	0065646f 	rsbeq	r6, r5, pc, ror #8
    124c:	63627061 	cmnvs	r2, #97	; 0x61
    1250:	6b636f6c 	blvs	18dd008 <_Min_Stack_Size+0x18dcc08>
    1254:	41535500 	cmpmi	r3, r0, lsl #10
    1258:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    125c:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    1260:	65505449 	ldrbvs	r5, [r0, #-1097]	; 0x449
    1264:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    1268:	74694267 	strbtvc	r4, [r9], #-615	; 0x267
    126c:	41535500 	cmpmi	r3, r0, lsl #10
    1270:	475f5452 			; <UNDEFINED> instruction: 0x475f5452
    1274:	64726175 	ldrbtvs	r6, [r2], #-373	; 0x175
    1278:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    127c:	41535500 	cmpmi	r3, r0, lsl #10
    1280:	4c5f5452 	cfldrdmi	mvd5, [pc], {82}	; 0x52
    1284:	72424e49 	subvc	r4, r2, #1168	; 0x490
    1288:	446b6165 	strbtmi	r6, [fp], #-357	; 0x165
    128c:	63657465 	cmnvs	r5, #1694498816	; 0x65000000
    1290:	6e654c74 	mcrvs	12, 3, r4, cr5, cr4, {3}
    1294:	43687467 	cmnmi	r8, #1728053248	; 0x67000000
    1298:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    129c:	53550067 	cmppl	r5, #103	; 0x67
    12a0:	5f545241 	svcpl	0x00545241
    12a4:	47414c46 	strbmi	r4, [r1, -r6, asr #24]
    12a8:	41535500 	cmpmi	r3, r0, lsl #10
    12ac:	445f5452 	ldrbmi	r5, [pc], #-1106	; 12b4 <_Min_Stack_Size+0xeb4>
    12b0:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    12b4:	53550074 	cmppl	r5, #116	; 0x74
    12b8:	5f545241 	svcpl	0x00545241
    12bc:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    12c0:	696e496b 	stmdbvs	lr!, {r0, r1, r3, r5, r6, r8, fp, lr}^
    12c4:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    12c8:	00746375 	rsbseq	r6, r4, r5, ror r3
    12cc:	2f2f2e2e 	svccs	0x002f2e2e
    12d0:	7262694c 	rsbvc	r6, r2, #76, 18	; 0x130000
    12d4:	65697261 	strbvs	r7, [r9, #-609]!	; 0x261
    12d8:	54532f73 	ldrbpl	r2, [r3], #-3955	; 0xf73
    12dc:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    12e0:	5f787834 	svcpl	0x00787834
    12e4:	50647453 	rsbpl	r7, r4, r3, asr r4
    12e8:	70697265 	rsbvc	r7, r9, r5, ror #4
    12ec:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    12f0:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    12f4:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    12f8:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
    12fc:	34663233 	strbtcc	r3, [r6], #-563	; 0x233
    1300:	755f7878 	ldrbvc	r7, [pc, #-2168]	; a90 <_Min_Stack_Size+0x690>
    1304:	74726173 	ldrbtvc	r6, [r2], #-371	; 0x173
    1308:	5500632e 	strpl	r6, [r0, #-814]	; 0x32e
    130c:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    1310:	6f6c435f 	svcvs	0x006c435f
    1314:	74536b63 	ldrbvc	r6, [r3], #-2915	; 0xb63
    1318:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    131c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    1320:	61737500 	cmnvs	r3, r0, lsl #10
    1324:	62787472 	rsbsvs	r7, r8, #1912602624	; 0x72000000
    1328:	00657361 	rsbeq	r7, r5, r1, ror #6
    132c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1330:	6c435f54 	mcrrvs	15, 5, r5, r3, cr4
    1334:	46726165 	ldrbtmi	r6, [r2], -r5, ror #2
    1338:	0067616c 	rsbeq	r6, r7, ip, ror #2
    133c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1340:	65535f54 	ldrbvs	r5, [r3, #-3924]	; 0xf54
    1344:	64644174 	strbtvs	r4, [r4], #-372	; 0x174
    1348:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    134c:	41535500 	cmpmi	r3, r0, lsl #10
    1350:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    1354:	75477465 	strbvc	r7, [r7, #-1125]	; 0x465
    1358:	54647261 	strbtpl	r7, [r4], #-609	; 0x261
    135c:	00656d69 	rsbeq	r6, r5, r9, ror #26
    1360:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1364:	65535f54 	ldrbvs	r5, [r3, #-3924]	; 0xf54
    1368:	7242646e 	subvc	r6, r2, #1845493760	; 0x6e000000
    136c:	006b6165 	rsbeq	r6, fp, r5, ror #2
    1370:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1374:	54495f54 	strbpl	r5, [r9], #-3924	; 0xf54
    1378:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    137c:	55006769 	strpl	r6, [r0, #-1897]	; 0x769
    1380:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    1384:	414d445f 	cmpmi	sp, pc, asr r4
    1388:	00716552 	rsbseq	r6, r1, r2, asr r5
    138c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1390:	55007854 	strpl	r7, [r0, #-2132]	; 0x854
    1394:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    1398:	656e4f5f 	strbvs	r4, [lr, #-3935]!	; 0xf5f
    139c:	4d746942 	ldclmi	9, cr6, [r4, #-264]!	; 0xfffffef8
    13a0:	6f687465 	svcvs	0x00687465
    13a4:	646d4364 	strbtvs	r4, [sp], #-868	; 0x364
    13a8:	41535500 	cmpmi	r3, r0, lsl #10
    13ac:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    13b0:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0x16d
    13b4:	64726143 	ldrbtvs	r6, [r2], #-323	; 0x143
    13b8:	00646d43 	rsbeq	r6, r4, r3, asr #26
    13bc:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    13c0:	64415f54 	strbvs	r5, [r1], #-3924	; 0xf54
    13c4:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    13c8:	69620073 	stmdbvs	r2!, {r0, r1, r4, r5, r6}^
    13cc:	736f7074 	cmnvc	pc, #116	; 0x74
    13d0:	41535500 	cmpmi	r3, r0, lsl #10
    13d4:	4f5f5452 	svcmi	0x005f5452
    13d8:	53726576 	cmnpl	r2, #494927872	; 0x1d800000
    13dc:	6c706d61 	ldclvs	13, cr6, [r0], #-388	; 0xfffffe7c
    13e0:	38676e69 	stmdacc	r7!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
    13e4:	00646d43 	rsbeq	r6, r4, r3, asr #26
    13e8:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    13ec:	65475f54 	strbvs	r5, [r7, #-3924]	; 0xf54
    13f0:	53544974 	cmppl	r4, #116, 18	; 0x1d0000
    13f4:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    13f8:	53550073 	cmppl	r5, #115	; 0x73
    13fc:	5f545241 	svcpl	0x00545241
    1400:	434e494c 	movtmi	r4, #59724	; 0xe94c
    1404:	5500646d 	strpl	r6, [r0, #-1133]	; 0x46d
    1408:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    140c:	4472495f 	ldrbtmi	r4, [r2], #-2399	; 0x95f
    1410:	6e6f4341 	cdpvs	3, 6, cr4, cr15, cr1, {2}
    1414:	00676966 	rsbeq	r6, r7, r6, ror #18
    1418:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    141c:	6c435f54 	mcrrvs	15, 5, r5, r3, cr4
    1420:	006b636f 	rsbeq	r6, fp, pc, ror #6
    1424:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1428:	72495f54 	subvc	r5, r9, #84, 30	; 0x150
    142c:	6d434144 	stfvse	f4, [r3, #-272]	; 0xfffffef0
    1430:	72660064 	rsbvc	r0, r6, #100	; 0x64
    1434:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
    1438:	6c616e6f 	stclvs	14, cr6, [r1], #-444	; 0xfffffe44
    143c:	69766964 	ldmdbvs	r6!, {r2, r5, r6, r8, fp, sp, lr}^
    1440:	00726564 	rsbseq	r6, r2, r4, ror #10
    1444:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1448:	6d535f54 	ldclvs	15, cr5, [r3, #-336]	; 0xfffffeb0
    144c:	43747261 	cmnmi	r4, #268435462	; 0x10000006
    1450:	4e647261 	cdpmi	2, 6, cr7, cr4, cr1, {3}
    1454:	434b4341 	movtmi	r4, #45889	; 0xb341
    1458:	5500646d 	strpl	r6, [r0, #-1133]	; 0x46d
    145c:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    1460:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    1464:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    1468:	00746375 	rsbseq	r6, r4, r5, ror r3
    146c:	5f434352 	svcpl	0x00434352
    1470:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1474:	7453736b 	ldrbvc	r7, [r3], #-875	; 0x36b
    1478:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    147c:	41535500 	cmpmi	r3, r0, lsl #10
    1480:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    1484:	6b636f6c 	blvs	18dd23c <_Min_Stack_Size+0x18dce3c>
    1488:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    148c:	41535500 	cmpmi	r3, r0, lsl #10
    1490:	575f5452 			; <UNDEFINED> instruction: 0x575f5452
    1494:	55656b61 	strbpl	r6, [r5, #-2913]!	; 0xb61
    1498:	6e6f4370 	mcrvs	3, 3, r4, cr15, cr0, {3}
    149c:	00676966 	rsbeq	r6, r7, r6, ror #18
    14a0:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    14a4:	61485f54 	cmpvs	r8, r4, asr pc
    14a8:	7544666c 	strbvc	r6, [r4, #-1644]	; 0x66c
    14ac:	78656c70 	stmdavc	r5!, {r4, r5, r6, sl, fp, sp, lr}^
    14b0:	00646d43 	rsbeq	r6, r4, r3, asr #26
    14b4:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    14b8:	74535f54 	ldrbvc	r5, [r3], #-3924	; 0xf54
    14bc:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    14c0:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    14c4:	41535500 	cmpmi	r3, r0, lsl #10
    14c8:	505f5452 	subspl	r5, pc, r2, asr r4	; <UNPREDICTABLE>
    14cc:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    14d0:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    14d4:	41535500 	cmpmi	r3, r0, lsl #10
    14d8:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    14dc:	004c4f50 	subeq	r4, ip, r0, asr pc
    14e0:	616d7469 	cmnvs	sp, r9, ror #8
    14e4:	55006b73 	strpl	r6, [r0, #-2931]	; 0xb73
    14e8:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    14ec:	6365525f 	cmnvs	r5, #-268435451	; 0xf0000005
    14f0:	65766965 	ldrbvs	r6, [r6, #-2405]!	; 0x965
    14f4:	61746144 	cmnvs	r4, r4, asr #2
    14f8:	61737500 	cmnvs	r3, r0, lsl #10
    14fc:	65727472 	ldrbvs	r7, [r2, #-1138]!	; 0x472
    1500:	59530067 	ldmdbpl	r3, {r0, r1, r2, r5, r6}^
    1504:	47464353 	smlsldmi	r4, r6, r3, r3
    1508:	6d6f435f 	stclvs	3, cr4, [pc, #-380]!	; 1394 <_Min_Stack_Size+0xf94>
    150c:	736e6570 	cmnvc	lr, #112, 10	; 0x1c000000
    1510:	6f697461 	svcvs	0x00697461
    1514:	6c65436e 	stclvs	3, cr4, [r5], #-440	; 0xfffffe48
    1518:	646d436c 	strbtvs	r4, [sp], #-876	; 0x36c
    151c:	53595300 	cmppl	r9, #0, 6
    1520:	5f474643 	svcpl	0x00474643
    1524:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    1528:	65706d6f 	ldrbvs	r6, [r0, #-3439]!	; 0xd6f
    152c:	7461736e 	strbtvc	r7, [r1], #-878	; 0x36e
    1530:	436e6f69 	cmnmi	lr, #420	; 0x1a4
    1534:	536c6c65 	cmnpl	ip, #25856	; 0x6500
    1538:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    153c:	59530073 	ldmdbpl	r3, {r0, r1, r4, r5, r6}^
    1540:	47464353 	smlsldmi	r4, r6, r3, r3
    1544:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    1548:	0074696e 	rsbseq	r6, r4, lr, ror #18
    154c:	43535953 	cmpmi	r3, #1359872	; 0x14c000
    1550:	455f4746 	ldrbmi	r4, [pc, #-1862]	; e12 <_Min_Stack_Size+0xa12>
    1554:	4c495458 	cfstrdmi	mvd5, [r9], {88}	; 0x58
    1558:	43656e69 	cmnmi	r5, #1680	; 0x690
    155c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1560:	4d430067 	stclmi	0, cr0, [r3, #-412]	; 0xfffffe64
    1564:	00524350 	subseq	r4, r2, r0, asr r3
    1568:	524d454d 	subpl	r4, sp, #322961408	; 0x13400000
    156c:	5300504d 	movwpl	r5, #77	; 0x4d
    1570:	46435359 			; <UNDEFINED> instruction: 0x46435359
    1574:	54455f47 	strbpl	r5, [r5], #-3911	; 0xf47
    1578:	654d5f48 	strbvs	r5, [sp, #-3912]	; 0xf48
    157c:	49616964 	stmdbmi	r1!, {r2, r5, r6, r8, fp, sp, lr}^
    1580:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    1584:	65636166 	strbvs	r6, [r3, #-358]!	; 0x166
    1588:	53455200 	movtpl	r5, #20992	; 0x5200
    158c:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
    1590:	59530044 	ldmdbpl	r3, {r2, r6}^
    1594:	47464353 	smlsldmi	r4, r6, r3, r3
    1598:	6d654d5f 	stclvs	13, cr4, [r5, #-380]!	; 0xfffffe84
    159c:	5379726f 	cmnpl	r9, #-268435450	; 0xf0000006
    15a0:	70706177 	rsbsvc	r6, r0, r7, ror r1
    15a4:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    15a8:	006b6e61 	rsbeq	r6, fp, r1, ror #28
    15ac:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    15b0:	45005243 	strmi	r5, [r0, #-579]	; 0x243
    15b4:	5f495458 	svcpl	0x00495458
    15b8:	536e6950 	cmnpl	lr, #80, 18	; 0x140000
    15bc:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    15c0:	53007865 	movwpl	r7, #2149	; 0x865
    15c4:	46435359 			; <UNDEFINED> instruction: 0x46435359
    15c8:	54455f47 	strbpl	r5, [r5], #-3911	; 0xf47
    15cc:	654d5f48 	strbvs	r5, [sp, #-3912]	; 0xf48
    15d0:	49616964 	stmdbmi	r1!, {r2, r5, r6, r8, fp, sp, lr}^
    15d4:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    15d8:	65636166 	strbvs	r6, [r3, #-358]!	; 0x166
    15dc:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    15e0:	53006769 	movwpl	r6, #1897	; 0x769
    15e4:	46435359 			; <UNDEFINED> instruction: 0x46435359
    15e8:	654d5f47 	strbvs	r5, [sp, #-3911]	; 0xf47
    15ec:	79726f6d 	ldmdbvc	r2!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    15f0:	616d6552 	cmnvs	sp, r2, asr r5
    15f4:	2e2e0070 	mcrcs	0, 1, r0, cr14, cr0, {3}
    15f8:	694c2f2f 	stmdbvs	ip, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}^
    15fc:	72617262 	rsbvc	r7, r1, #536870918	; 0x20000006
    1600:	2f736569 	svccs	0x00736569
    1604:	334d5453 	movtcc	r5, #54355	; 0xd453
    1608:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    160c:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xf78
    1610:	72655064 	rsbvc	r5, r5, #100	; 0x64
    1614:	5f687069 	svcpl	0x00687069
    1618:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    161c:	732f7265 	teqvc	pc, #1342177286	; 0x50000006
    1620:	732f6372 	teqvc	pc, #-939524095	; 0xc8000001
    1624:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    1628:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    162c:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    1630:	2e676663 	cdpcs	6, 6, cr6, cr7, cr3, {3}
    1634:	59530063 	ldmdbpl	r3, {r0, r1, r5, r6}^
    1638:	47464353 	smlsldmi	r4, r6, r3, r3
    163c:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    1640:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    1644:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
    1648:	6f505f49 	svcvs	0x00505f49
    164c:	6f537472 	svcvs	0x00537472
    1650:	65637275 	strbvs	r7, [r3, #-629]!	; 0x275
    1654:	4f495047 	svcmi	0x00495047
    1658:	59530078 	ldmdbpl	r3, {r3, r4, r5, r6}^
    165c:	47464353 	smlsldmi	r4, r6, r3, r3
    1660:	6d654d5f 	stclvs	13, cr4, [r5, #-380]!	; 0xfffffe84
    1664:	5279726f 	rsbspl	r7, r9, #-268435450	; 0xf0000006
    1668:	70616d65 	rsbvc	r6, r1, r5, ror #26
    166c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1670:	Address 0x0000000000001670 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <_Min_Stack_Size+0x10d0924>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xd45
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2973726f 	ldmdbcs	r3!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
  2c:	382e3420 	stmdacc	lr!, {r5, sl, ip, sp}
  30:	3220342e 	eorcc	r3, r0, #771751936	; 0x2e000000
  34:	30343130 	eorscc	r3, r4, r0, lsr r1
  38:	20353237 	eorscs	r3, r5, r7, lsr r2
  3c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  40:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0x165
  44:	415b2029 	cmpmi	fp, r9, lsr #32
  48:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff2fe <_estack+0xdffcf2fe>
  4c:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
  50:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  54:	2d385f34 	ldccs	15, cr5, [r8, #-208]!	; 0xffffff30
  58:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
  5c:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
  60:	73697665 	cmnvc	r9, #105906176	; 0x6500000
  64:	206e6f69 	rsbcs	r6, lr, r9, ror #30
  68:	31333132 	teqcc	r3, r2, lsr r1
  6c:	005d3734 	subseq	r3, sp, r4, lsr r7

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	00000014 	andeq	r0, r0, r4, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	080001c0 	stmdaeq	r0, {r6, r7, r8}
  1c:	00000016 	andeq	r0, r0, r6, lsl r0
  20:	83080e41 	movwhi	r0, #36417	; 0x8e41
  24:	00018e02 	andeq	r8, r1, r2, lsl #28
  28:	00000018 	andeq	r0, r0, r8, lsl r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	080001d8 	stmdaeq	r0, {r3, r4, r6, r7, r8}
  34:	00000044 	andeq	r0, r0, r4, asr #32
  38:	840c0e41 	strhi	r0, [ip], #-3649	; 0xe41
  3c:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
  40:	180e4201 	stmdane	lr, {r0, r9, lr}
  44:	00000018 	andeq	r0, r0, r8, lsl r0
  48:	00000000 	andeq	r0, r0, r0
  4c:	0800021c 	stmdaeq	r0, {r2, r3, r4, r9}
  50:	00000038 	andeq	r0, r0, r8, lsr r0
  54:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
  58:	42018e02 	andmi	r8, r1, #2, 28
  5c:	0000100e 	andeq	r1, r0, lr
  60:	0000000c 	andeq	r0, r0, ip
  64:	00000000 	andeq	r0, r0, r0
  68:	08000254 	stmdaeq	r0, {r2, r4, r6, r9}
  6c:	00000010 	andeq	r0, r0, r0, lsl r0
  70:	00000018 	andeq	r0, r0, r8, lsl r0
  74:	00000000 	andeq	r0, r0, r0
  78:	08000264 	stmdaeq	r0, {r2, r5, r6, r9}
  7c:	0000003c 	andeq	r0, r0, ip, lsr r0
  80:	840c0e41 	strhi	r0, [ip], #-3649	; 0xe41
  84:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
  88:	200e4201 	andcs	r4, lr, r1, lsl #4
  8c:	00000014 	andeq	r0, r0, r4, lsl r0
  90:	00000000 	andeq	r0, r0, r0
  94:	080002a0 	stmdaeq	r0, {r5, r7, r9}
  98:	0000002c 	andeq	r0, r0, ip, lsr #32
  9c:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
  a0:	00018e02 	andeq	r8, r1, r2, lsl #28
  a4:	00000014 	andeq	r0, r0, r4, lsl r0
  a8:	00000000 	andeq	r0, r0, r0
  ac:	080002cc 	stmdaeq	r0, {r2, r3, r6, r7, r9}
  b0:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
  b4:	83080e41 	movwhi	r0, #36417	; 0x8e41
  b8:	00018e02 	andeq	r8, r1, r2, lsl #28
  bc:	0000000c 	andeq	r0, r0, ip
  c0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  c4:	7c020001 	stcvc	0, cr0, [r2], {1}
  c8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  cc:	0000000c 	andeq	r0, r0, ip
  d0:	000000bc 	strheq	r0, [r0], -ip
  d4:	0800037c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9}
  d8:	00000002 	andeq	r0, r0, r2
  dc:	0000000c 	andeq	r0, r0, ip
  e0:	000000bc 	strheq	r0, [r0], -ip
  e4:	08000380 	stmdaeq	r0, {r7, r8, r9}
  e8:	00000002 	andeq	r0, r0, r2
  ec:	0000000c 	andeq	r0, r0, ip
  f0:	000000bc 	strheq	r0, [r0], -ip
  f4:	08000384 	stmdaeq	r0, {r2, r7, r8, r9}
  f8:	00000002 	andeq	r0, r0, r2
  fc:	0000000c 	andeq	r0, r0, ip
 100:	000000bc 	strheq	r0, [r0], -ip
 104:	08000388 	stmdaeq	r0, {r3, r7, r8, r9}
 108:	00000002 	andeq	r0, r0, r2
 10c:	0000000c 	andeq	r0, r0, ip
 110:	000000bc 	strheq	r0, [r0], -ip
 114:	0800038c 	stmdaeq	r0, {r2, r3, r7, r8, r9}
 118:	00000002 	andeq	r0, r0, r2
 11c:	0000000c 	andeq	r0, r0, ip
 120:	000000bc 	strheq	r0, [r0], -ip
 124:	08000390 	stmdaeq	r0, {r4, r7, r8, r9}
 128:	00000002 	andeq	r0, r0, r2
 12c:	0000000c 	andeq	r0, r0, ip
 130:	000000bc 	strheq	r0, [r0], -ip
 134:	08000394 	stmdaeq	r0, {r2, r4, r7, r8, r9}
 138:	00000002 	andeq	r0, r0, r2
 13c:	0000000c 	andeq	r0, r0, ip
 140:	000000bc 	strheq	r0, [r0], -ip
 144:	08000398 	stmdaeq	r0, {r3, r4, r7, r8, r9}
 148:	00000002 	andeq	r0, r0, r2
 14c:	0000000c 	andeq	r0, r0, ip
 150:	000000bc 	strheq	r0, [r0], -ip
 154:	0800039c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9}
 158:	00000002 	andeq	r0, r0, r2
 15c:	0000000c 	andeq	r0, r0, ip
 160:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 164:	7c020001 	stcvc	0, cr0, [r2], {1}
 168:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 16c:	00000010 	andeq	r0, r0, r0, lsl r0
 170:	0000015c 	andeq	r0, r0, ip, asr r1
 174:	080003a0 	stmdaeq	r0, {r5, r7, r8, r9}
 178:	00000110 	andeq	r0, r0, r0, lsl r1
 17c:	00080e51 	andeq	r0, r8, r1, asr lr
 180:	0000000c 	andeq	r0, r0, ip
 184:	0000015c 	andeq	r0, r0, ip, asr r1
 188:	080004b0 	stmdaeq	r0, {r4, r5, r7, sl}
 18c:	00000070 	andeq	r0, r0, r0, ror r0
 190:	0000000c 	andeq	r0, r0, ip
 194:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 198:	7c020001 	stcvc	0, cr0, [r2], {1}
 19c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1a0:	0000000c 	andeq	r0, r0, ip
 1a4:	00000190 	muleq	r0, r0, r1
 1a8:	08000570 	stmdaeq	r0, {r4, r5, r6, r8, sl}
 1ac:	00000014 	andeq	r0, r0, r4, lsl r0
 1b0:	00000018 	andeq	r0, r0, r8, lsl r0
 1b4:	00000190 	muleq	r0, r0, r1
 1b8:	08000584 	stmdaeq	r0, {r2, r7, r8, sl}
 1bc:	00000078 	andeq	r0, r0, r8, ror r0
 1c0:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
 1c4:	86038504 	strhi	r8, [r3], -r4, lsl #10
 1c8:	00018702 	andeq	r8, r1, r2, lsl #14
 1cc:	0000000c 	andeq	r0, r0, ip
 1d0:	00000190 	muleq	r0, r0, r1
 1d4:	080005fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sl}
 1d8:	00000014 	andeq	r0, r0, r4, lsl r0
 1dc:	0000000c 	andeq	r0, r0, ip
 1e0:	00000190 	muleq	r0, r0, r1
 1e4:	08000610 	stmdaeq	r0, {r4, r9, sl}
 1e8:	00000018 	andeq	r0, r0, r8, lsl r0
 1ec:	0000000c 	andeq	r0, r0, ip
 1f0:	00000190 	muleq	r0, r0, r1
 1f4:	08000628 	stmdaeq	r0, {r3, r5, r9, sl}
 1f8:	00000018 	andeq	r0, r0, r8, lsl r0
 1fc:	0000000c 	andeq	r0, r0, ip
 200:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 204:	7c020001 	stcvc	0, cr0, [r2], {1}
 208:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 20c:	00000014 	andeq	r0, r0, r4, lsl r0
 210:	000001fc 	strdeq	r0, [r0], -ip
 214:	08000640 	stmdaeq	r0, {r6, r9, sl}
 218:	0000015c 	andeq	r0, r0, ip, asr r1
 21c:	83080e41 	movwhi	r0, #36417	; 0x8e41
 220:	00018e02 	andeq	r8, r1, r2, lsl #28
 224:	00000020 	andeq	r0, r0, r0, lsr #32
 228:	000001fc 	strdeq	r0, [r0], -ip
 22c:	0800079c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl}
 230:	000000bc 	strheq	r0, [r0], -ip
 234:	841c0e43 	ldrhi	r0, [ip], #-3651	; 0xe43
 238:	86068507 	strhi	r8, [r6], -r7, lsl #10
 23c:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
 240:	8a028903 	bhi	a2654 <_Min_Stack_Size+0xa2254>
 244:	00000001 	andeq	r0, r0, r1
 248:	0000000c 	andeq	r0, r0, ip
 24c:	000001fc 	strdeq	r0, [r0], -ip
 250:	08000858 	stmdaeq	r0, {r3, r4, r6, fp}
 254:	00000012 	andeq	r0, r0, r2, lsl r0
 258:	00000010 	andeq	r0, r0, r0, lsl r0
 25c:	000001fc 	strdeq	r0, [r0], -ip
 260:	0800086c 	stmdaeq	r0, {r2, r3, r5, r6, fp}
 264:	00000024 	andeq	r0, r0, r4, lsr #32
 268:	00080e41 	andeq	r0, r8, r1, asr #28
 26c:	0000000c 	andeq	r0, r0, ip
 270:	000001fc 	strdeq	r0, [r0], -ip
 274:	08000890 	stmdaeq	r0, {r4, r7, fp}
 278:	0000000c 	andeq	r0, r0, ip
 27c:	0000000c 	andeq	r0, r0, ip
 280:	000001fc 	strdeq	r0, [r0], -ip
 284:	0800089c 	stmdaeq	r0, {r2, r3, r4, r7, fp}
 288:	00000006 	andeq	r0, r0, r6
 28c:	0000000c 	andeq	r0, r0, ip
 290:	000001fc 	strdeq	r0, [r0], -ip
 294:	080008a4 	stmdaeq	r0, {r2, r5, r7, fp}
 298:	0000000c 	andeq	r0, r0, ip
 29c:	0000000c 	andeq	r0, r0, ip
 2a0:	000001fc 	strdeq	r0, [r0], -ip
 2a4:	080008b0 	stmdaeq	r0, {r4, r5, r7, fp}
 2a8:	00000006 	andeq	r0, r0, r6
 2ac:	0000000c 	andeq	r0, r0, ip
 2b0:	000001fc 	strdeq	r0, [r0], -ip
 2b4:	080008b8 	stmdaeq	r0, {r3, r4, r5, r7, fp}
 2b8:	00000004 	andeq	r0, r0, r4
 2bc:	0000000c 	andeq	r0, r0, ip
 2c0:	000001fc 	strdeq	r0, [r0], -ip
 2c4:	080008bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, fp}
 2c8:	00000004 	andeq	r0, r0, r4
 2cc:	0000000c 	andeq	r0, r0, ip
 2d0:	000001fc 	strdeq	r0, [r0], -ip
 2d4:	080008c0 	stmdaeq	r0, {r6, r7, fp}
 2d8:	0000000a 	andeq	r0, r0, sl
 2dc:	0000000c 	andeq	r0, r0, ip
 2e0:	000001fc 	strdeq	r0, [r0], -ip
 2e4:	080008cc 	stmdaeq	r0, {r2, r3, r6, r7, fp}
 2e8:	00000004 	andeq	r0, r0, r4
 2ec:	0000000c 	andeq	r0, r0, ip
 2f0:	000001fc 	strdeq	r0, [r0], -ip
 2f4:	080008d0 	stmdaeq	r0, {r4, r6, r7, fp}
 2f8:	00000008 	andeq	r0, r0, r8
 2fc:	00000014 	andeq	r0, r0, r4, lsl r0
 300:	000001fc 	strdeq	r0, [r0], -ip
 304:	080008d8 	stmdaeq	r0, {r3, r4, r6, r7, fp}
 308:	00000028 	andeq	r0, r0, r8, lsr #32
 30c:	84040e46 	strhi	r0, [r4], #-3654	; 0xe46
 310:	00000001 	andeq	r0, r0, r1
 314:	0000000c 	andeq	r0, r0, ip
 318:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 31c:	7c020001 	stcvc	0, cr0, [r2], {1}
 320:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 324:	00000014 	andeq	r0, r0, r4, lsl r0
 328:	00000314 	andeq	r0, r0, r4, lsl r3
 32c:	08000900 	stmdaeq	r0, {r8, fp}
 330:	00000050 	andeq	r0, r0, r0, asr r0
 334:	84080e47 	strhi	r0, [r8], #-3655	; 0xe47
 338:	00018502 	andeq	r8, r1, r2, lsl #10
 33c:	0000000c 	andeq	r0, r0, ip
 340:	00000314 	andeq	r0, r0, r4, lsl r3
 344:	08000950 	stmdaeq	r0, {r4, r6, r8, fp}
 348:	00000010 	andeq	r0, r0, r0, lsl r0
 34c:	00000010 	andeq	r0, r0, r0, lsl r0
 350:	00000314 	andeq	r0, r0, r4, lsl r3
 354:	08000960 	stmdaeq	r0, {r5, r6, r8, fp}
 358:	00000038 	andeq	r0, r0, r8, lsr r0
 35c:	00080e41 	andeq	r0, r8, r1, asr #28
 360:	0000000c 	andeq	r0, r0, ip
 364:	00000314 	andeq	r0, r0, r4, lsl r3
 368:	08000998 	stmdaeq	r0, {r3, r4, r7, r8, fp}
 36c:	00000014 	andeq	r0, r0, r4, lsl r0
 370:	0000000c 	andeq	r0, r0, ip
 374:	00000314 	andeq	r0, r0, r4, lsl r3
 378:	080009ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, fp}
 37c:	0000000c 	andeq	r0, r0, ip
 380:	0000000c 	andeq	r0, r0, ip
 384:	00000314 	andeq	r0, r0, r4, lsl r3
 388:	080009b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, fp}
 38c:	00000020 	andeq	r0, r0, r0, lsr #32
 390:	0000000c 	andeq	r0, r0, ip
 394:	00000314 	andeq	r0, r0, r4, lsl r3
 398:	080009d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, fp}
 39c:	0000000c 	andeq	r0, r0, ip
 3a0:	00000014 	andeq	r0, r0, r4, lsl r0
 3a4:	00000314 	andeq	r0, r0, r4, lsl r3
 3a8:	080009e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, fp}
 3ac:	00000024 	andeq	r0, r0, r4, lsr #32
 3b0:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
 3b4:	00018502 	andeq	r8, r1, r2, lsl #10
 3b8:	0000000c 	andeq	r0, r0, ip
 3bc:	00000314 	andeq	r0, r0, r4, lsl r3
 3c0:	08000a08 	stmdaeq	r0, {r3, r9, fp}
 3c4:	0000000c 	andeq	r0, r0, ip
 3c8:	0000000c 	andeq	r0, r0, ip
 3cc:	00000314 	andeq	r0, r0, r4, lsl r3
 3d0:	08000a14 	stmdaeq	r0, {r2, r4, r9, fp}
 3d4:	00000018 	andeq	r0, r0, r8, lsl r0
 3d8:	0000000c 	andeq	r0, r0, ip
 3dc:	00000314 	andeq	r0, r0, r4, lsl r3
 3e0:	08000a2c 	stmdaeq	r0, {r2, r3, r5, r9, fp}
 3e4:	0000000c 	andeq	r0, r0, ip
 3e8:	0000000c 	andeq	r0, r0, ip
 3ec:	00000314 	andeq	r0, r0, r4, lsl r3
 3f0:	08000a38 	stmdaeq	r0, {r3, r4, r5, r9, fp}
 3f4:	00000018 	andeq	r0, r0, r8, lsl r0
 3f8:	0000000c 	andeq	r0, r0, ip
 3fc:	00000314 	andeq	r0, r0, r4, lsl r3
 400:	08000a50 	stmdaeq	r0, {r4, r6, r9, fp}
 404:	0000000c 	andeq	r0, r0, ip
 408:	0000000c 	andeq	r0, r0, ip
 40c:	00000314 	andeq	r0, r0, r4, lsl r3
 410:	08000a5c 	stmdaeq	r0, {r2, r3, r4, r6, r9, fp}
 414:	0000000c 	andeq	r0, r0, ip
 418:	0000000c 	andeq	r0, r0, ip
 41c:	00000314 	andeq	r0, r0, r4, lsl r3
 420:	08000a68 	stmdaeq	r0, {r3, r5, r6, r9, fp}
 424:	00000014 	andeq	r0, r0, r4, lsl r0
 428:	0000000c 	andeq	r0, r0, ip
 42c:	00000314 	andeq	r0, r0, r4, lsl r3
 430:	08000a7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, fp}
 434:	00000014 	andeq	r0, r0, r4, lsl r0
 438:	0000000c 	andeq	r0, r0, ip
 43c:	00000314 	andeq	r0, r0, r4, lsl r3
 440:	08000a90 	stmdaeq	r0, {r4, r7, r9, fp}
 444:	00000014 	andeq	r0, r0, r4, lsl r0
 448:	0000000c 	andeq	r0, r0, ip
 44c:	00000314 	andeq	r0, r0, r4, lsl r3
 450:	08000aa4 	stmdaeq	r0, {r2, r5, r7, r9, fp}
 454:	00000010 	andeq	r0, r0, r0, lsl r0
 458:	0000000c 	andeq	r0, r0, ip
 45c:	00000314 	andeq	r0, r0, r4, lsl r3
 460:	08000ab4 	stmdaeq	r0, {r2, r4, r5, r7, r9, fp}
 464:	00000014 	andeq	r0, r0, r4, lsl r0
 468:	0000000c 	andeq	r0, r0, ip
 46c:	00000314 	andeq	r0, r0, r4, lsl r3
 470:	08000ac8 	stmdaeq	r0, {r3, r6, r7, r9, fp}
 474:	00000014 	andeq	r0, r0, r4, lsl r0
 478:	0000000c 	andeq	r0, r0, ip
 47c:	00000314 	andeq	r0, r0, r4, lsl r3
 480:	08000adc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, fp}
 484:	00000014 	andeq	r0, r0, r4, lsl r0
 488:	00000014 	andeq	r0, r0, r4, lsl r0
 48c:	00000314 	andeq	r0, r0, r4, lsl r3
 490:	08000af0 	stmdaeq	r0, {r4, r5, r6, r7, r9, fp}
 494:	00000090 	muleq	r0, r0, r0
 498:	84040e46 	strhi	r0, [r4], #-3654	; 0xe46
 49c:	00000001 	andeq	r0, r0, r1
 4a0:	0000000c 	andeq	r0, r0, ip
 4a4:	00000314 	andeq	r0, r0, r4, lsl r3
 4a8:	08000b80 	stmdaeq	r0, {r7, r8, r9, fp}
 4ac:	00000030 	andeq	r0, r0, r0, lsr r0
 4b0:	0000000c 	andeq	r0, r0, ip
 4b4:	00000314 	andeq	r0, r0, r4, lsl r3
 4b8:	08000bb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, fp}
 4bc:	0000000c 	andeq	r0, r0, ip
 4c0:	0000000c 	andeq	r0, r0, ip
 4c4:	00000314 	andeq	r0, r0, r4, lsl r3
 4c8:	08000bbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, fp}
 4cc:	0000000c 	andeq	r0, r0, ip
 4d0:	0000000c 	andeq	r0, r0, ip
 4d4:	00000314 	andeq	r0, r0, r4, lsl r3
 4d8:	08000bc8 	stmdaeq	r0, {r3, r6, r7, r8, r9, fp}
 4dc:	0000000c 	andeq	r0, r0, ip
 4e0:	0000000c 	andeq	r0, r0, ip
 4e4:	00000314 	andeq	r0, r0, r4, lsl r3
 4e8:	08000bd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, fp}
 4ec:	00000018 	andeq	r0, r0, r8, lsl r0
 4f0:	0000000c 	andeq	r0, r0, ip
 4f4:	00000314 	andeq	r0, r0, r4, lsl r3
 4f8:	08000bec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, fp}
 4fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 500:	0000000c 	andeq	r0, r0, ip
 504:	00000314 	andeq	r0, r0, r4, lsl r3
 508:	08000c08 	stmdaeq	r0, {r3, sl, fp}
 50c:	00000018 	andeq	r0, r0, r8, lsl r0
 510:	0000000c 	andeq	r0, r0, ip
 514:	00000314 	andeq	r0, r0, r4, lsl r3
 518:	08000c20 	stmdaeq	r0, {r5, sl, fp}
 51c:	00000018 	andeq	r0, r0, r8, lsl r0
 520:	0000000c 	andeq	r0, r0, ip
 524:	00000314 	andeq	r0, r0, r4, lsl r3
 528:	08000c38 	stmdaeq	r0, {r3, r4, r5, sl, fp}
 52c:	00000018 	andeq	r0, r0, r8, lsl r0
 530:	0000000c 	andeq	r0, r0, ip
 534:	00000314 	andeq	r0, r0, r4, lsl r3
 538:	08000c50 	stmdaeq	r0, {r4, r6, sl, fp}
 53c:	0000000c 	andeq	r0, r0, ip
 540:	0000000c 	andeq	r0, r0, ip
 544:	00000314 	andeq	r0, r0, r4, lsl r3
 548:	08000c5c 	stmdaeq	r0, {r2, r3, r4, r6, sl, fp}
 54c:	00000018 	andeq	r0, r0, r8, lsl r0
 550:	0000000c 	andeq	r0, r0, ip
 554:	00000314 	andeq	r0, r0, r4, lsl r3
 558:	08000c74 	stmdaeq	r0, {r2, r4, r5, r6, sl, fp}
 55c:	00000018 	andeq	r0, r0, r8, lsl r0
 560:	0000000c 	andeq	r0, r0, ip
 564:	00000314 	andeq	r0, r0, r4, lsl r3
 568:	08000c8c 	stmdaeq	r0, {r2, r3, r7, sl, fp}
 56c:	00000018 	andeq	r0, r0, r8, lsl r0
 570:	0000000c 	andeq	r0, r0, ip
 574:	00000314 	andeq	r0, r0, r4, lsl r3
 578:	08000ca4 	stmdaeq	r0, {r2, r5, r7, sl, fp}
 57c:	00000018 	andeq	r0, r0, r8, lsl r0
 580:	0000000c 	andeq	r0, r0, ip
 584:	00000314 	andeq	r0, r0, r4, lsl r3
 588:	08000cbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp}
 58c:	00000018 	andeq	r0, r0, r8, lsl r0
 590:	0000000c 	andeq	r0, r0, ip
 594:	00000314 	andeq	r0, r0, r4, lsl r3
 598:	08000cd4 	stmdaeq	r0, {r2, r4, r6, r7, sl, fp}
 59c:	00000018 	andeq	r0, r0, r8, lsl r0
 5a0:	0000000c 	andeq	r0, r0, ip
 5a4:	00000314 	andeq	r0, r0, r4, lsl r3
 5a8:	08000cec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, fp}
 5ac:	00000018 	andeq	r0, r0, r8, lsl r0
 5b0:	0000000c 	andeq	r0, r0, ip
 5b4:	00000314 	andeq	r0, r0, r4, lsl r3
 5b8:	08000d04 	stmdaeq	r0, {r2, r8, sl, fp}
 5bc:	00000018 	andeq	r0, r0, r8, lsl r0
 5c0:	0000000c 	andeq	r0, r0, ip
 5c4:	00000314 	andeq	r0, r0, r4, lsl r3
 5c8:	08000d1c 	stmdaeq	r0, {r2, r3, r4, r8, sl, fp}
 5cc:	00000018 	andeq	r0, r0, r8, lsl r0
 5d0:	0000000c 	andeq	r0, r0, ip
 5d4:	00000314 	andeq	r0, r0, r4, lsl r3
 5d8:	08000d34 	stmdaeq	r0, {r2, r4, r5, r8, sl, fp}
 5dc:	00000018 	andeq	r0, r0, r8, lsl r0
 5e0:	0000000c 	andeq	r0, r0, ip
 5e4:	00000314 	andeq	r0, r0, r4, lsl r3
 5e8:	08000d4c 	stmdaeq	r0, {r2, r3, r6, r8, sl, fp}
 5ec:	00000018 	andeq	r0, r0, r8, lsl r0
 5f0:	0000000c 	andeq	r0, r0, ip
 5f4:	00000314 	andeq	r0, r0, r4, lsl r3
 5f8:	08000d64 	stmdaeq	r0, {r2, r5, r6, r8, sl, fp}
 5fc:	00000018 	andeq	r0, r0, r8, lsl r0
 600:	0000000c 	andeq	r0, r0, ip
 604:	00000314 	andeq	r0, r0, r4, lsl r3
 608:	08000d7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, sl, fp}
 60c:	00000018 	andeq	r0, r0, r8, lsl r0
 610:	0000000c 	andeq	r0, r0, ip
 614:	00000314 	andeq	r0, r0, r4, lsl r3
 618:	08000d94 	stmdaeq	r0, {r2, r4, r7, r8, sl, fp}
 61c:	00000018 	andeq	r0, r0, r8, lsl r0
 620:	0000000c 	andeq	r0, r0, ip
 624:	00000314 	andeq	r0, r0, r4, lsl r3
 628:	08000dac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, fp}
 62c:	00000018 	andeq	r0, r0, r8, lsl r0
 630:	0000000c 	andeq	r0, r0, ip
 634:	00000314 	andeq	r0, r0, r4, lsl r3
 638:	08000dc4 	stmdaeq	r0, {r2, r6, r7, r8, sl, fp}
 63c:	00000018 	andeq	r0, r0, r8, lsl r0
 640:	0000000c 	andeq	r0, r0, ip
 644:	00000314 	andeq	r0, r0, r4, lsl r3
 648:	08000ddc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl, fp}
 64c:	00000034 	andeq	r0, r0, r4, lsr r0
 650:	0000000c 	andeq	r0, r0, ip
 654:	00000314 	andeq	r0, r0, r4, lsl r3
 658:	08000e10 	stmdaeq	r0, {r4, r9, sl, fp}
 65c:	00000010 	andeq	r0, r0, r0, lsl r0
 660:	0000000c 	andeq	r0, r0, ip
 664:	00000314 	andeq	r0, r0, r4, lsl r3
 668:	08000e20 	stmdaeq	r0, {r5, r9, sl, fp}
 66c:	00000014 	andeq	r0, r0, r4, lsl r0
 670:	0000000c 	andeq	r0, r0, ip
 674:	00000314 	andeq	r0, r0, r4, lsl r3
 678:	08000e34 	stmdaeq	r0, {r2, r4, r5, r9, sl, fp}
 67c:	0000000c 	andeq	r0, r0, ip
 680:	0000000c 	andeq	r0, r0, ip
 684:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 688:	7c020001 	stcvc	0, cr0, [r2], {1}
 68c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 690:	00000014 	andeq	r0, r0, r4, lsl r0
 694:	00000680 	andeq	r0, r0, r0, lsl #13
 698:	08000e40 	stmdaeq	r0, {r6, r9, sl, fp}
 69c:	0000010c 	andeq	r0, r0, ip, lsl #2
 6a0:	83080e41 	movwhi	r0, #36417	; 0x8e41
 6a4:	00018e02 	andeq	r8, r1, r2, lsl #28
 6a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6ac:	00000680 	andeq	r0, r0, r0, lsl #13
 6b0:	08000f4c 	stmdaeq	r0, {r2, r3, r6, r8, r9, sl, fp}
 6b4:	000000c4 	andeq	r0, r0, r4, asr #1
 6b8:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xe41
 6bc:	86048505 	strhi	r8, [r4], -r5, lsl #10
 6c0:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 6c4:	280e5e01 	stmdacs	lr, {r0, r9, sl, fp, ip, lr}
 6c8:	0000000c 	andeq	r0, r0, ip
 6cc:	00000680 	andeq	r0, r0, r0, lsl #13
 6d0:	08001010 	stmdaeq	r0, {r4, ip}
 6d4:	00000016 	andeq	r0, r0, r6, lsl r0
 6d8:	00000014 	andeq	r0, r0, r4, lsl r0
 6dc:	00000680 	andeq	r0, r0, r0, lsl #13
 6e0:	08001028 	stmdaeq	r0, {r3, r5, ip}
 6e4:	00000022 	andeq	r0, r0, r2, lsr #32
 6e8:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
 6ec:	00018502 	andeq	r8, r1, r2, lsl #10
 6f0:	0000000c 	andeq	r0, r0, ip
 6f4:	00000680 	andeq	r0, r0, r0, lsl #13
 6f8:	0800104c 	stmdaeq	r0, {r2, r3, r6, ip}
 6fc:	0000000c 	andeq	r0, r0, ip
 700:	0000000c 	andeq	r0, r0, ip
 704:	00000680 	andeq	r0, r0, r0, lsl #13
 708:	08001058 	stmdaeq	r0, {r3, r4, r6, ip}
 70c:	0000001a 	andeq	r0, r0, sl, lsl r0
 710:	0000000c 	andeq	r0, r0, ip
 714:	00000680 	andeq	r0, r0, r0, lsl #13
 718:	08001074 	stmdaeq	r0, {r2, r4, r5, r6, ip}
 71c:	00000012 	andeq	r0, r0, r2, lsl r0
 720:	0000000c 	andeq	r0, r0, ip
 724:	00000680 	andeq	r0, r0, r0, lsl #13
 728:	08001088 	stmdaeq	r0, {r3, r7, ip}
 72c:	0000001a 	andeq	r0, r0, sl, lsl r0
 730:	0000000c 	andeq	r0, r0, ip
 734:	00000680 	andeq	r0, r0, r0, lsl #13
 738:	080010a4 	stmdaeq	r0, {r2, r5, r7, ip}
 73c:	0000001a 	andeq	r0, r0, sl, lsl r0
 740:	0000000c 	andeq	r0, r0, ip
 744:	00000680 	andeq	r0, r0, r0, lsl #13
 748:	080010c0 	stmdaeq	r0, {r6, r7, ip}
 74c:	00000008 	andeq	r0, r0, r8
 750:	0000000c 	andeq	r0, r0, ip
 754:	00000680 	andeq	r0, r0, r0, lsl #13
 758:	080010c8 	stmdaeq	r0, {r3, r6, r7, ip}
 75c:	00000008 	andeq	r0, r0, r8
 760:	0000000c 	andeq	r0, r0, ip
 764:	00000680 	andeq	r0, r0, r0, lsl #13
 768:	080010d0 	stmdaeq	r0, {r4, r6, r7, ip}
 76c:	00000016 	andeq	r0, r0, r6, lsl r0
 770:	0000000c 	andeq	r0, r0, ip
 774:	00000680 	andeq	r0, r0, r0, lsl #13
 778:	080010e8 	stmdaeq	r0, {r3, r5, r6, r7, ip}
 77c:	0000001a 	andeq	r0, r0, sl, lsl r0
 780:	0000000c 	andeq	r0, r0, ip
 784:	00000680 	andeq	r0, r0, r0, lsl #13
 788:	08001104 	stmdaeq	r0, {r2, r8, ip}
 78c:	00000016 	andeq	r0, r0, r6, lsl r0
 790:	0000000c 	andeq	r0, r0, ip
 794:	00000680 	andeq	r0, r0, r0, lsl #13
 798:	0800111c 	stmdaeq	r0, {r2, r3, r4, r8, ip}
 79c:	00000016 	andeq	r0, r0, r6, lsl r0
 7a0:	0000000c 	andeq	r0, r0, ip
 7a4:	00000680 	andeq	r0, r0, r0, lsl #13
 7a8:	08001134 	stmdaeq	r0, {r2, r4, r5, r8, ip}
 7ac:	0000001a 	andeq	r0, r0, sl, lsl r0
 7b0:	0000000c 	andeq	r0, r0, ip
 7b4:	00000680 	andeq	r0, r0, r0, lsl #13
 7b8:	08001150 	stmdaeq	r0, {r4, r6, r8, ip}
 7bc:	0000000c 	andeq	r0, r0, ip
 7c0:	0000000c 	andeq	r0, r0, ip
 7c4:	00000680 	andeq	r0, r0, r0, lsl #13
 7c8:	0800115c 	stmdaeq	r0, {r2, r3, r4, r6, r8, ip}
 7cc:	0000001a 	andeq	r0, r0, sl, lsl r0
 7d0:	0000000c 	andeq	r0, r0, ip
 7d4:	00000680 	andeq	r0, r0, r0, lsl #13
 7d8:	08001178 	stmdaeq	r0, {r3, r4, r5, r6, r8, ip}
 7dc:	00000012 	andeq	r0, r0, r2, lsl r0
 7e0:	0000000c 	andeq	r0, r0, ip
 7e4:	00000680 	andeq	r0, r0, r0, lsl #13
 7e8:	0800118c 	stmdaeq	r0, {r2, r3, r7, r8, ip}
 7ec:	0000001a 	andeq	r0, r0, sl, lsl r0
 7f0:	0000000c 	andeq	r0, r0, ip
 7f4:	00000680 	andeq	r0, r0, r0, lsl #13
 7f8:	080011a8 	stmdaeq	r0, {r3, r5, r7, r8, ip}
 7fc:	0000001a 	andeq	r0, r0, sl, lsl r0
 800:	0000000c 	andeq	r0, r0, ip
 804:	00000680 	andeq	r0, r0, r0, lsl #13
 808:	080011c4 	stmdaeq	r0, {r2, r6, r7, r8, ip}
 80c:	00000016 	andeq	r0, r0, r6, lsl r0
 810:	0000000c 	andeq	r0, r0, ip
 814:	00000680 	andeq	r0, r0, r0, lsl #13
 818:	080011dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, ip}
 81c:	0000001a 	andeq	r0, r0, sl, lsl r0
 820:	0000000c 	andeq	r0, r0, ip
 824:	00000680 	andeq	r0, r0, r0, lsl #13
 828:	080011f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, ip}
 82c:	00000014 	andeq	r0, r0, r4, lsl r0
 830:	00000014 	andeq	r0, r0, r4, lsl r0
 834:	00000680 	andeq	r0, r0, r0, lsl #13
 838:	0800120c 	stmdaeq	r0, {r2, r3, r9, ip}
 83c:	0000003a 	andeq	r0, r0, sl, lsr r0
 840:	84040e43 	strhi	r0, [r4], #-3651	; 0xe43
 844:	00000001 	andeq	r0, r0, r1
 848:	0000000c 	andeq	r0, r0, ip
 84c:	00000680 	andeq	r0, r0, r0, lsl #13
 850:	08001248 	stmdaeq	r0, {r3, r6, r9, ip}
 854:	0000000c 	andeq	r0, r0, ip
 858:	0000000c 	andeq	r0, r0, ip
 85c:	00000680 	andeq	r0, r0, r0, lsl #13
 860:	08001254 	stmdaeq	r0, {r2, r4, r6, r9, ip}
 864:	00000008 	andeq	r0, r0, r8
 868:	00000014 	andeq	r0, r0, r4, lsl r0
 86c:	00000680 	andeq	r0, r0, r0, lsl #13
 870:	0800125c 	stmdaeq	r0, {r2, r3, r4, r6, r9, ip}
 874:	0000004c 	andeq	r0, r0, ip, asr #32
 878:	84040e41 	strhi	r0, [r4], #-3649	; 0xe41
 87c:	00000001 	andeq	r0, r0, r1
 880:	0000000c 	andeq	r0, r0, ip
 884:	00000680 	andeq	r0, r0, r0, lsl #13
 888:	080012a8 	stmdaeq	r0, {r3, r5, r7, r9, ip}
 88c:	00000010 	andeq	r0, r0, r0, lsl r0
 890:	0000000c 	andeq	r0, r0, ip
 894:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 898:	7c020001 	stcvc	0, cr0, [r2], {1}
 89c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 8a0:	00000014 	andeq	r0, r0, r4, lsl r0
 8a4:	00000890 	muleq	r0, r0, r8
 8a8:	080012b8 	stmdaeq	r0, {r3, r4, r5, r7, r9, ip}
 8ac:	0000001a 	andeq	r0, r0, sl, lsl r0
 8b0:	83080e41 	movwhi	r0, #36417	; 0x8e41
 8b4:	00018e02 	andeq	r8, r1, r2, lsl #28
 8b8:	0000000c 	andeq	r0, r0, ip
 8bc:	00000890 	muleq	r0, r0, r8
 8c0:	080012d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, ip}
 8c4:	0000000c 	andeq	r0, r0, ip
 8c8:	0000000c 	andeq	r0, r0, ip
 8cc:	00000890 	muleq	r0, r0, r8
 8d0:	080012e0 	stmdaeq	r0, {r5, r6, r7, r9, ip}
 8d4:	0000000c 	andeq	r0, r0, ip
 8d8:	00000014 	andeq	r0, r0, r4, lsl r0
 8dc:	00000890 	muleq	r0, r0, r8
 8e0:	080012ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, ip}
 8e4:	0000002e 	andeq	r0, r0, lr, lsr #32
 8e8:	84040e49 	strhi	r0, [r4], #-3657	; 0xe49
 8ec:	00000001 	andeq	r0, r0, r1
 8f0:	0000000c 	andeq	r0, r0, ip
 8f4:	00000890 	muleq	r0, r0, r8
 8f8:	0800131c 	stmdaeq	r0, {r2, r3, r4, r8, r9, ip}
 8fc:	0000000c 	andeq	r0, r0, ip
 900:	0000000c 	andeq	r0, r0, ip
 904:	00000890 	muleq	r0, r0, r8
 908:	08001328 	stmdaeq	r0, {r3, r5, r8, r9, ip}
 90c:	0000000c 	andeq	r0, r0, ip
 910:	0000000c 	andeq	r0, r0, ip
 914:	00000890 	muleq	r0, r0, r8
 918:	08001334 	stmdaeq	r0, {r2, r4, r5, r8, r9, ip}
 91c:	00000010 	andeq	r0, r0, r0, lsl r0
